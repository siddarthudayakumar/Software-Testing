<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>243003</bug_id>
          
          <creation_ts>2008-08-03 20:03:00 -0400</creation_ts>
          <short_desc>[organize imports] Unused static import created when organizing imports</short_desc>
          <delta_ts>2011-10-04 14:42:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Adam Bryzak">abryzak</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>nanda.firdausi</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1303575</commentid>
    <comment_count>0</comment_count>
    <who name="Adam Bryzak">abryzak</who>
    <bug_when>2008-08-03 20:03:42 -0400</bug_when>
    <thetext>Build ID: I20080617-2000

Steps To Reproduce:
1. Create the following 2 classes in an Eclipse Java Project (JUnit 4 is required in classpath)

a/WaitingAssert.java:
package a;

import org.junit.Assert;

public class WaitingAssert extends Assert {

    public static final long DEFAULT_WAIT_TIME = 1500;

    public static final long RETRY_TIME = 15;

    public interface Condition {
        boolean eval() throws Exception;
    }

    public static void assertTrue(Condition condition) {
        assertTrue(condition, DEFAULT_WAIT_TIME, RETRY_TIME);
    }

    public static void assertTrue(Condition condition, long waitTimeMillis,
            long retryTime) {
        assertTrue(&quot;Timeout waiting for condition &quot;
                + condition.getClass().getName(), condition, waitTimeMillis,
                retryTime);
    }

    public static void assertTrue(String message, Condition condition,
            long waitTimeMillis, long retryTime) {
        try {
            if (!condition.eval()) {
                long time = System.currentTimeMillis();
                long end = time + waitTimeMillis - retryTime;
                for (;;) {
                    if (condition.eval()) {
                        return;
                    }
                    time = System.currentTimeMillis();
                    if (time &gt;= end) {
                        break;
                    }
                    Thread.sleep(retryTime);
                }
                fail(message);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            fail(&quot;Failed from exception: &quot; + ex);
        }
    }

}


a/OrganizeImportsCreatesUnused.java:
package a;

import static a.WaitingAssert.assertTrue;

public class OrganizeImportsCreatesUnused {

    public void testSomething() {
        assertTrue(new WaitingAssert.Condition() {
            public boolean eval() throws Exception {
                return true;
            }
        });
        assertTrue(true);
    }

}


2. Organize imports on OrganizeImportsCreatesUnused.java
3. Note that import static org.junit.Assert.assertTrue; is added and marked as unused.

More information:</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1654301</commentid>
    <comment_count>1</comment_count>
    <who name="Nanda Firdausi">nanda.firdausi</who>
    <bug_when>2010-01-12 05:38:36 -0500</bug_when>
    <thetext>I think the problem is much bigger because if I do F3 (Open Declaration) on the second assertTrue, it will go to assertTrue in JUnit, which is wrong!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1654302</commentid>
    <comment_count>2</comment_count>
    <who name="Nanda Firdausi">nanda.firdausi</who>
    <bug_when>2010-01-12 05:41:04 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; I think the problem is much bigger because if I do F3 (Open Declaration) on the
&gt; second assertTrue, it will go to assertTrue in JUnit, which is wrong!

Sorry... seems that my comment is wrong. Just ignore it</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1654354</commentid>
    <comment_count>3</comment_count>
      <attachid>155845</attachid>
    <who name="Nanda Firdausi">nanda.firdausi</who>
    <bug_when>2010-01-12 07:58:09 -0500</bug_when>
    <thetext>Created attachment 155845
my patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1654357</commentid>
    <comment_count>4</comment_count>
      <attachid>155846</attachid>
    <who name="Nanda Firdausi">nanda.firdausi</who>
    <bug_when>2010-01-12 08:04:52 -0500</bug_when>
    <thetext>Created attachment 155846
new patch also for static fields</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1655006</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-01-13 04:09:33 -0500</bug_when>
    <thetext>ImportRewrite now lives in JDT Core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1655148</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-01-13 08:59:05 -0500</bug_when>
    <thetext>Jay,

Please investigate as part of the work on organize import.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1732075</commentid>
    <comment_count>7</comment_count>
      <attachid>167667</attachid>
    <who name="Tim Baumgartner">tim.baumgartner</who>
    <bug_when>2010-05-10 05:04:42 -0400</bug_when>
    <thetext>Created attachment 167667
Example Project

I have the same problem and I used the 2nd patch supplied by Nanda, but it didn&apos;t help.
I have attach a sample project. The problem class is DataPackageImpl.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>155845</attachid>
            <date>2010-01-12 07:58:00 -0500</date>
            <delta_ts>2010-01-12 07:58:09 -0500</delta_ts>
            <desc>my patch</desc>
            <filename>patch243003.txt</filename>
            <type>text/plain</type>
            <size>2750</size>
            <attacher name="Nanda Firdausi">nanda.firdausi</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>155846</attachid>
            <date>2010-01-12 08:04:00 -0500</date>
            <delta_ts>2010-01-12 08:04:52 -0500</delta_ts>
            <desc>new patch also for static fields</desc>
            <filename>patch243003.txt</filename>
            <type>text/plain</type>
            <size>3658</size>
            <attacher name="Nanda Firdausi">nanda.firdausi</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>167667</attachid>
            <date>2010-05-10 05:04:00 -0400</date>
            <delta_ts>2010-05-10 05:04:42 -0400</delta_ts>
            <desc>Example Project</desc>
            <filename>Bug243003.zip</filename>
            <type>application/zip</type>
            <size>12958</size>
            <attacher name="Tim Baumgartner">tim.baumgartner</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>308886</bug_id>
          
          <creation_ts>2010-04-12 12:20:00 -0400</creation_ts>
          <short_desc>CompilationUnit.rewrite produces wrong result/</short_desc>
          <delta_ts>2011-10-04 14:40:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David Schuler">schulerdavid</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>aeschli</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1711038</commentid>
    <comment_count>0</comment_count>
    <who name="David Schuler">schulerdavid</who>
    <bug_when>2010-04-12 12:20:12 -0400</bug_when>
    <thetext>Build Identifier: 20100318-1801

The compilation CompilationUnit.rewrite produces an incorrect result in case of an else if statement. The CompilationUnit.toString method, however produces a correct result.

On older eclipse verions the attached test causes a bug similar to this one:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=304656


Reproducible: Always

Steps to Reproduce:
1. Run attached JUnit test. It tries to add a log statement to every existing statement. Invoking CompilationUnit.rewrite however produces the wrong result,
while CompilationUnit.toString produces a correct one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1711043</commentid>
    <comment_count>1</comment_count>
      <attachid>164583</attachid>
    <who name="David Schuler">schulerdavid</who>
    <bug_when>2010-04-12 12:22:57 -0400</bug_when>
    <thetext>Created attachment 164583
JUnit Test to reproduce the bug</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1711514</commentid>
    <comment_count>2</comment_count>
      <attachid>164583</attachid>
    <who name="David Schuler">schulerdavid</who>
    <bug_when>2010-04-13 03:38:17 -0400</bug_when>
    <thetext>Comment on attachment 164583
JUnit Test to reproduce the bug

There is a missing brace in the String returned by getSource() method of the test case. However, this does not influence the results.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1712830</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-14 13:46:37 -0400</bug_when>
    <thetext>The modifying approach doesn&apos;t quite work in this case when applying modifications on modifications.
I&apos;ll try to rewrite it using the descriptive approach.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1717956</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-21 14:21:37 -0400</bug_when>
    <thetext>The descriptive approach doesn&apos;t work as well in this case.
This is too late to try to fix this for 3.6.

I&apos;ll continue to investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1777079</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-07-13 13:12:08 -0400</bug_when>
    <thetext>Martin, would you have any documentation I could go through to understand the way the internals of rewrite is working?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1777447</commentid>
    <comment_count>6</comment_count>
    <who name="Martin Aeschlimann">aeschli</who>
    <bug_when>2010-07-14 03:12:59 -0400</bug_when>
    <thetext>Sorry, there is only the code... I&apos;ll gladly help, and maybe also David still remembers how things work.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>164583</attachid>
            <date>2010-04-12 12:22:00 -0400</date>
            <delta_ts>2010-04-13 03:38:17 -0400</delta_ts>
            <desc>JUnit Test to reproduce the bug</desc>
            <filename>IfElseFailureTest.java</filename>
            <type>text/plain</type>
            <size>4134</size>
            <attacher name="David Schuler">schulerdavid</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>338398</bug_id>
          
          <creation_ts>2011-02-28 06:39:00 -0500</creation_ts>
          <short_desc>Code assist is case sensitive for statically imported methods</short_desc>
          <delta_ts>2011-02-28 06:44:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David  Balažic">david.balazic</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>amj87.iitr</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1890186</commentid>
    <comment_count>0</comment_count>
    <who name="David  Balažic">david.balazic</who>
    <bug_when>2011-02-28 06:39:43 -0500</bug_when>
    <thetext>In a Java file with:

import static org.junit.Assert.assertNotNull;


typing in code &quot;assertno&quot; and then pressing ctrl+space gives no proposals.

Typing &quot;assertNo&quot; and the ctrl+space on the other hand offers assertNotNull, as expected.



-- Configuration Details --
Product: Eclipse 1.3.1.20100913-1228 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.6.1.r361_v20100714-0800-7z8XFUSFLFlmgLc5z-Bvrt8-HVkH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1890188</commentid>
    <comment_count>1</comment_count>
    <who name="David  Balažic">david.balazic</who>
    <bug_when>2011-02-28 06:40:26 -0500</bug_when>
    <thetext>May be related with bug 246832.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1890196</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-28 06:44:38 -0500</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>281848</bug_id>
          
          <creation_ts>2009-06-29 09:07:00 -0400</creation_ts>
          <short_desc>Eclipse unable to resolve classes in large workspace</short_desc>
          <delta_ts>2010-08-27 18:30:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Beirti O&apos;Nunain">beirti.x.onunain</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>darin.eclipse</cc>
    
    <cc>frederic_fusier</cc>
    
    <cc>igor_cc75</cc>
    
    <cc>kellyc</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>remy.suen</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>tparker</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1534066</commentid>
    <comment_count>0</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-06-29 09:07:30 -0400</bug_when>
    <thetext>Build ID: 20090619-0625

Steps To Reproduce:
After making changes to a file/plugin OR checking out a new plugin, the error &quot;The type X cannot be resolved. It is indirectly referenced from required .class files&quot; appears, often on classes/plugins unrelated to the change.

This is a very difficult bug to reproduce at will. It seems to be more prevalent in workspaces with large numbers of plugins (&gt;90 although I&apos;m sure this is small by some standards)

I have seen this in all eclipse versions I&apos;ve used (3.2 -&gt; 3.5). I got it the very day I set up a workspace in 3.5.

There is often no way to solve the error. I usually try the following steps:

- Clean and build entire workspace
- Clean and build plugin by plugin
- Restart Eclipse with -clean option

Finally, and most often, I need to check out my entire workspace again. This error has happened to most developers on our team so does not seem to be a &apos;user error&apos;


More information:
Understandably, without any reproducible steps, this bug will probably be binned but I urge somebody to investigate what may be happening. I presume that it is related to the automatic building of the workspace and that the compilation data held by eclipse is somehow corrupted. As mentioned above, this seems to affect users with larger workspaces and is much less prevalent on smaller workspaces.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534082</commentid>
    <comment_count>1</comment_count>
    <who name="Remy Suen">remy.suen</who>
    <bug_when>2009-06-29 09:23:15 -0400</bug_when>
    <thetext>I&apos;ve gotten these myself before but haven&apos;t in a while.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534107</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2009-06-29 09:53:57 -0400</bug_when>
    <thetext>I&apos;m almost sure you&apos;re hitting bug 278745 which is mentioned in the readme:


New &apos;indirectly referenced from required .class files&apos; compile error
In the 3.5 release, the compiler fixed a problem at the 1.5 compliance level and above, that may cause your existing projects to report an &apos;indirectly referenced from required .class files&apos; error.

When a type implements more than 1 API method such as :

   1. public int getService(String name);
   2. public int getService(String name, Missing missing);
   3. public int getService(String name, String platform, Missing missing);

and you call the method getService(&quot;Test&quot;), the compiler needs to find the best matching method. If the type Missing is not available on your Java build path because its bundle is not required then an &apos;indirectly referenced from required .class files&apos; error could be reported by the compiler.

To fix this add the necessary bundle to your required bundles or wait for a 3.5 maintenance build where this problem will be fixed. (bug 278745)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534122</commentid>
    <comment_count>3</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-06-29 10:02:48 -0400</bug_when>
    <thetext>I don&apos;t think that this is quite the same as Bug 278745. Whenever I see this bug, it is not because of a missing resource. It will happen even though the resources available in the workspace have not changed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534127</commentid>
    <comment_count>4</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2009-06-29 10:06:31 -0400</bug_when>
    <thetext>It depends how the classpath is resolved. Can you check whether a indirectly required bundle is missing?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534145</commentid>
    <comment_count>5</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-06-29 10:26:13 -0400</bug_when>
    <thetext>There are no bundles missing, that&apos;s the bug!

The latest happened when I checked out my workspace, everything compiled and ran successfully. I changed a single JUnit and ran the junit, as Eclipse was &apos;building workspace&apos; the &apos;unable to resolve...&apos; error appeared on 3 plugins unrelated to the JUnit I had been editing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534149</commentid>
    <comment_count>6</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2009-06-29 10:29:35 -0400</bug_when>
    <thetext>The error does not always happen as it depends on the classpath and build order. 

&gt;There are no bundles missing, that&apos;s the bug!
Are you 100% sure? Some of the bundles might be needed indirectly as described above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534180</commentid>
    <comment_count>7</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-06-29 10:53:45 -0400</bug_when>
    <thetext>I&apos;m 100% sure that nothing has changed in the workspace/bundles/dependencies to cause this to happen. I&apos;ve asked others on my team and this bug can surface on a brand new workspace which is fully identical to another developers workspace which has no errors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534184</commentid>
    <comment_count>8</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2009-06-29 10:56:40 -0400</bug_when>
    <thetext>&gt;I&apos;m 100% sure that nothing has changed in the workspace/bundles/dependencies to
&gt;cause this to happen.
Yes, of course not. The problem happens when you change from &lt; 3.5 to 3.5. The compiler needs more information (signatures) than before and fails if he cannot find them on its Java build path.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534203</commentid>
    <comment_count>9</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-06-29 11:11:16 -0400</bug_when>
    <thetext>Why is the error intermittent though? It happens &apos;relatively&apos; infrequently. I see it approx once/twice a month.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1534210</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2009-06-29 11:13:50 -0400</bug_when>
    <thetext>Sorry, I just saw this:

&gt;I have seen this in all eclipse versions I&apos;ve used (3.2 -&gt; 3.5). I got it the
&gt;very day I set up a workspace in 3.5.

So it&apos;s definitely something else/more than bug 278745, though it might happen more frequently now.


&gt;Why is the error intermittent though?
Different build order or what&apos;s incrementally built can cause this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1545220</commentid>
    <comment_count>11</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-07-03 08:25:26 -0400</bug_when>
    <thetext>Is there any reliable workaround for this? It seems to happen even more regularly now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1551736</commentid>
    <comment_count>12</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-07-14 09:49:53 -0400</bug_when>
    <thetext>Without further steps to reproduce or a workspace that exposes the issue, I don&apos;t see what we can do to either provide a workaround or fix it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1551744</commentid>
    <comment_count>13</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2009-07-14 09:54:45 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Without further steps to reproduce or a workspace that exposes the issue, I
&gt; don&apos;t see what we can do to either provide a workaround or fix it.
&gt; 

How about creating a workspace containing the eclipse source? 

Is it possible to completely clear the eclipse &apos;cache&apos; of resource/dependency data to force it to rebuild its information about the workspace?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1643885</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-12-11 17:04:14 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; How about creating a workspace containing the eclipse source? 
I did, but I could not get the problem described here.

&gt; Is it possible to completely clear the eclipse &apos;cache&apos; of resource/dependency
&gt; data to force it to rebuild its information about the workspace?
You can try Clean All + rebuild.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1712791</commentid>
    <comment_count>15</comment_count>
    <who name="Kelly Campbell">kellyc</who>
    <bug_when>2010-04-14 12:56:59 -0400</bug_when>
    <thetext>We were running into something that appears to be this bug. I have traced it down to NameLookup.java 1.126 line 975 which calculates the topLevelTypeName. However it doesn&apos;t take into account if the matchName parameter is an internal type name such as &quot;Foo$Bar&quot;

Correcting this fixed the problem for my test project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1713749</commentid>
    <comment_count>16</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-15 11:13:43 -0400</bug_when>
    <thetext>Please provide a patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1713756</commentid>
    <comment_count>17</comment_count>
      <attachid>164979</attachid>
    <who name="Kelly Campbell">kellyc</who>
    <bug_when>2010-04-15 11:18:30 -0400</bug_when>
    <thetext>Created attachment 164979
patch for the issue

Here&apos;s a patch, but I didn&apos;t take the time to figure out how to create a unit test for this issue. I just tested on my local project which was experiencing the issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1717190</commentid>
    <comment_count>18</comment_count>
    <who name="Igor Chernyshev">igor_cc75</who>
    <bug_when>2010-04-20 19:47:37 -0400</bug_when>
    <thetext>The patch fixes two similar issues that showed up in my project. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1717208</commentid>
    <comment_count>19</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-20 20:42:58 -0400</bug_when>
    <thetext>The patch as is breaks some existing tests where a toplevel type name contains a &apos;$&apos;. So even if the patch does fix some of your issues, I cannot simply release it as is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1717220</commentid>
    <comment_count>20</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-20 21:19:20 -0400</bug_when>
    <thetext>The patch needs more work. I&apos;ll see what I can do about it tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1717595</commentid>
    <comment_count>21</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-21 09:38:42 -0400</bug_when>
    <thetext>Jay, please try to see what can be done to make the patch passing our current test.
The problem with the current patch is that it is not longer capable to retrieve a toplevel type that contains a &apos;$&apos; sign in the name.
Check the org.eclipse.jdt.core.tests.model.ReconcilerTests test suite.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1718686</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2010-04-22 09:18:43 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; We were running into something that appears to be this bug. I have traced it
&gt; down to NameLookup.java 1.126 line 975 which calculates the topLevelTypeName.
&gt; However it doesn&apos;t take into account if the matchName parameter is an internal
&gt; type name such as &quot;Foo$Bar&quot;
&gt; 
&gt; Correcting this fixed the problem for my test project.

Interestingly, we seem to have the code that handles the inner types in the same method that is modified (the invocations of seekTypesInBinaryPackage).
Kelly, did you happen to know what the packageFlavor variable&apos;s value was? Was it IPackageFragmentRoot.K_SOURCE by any chance?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1719153</commentid>
    <comment_count>23</comment_count>
    <who name="Kelly Campbell">kellyc</who>
    <bug_when>2010-04-22 14:23:43 -0400</bug_when>
    <thetext>(In reply to comment #22)
&gt; Interestingly, we seem to have the code that handles the inner types in the
&gt; same method that is modified (the invocations of seekTypesInBinaryPackage).
&gt; Kelly, did you happen to know what the packageFlavor variable&apos;s value was? Was
&gt; it IPackageFragmentRoot.K_SOURCE by any chance?

Yes, packageFlavor = 1 which is K_SOURCE.

Here&apos;s the stack trace:

Daemon Thread [org.eclipse.jdt.internal.ui.text.JavaReconciler] (Suspended (breakpoint at line 979 in NameLookup))	
	NameLookup.seekTypes(String, IPackageFragment, boolean, int, IJavaElementRequestor) line: 979	
	NameLookup.findType(String, IPackageFragment, boolean, int) line: 778	
	NameLookup.findType(String, String, boolean, int, boolean, boolean, boolean, IProgressMonitor) line: 662	
	NameLookup.findType(String, String, boolean, int, boolean) line: 621	
	CancelableNameEnvironment(SearchableEnvironment).find(String, String) line: 101	
	CancelableNameEnvironment(SearchableEnvironment).findType(char[][]) line: 276	
	CancelableNameEnvironment.findType(char[][]) line: 50	
	LookupEnvironment.askForType(char[][]) line: 102	
	UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 49	
	BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 122	
	LookupEnvironment.getTypeFromTypeSignature(SignatureWrapper, TypeVariableBinding[], ReferenceBinding, char[][][]) line: 1188	
	BinaryTypeBinding.createFields(IBinaryField[], long, char[][][]) line: 371	
	BinaryTypeBinding.cachePartsFrom(IBinaryType, boolean) line: 328	
	LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 640	
	LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 619	
	CompilationUnitProblemFinder(Compiler).accept(IBinaryType, PackageBinding, AccessRestriction) line: 295	
	LookupEnvironment.askForType(PackageBinding, char[]) line: 133	
	PackageBinding.getTypeOrPackage(char[]) line: 183	
	CompilationUnitScope.findImport(char[][], int) line: 465	
	CompilationUnitScope.findSingleImport(char[][], int, boolean) line: 519	
	CompilationUnitScope.faultInImports() line: 368	
	CompilationUnitScope.faultInTypes() line: 444	
	CompilationUnitProblemFinder(Compiler).resolve(CompilationUnitDeclaration, ICompilationUnit, boolean, boolean, boolean) line: 876	
	CompilationUnitProblemFinder(Compiler).resolve(ICompilationUnit, boolean, boolean, boolean) line: 928	
	CompilationUnitProblemFinder.process(CompilationUnit, SourceElementParser, WorkingCopyOwner, HashMap, boolean, int, IProgressMonitor) line: 186	
	CompilationUnitProblemFinder.process(CompilationUnit, WorkingCopyOwner, HashMap, boolean, int, IProgressMonitor) line: 247	
	ReconcileWorkingCopyOperation.makeConsistent(CompilationUnit) line: 190	
	ReconcileWorkingCopyOperation.executeOperation() line: 89	
	ReconcileWorkingCopyOperation(JavaModelOperation).run(IProgressMonitor) line: 728	
	ReconcileWorkingCopyOperation(JavaModelOperation).runOperation(IProgressMonitor) line: 788	
	CompilationUnit.reconcile(int, int, WorkingCopyOwner, IProgressMonitor) line: 1244	
	JavaReconcilingStrategy.reconcile(ICompilationUnit, boolean) line: 126	
	JavaReconcilingStrategy.access$0(JavaReconcilingStrategy, ICompilationUnit, boolean) line: 108	
	JavaReconcilingStrategy$1.run() line: 89	
	SafeRunner.run(ISafeRunnable) line: 42	
	JavaReconcilingStrategy.reconcile(boolean) line: 87	
	JavaReconcilingStrategy.initialReconcile() line: 178	
	JavaCompositeReconcilingStrategy(CompositeReconcilingStrategy).initialReconcile() line: 114	
	JavaCompositeReconcilingStrategy.initialReconcile() line: 133	
	JavaReconciler(MonoReconciler).initialProcess() line: 105	
	JavaReconciler.initialProcess() line: 398	
	AbstractReconciler$BackgroundThread.run() line: 173</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1719156</commentid>
    <comment_count>24</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-22 14:27:50 -0400</bug_when>
    <thetext>Could you please provide the imports of that compilation unit ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1719309</commentid>
    <comment_count>25</comment_count>
    <who name="Kelly Campbell">kellyc</who>
    <bug_when>2010-04-22 16:11:59 -0400</bug_when>
    <thetext>(In reply to comment #24)
&gt; Could you please provide the imports of that compilation unit ?

The CompilationUnit is TestUtil.java from 
http://code.google.com/p/protobuf/source/browse/trunk/java/src/test/java/com/google/protobuf/TestUtil.java

NameLookup matchName=&quot;GeneratedMessage$GeneratedExtension&quot; (see http://code.google.com/p/protobuf/source/browse/trunk/java/src/main/java/com/google/protobuf/GeneratedMessage.java )

The problem results in an error marker on line 1 of the TestUtil.java editor and is not reported in the Problems view, nor does the file have a error decorator in the Package Explorer view:

&quot;The type com.google.protobuf.GeneratedMessage$ExtendableMessage cannot be resolved. It 
	 is indirectly referenced from required .class files&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1721706</commentid>
    <comment_count>26</comment_count>
    <who name="Beirti O&apos;Nunain">beirti.x.onunain</who>
    <bug_when>2010-04-26 17:23:20 -0400</bug_when>
    <thetext>Hi guys, great to see that you&apos;ve found something to kill this annoying bug. I wonder if this is related. The following steps left me having to delete and check out some of my plugins again as they refused to compile:

Using the same large workspace (~100 plugins)
- Added a new package to plugin &apos;a&apos;
- Added a new class &apos;MyNewClass&apos; to said package
- In plugin &apos;b&apos; (no previous dependency on &apos;a&apos;), open &apos;MyOldClass&apos; and declare &apos;MyNewClass&apos; as a field.
- Update plugin &apos;b&apos;s manifest to depend on &apos;a&apos;
- Update plugin &apos;a&apos;s manifest runtime to export new package

Fairly standard stuff. After some debugging, I stopped the debugger and reverted both plugins to previous (Subclipse SVN).

Following the revert, plugin &apos;a&apos;s manifest came up with the error &apos;Manifest has no main section&apos;. There are no quick fix options available.

All plugins which depend on &apos;a&apos; no longer compile. Only solution seems to be deleting &apos;a&apos; and all dependent plugins and checking out again from SVN.

Note: What I think may have contributed to the error is I reverted the plugins one by one, and killed the &apos;building workspace&apos; job inbetween reverts.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1721734</commentid>
    <comment_count>27</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-04-26 18:21:02 -0400</bug_when>
    <thetext>(In reply to comment #26)
&gt; All plugins which depend on &apos;a&apos; no longer compile. Only solution seems to be
&gt; deleting &apos;a&apos; and all dependent plugins and checking out again from SVN.
I would not be surprised that the problem in this case is related to the PDE container being messed up.
JDT Core relies on the PDE container being properly initialized in order to get the right classpath.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>164979</attachid>
            <date>2010-04-15 11:18:00 -0400</date>
            <delta_ts>2010-04-15 11:18:30 -0400</delta_ts>
            <desc>patch for the issue</desc>
            <filename>bug281848-cvs.patch</filename>
            <type>text/plain</type>
            <size>1327</size>
            <attacher name="Kelly Campbell">kellyc</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>351940</bug_id>
          
          <creation_ts>2011-07-13 06:16:00 -0400</creation_ts>
          <short_desc>ImportDeclaration.rename  throws CCE in CopyElementsOperation.getNestedOperation</short_desc>
          <delta_ts>2011-07-18 08:53:43 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>amj87.iitr</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1963965</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-07-13 06:16:15 -0400</bug_when>
    <thetext>3.7.

anImportDeclaration.rename(&quot;newName&quot;, false, null);

==&gt; 

java.lang.ClassCastException: org.eclipse.jdt.internal.core.ImportContainer cannot be cast to org.eclipse.jdt.core.ICompilationUnit
	at org.eclipse.jdt.internal.core.CopyElementsOperation.getNestedOperation(CopyElementsOperation.java:100)
	at org.eclipse.jdt.internal.core.CopyElementsOperation.processElement(CopyElementsOperation.java:161)
	at org.eclipse.jdt.internal.core.MultiOperation.processElements(MultiOperation.java:163)
	at org.eclipse.jdt.internal.core.MultiOperation.executeOperation(MultiOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2344)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:793)
	at org.eclipse.jdt.internal.core.JavaModel.rename(JavaModel.java:285)
	at org.eclipse.jdt.internal.core.SourceRefElement.rename(SourceRefElement.java:270)
	at org.eclipse.jdt.text.tests.contentassist.AbstractCompletionTest.assertProposal(AbstractCompletionTest.java:334)
	at org.eclipse.jdt.text.tests.contentassist.AbstractCompletionTest.assertMethodBodyProposal(AbstractCompletionTest.java:218)
	at org.eclipse.jdt.text.tests.contentassist.TypeCompletionTest.testInnerTypeOfGenericOuterImported(TypeCompletionTest.java:134)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.extensions.TestSetup.run(TestSetup.java:27)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2696)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2660)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2494)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:674)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:667)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1963966</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-07-13 06:19:06 -0400</bug_when>
    <thetext>Jay, please follow up. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1965876</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-07-18 04:34:07 -0400</bug_when>
    <thetext>Reproduced on HEAD. I will investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1965894</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-07-18 05:18:39 -0400</bug_when>
    <thetext>IImportDeclaration has IImportContainer as parent which in turn has ICompilationUnit as parent. The code here assumes that the import declaration has CU as its parent. Just making sure we get the CU before calling CreateImportOperation will fix it.

Dani, what UI use case triggers this? Refactoring doesn&apos;t seem to be affected. And this bug must have always been around.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1966029</commentid>
    <comment_count>4</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-07-18 08:53:43 -0400</bug_when>
    <thetext>&gt; Dani, what UI use case triggers this? Refactoring doesn&apos;t seem to be affected.
I think the UI is not broken as it doesn&apos;t allow to rename import declarations.

&gt; And this bug must have always been around.
I think so too.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>378787</bug_id>
          
          <creation_ts>2012-05-08 03:10:00 -0400</creation_ts>
          <short_desc>[model] [test] testMissingClasspath fails on test machine</short_desc>
          <delta_ts>2014-07-21 13:18:00 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Satyam Kandula">satyam.kandula</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>david_williams</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2104259</commentid>
    <comment_count>0</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-05-08 03:10:11 -0400</bug_when>
    <thetext>testMissingClasspath fails on all os&apos;s of hudson machines

Look at
http://download.eclipse.org/eclipse/downloads/drops4/S-4.2M7-201205031800/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_6.0.html.

The error message is 
##############
Unexpected markers. ----------- Expected ------------ Unable to read &apos;.classpath&apos; file of project &apos;P&apos; ------------ but was ------------ --------- Difference is ---------- expected:&lt;[Unable to read &apos;.classpath&apos; file of project &apos;P&apos;]&gt; but was:&lt;[]&gt;
junit.framework.ComparisonFailure: Unexpected markers.
----------- Expected ------------
Unable to read &apos;.classpath&apos; file of project &apos;P&apos;
------------ but was ------------

--------- Difference is ----------
expected:&lt;[Unable to read &apos;.classpath&apos; file of project &apos;P&apos;]&gt; but was:&lt;[]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:230)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:206)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertMarkers(AbstractJavaModelTests.java:718)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertMarkers(AbstractJavaModelTests.java:691)
at org.eclipse.jdt.core.tests.model.ClasspathTests.testMissingClasspath(ClasspathTests.java:4324)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:100)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:84)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:72)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:81)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:501)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:259)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
at org.eclipse.equinox.launcher.Main.main(Main.java:1414)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2104281</commentid>
    <comment_count>1</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-05-08 04:22:18 -0400</bug_when>
    <thetext>This runs fine on my workspace..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2104297</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-05-08 04:37:25 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; This runs fine on my workspace..

Passes for me too. Perhaps a red herring.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2104414</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-05-08 08:37:15 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; &gt; This runs fine on my workspace..
&gt; 
&gt; Passes for me too. Perhaps a red herring.

Fine in my workspace, consistently broken also in Object Teams build. If a herring then it is pink at best :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2105757</commentid>
    <comment_count>4</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-05-10 06:30:59 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; Fine in my workspace, consistently broken also in Object Teams build. If a
&gt; herring then it is pink at best :)
Where does the Object Teams tests run? Do you have an idea from when this could have started failing?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2106784</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-05-11 12:59:08 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Where does the Object Teams tests run?

build.eclipse.org

&gt; Do you have an idea from when this could have started failing?

Sorry, no, I forgot to record this, but most likely at the time when I adopted JDT/Core&apos;s changes from M6 to M7.

If you have an idea what information should be logged during tests I can happily try to pull out more info from the Object Teams build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2108668</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-05-16 04:02:16 -0400</bug_when>
    <thetext>I noticed a similar thing happen with the latest win-32 build (4.2). 

Steps to reproduce:
1. Create a java project
2. Close the project
3. Go to windows explorer and delete the .classpath from the project
4. Go back to Eclipse and open the project (with build automatically enabled)

There should be an error about the missing classpath but there isn&apos;t. I am suspicious about the code inside JavaProject#readFileEntriesWithException(). First the condition rscFile.exists() returns &quot;true&quot; but later the check file.exists() returns false. Investigating further.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2108671</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-05-16 04:07:11 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; There should be an error about the missing classpath but there isn&apos;t. I am
&gt; suspicious about the code inside JavaProject#readFileEntriesWithException().
&gt; First the condition rscFile.exists() returns &quot;true&quot; but later the check
&gt; file.exists() returns false. Investigating further.

Sorry, that&apos;s not what I really wanted to say. What I really meant to say was that we return an empty classpath when the classpath file doesn&apos;t exist. This results in an &apos;OK&apos; status being sent to ClasspathValidation.validate().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2112422</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-05-23 06:31:41 -0400</bug_when>
    <thetext>The test failure is still not reproducible locally and fails only in win-32 set-up during build. This doesn&apos;t appear to be affecting the build (despite my observations in comment #6, since I see that behavior with IDE even with older builds) 

While I am investigating further, I have disabled the tests temporarily.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2113483</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-05-24 07:33:53 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; The test failure is still not reproducible locally and fails only in win-32
&gt; set-up during build.

I also see it during build&amp;test on Linux.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2114844</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-05-28 01:47:59 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; I also see it during build&amp;test on Linux.

Stephan, are you seeing the failures on your machine or the build environment?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2115137</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-05-28 17:45:11 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; I also see it during build&amp;test on Linux.
&gt; 
&gt; Stephan, are you seeing the failures on your machine or the build environment?

build environment, headless build on build.eclipse.org, to be specific.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421318</commentid>
    <comment_count>12</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-27 04:20:50 -0400</bug_when>
    <thetext>Build ID: N20140626-2000
Platform: Linux

Test Location: http://download.eclipse.org/eclipse/downloads/drops4/N20140626-2000/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

Failed again.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421791</commentid>
    <comment_count>13</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-28 05:04:11 -0400</bug_when>
    <thetext>Location: http://download.eclipse.org/eclipse/downloads/drops4/N20140627-2000/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

Build ID: N20140627-2000
Platform: Linux

Failed again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421984</commentid>
    <comment_count>14</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-29 20:56:03 -0400</bug_when>
    <thetext>http://download.eclipse.org/eclipse/downloads/drops4/N20140628-1500/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

Build ID: N20140628-1500
Platform: Linux

Failed again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2422027</commentid>
    <comment_count>15</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-06-30 03:32:45 -0400</bug_when>
    <thetext>Was the test just newly re-enabled? Seems for fail consistently each N-build, on all platforms ... ever sense we restarted builds after Luna release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427332</commentid>
    <comment_count>16</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2014-07-14 04:15:26 -0400</bug_when>
    <thetext>*** Bug 438507 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429900</commentid>
    <comment_count>17</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-07-21 13:18:00 -0400</bug_when>
    <thetext>(From bug 438507 comment #5)
&gt; The test is a regression test for bug 39877, and the implementation looks
&gt; valid to me. It would be good to know why the test fails. It is green
&gt; locally, even when I add an explicit
&gt; 		preferences.setAutoBuilding(...);
&gt; with false or true.

The test has been disabled with bug 438507 comment 4 (on 2014-06-30).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>382907</bug_id>
          
          <creation_ts>2012-06-18 17:08:00 -0400</creation_ts>
          <short_desc>IMethodBinding.isSubsignature returns wrong results with generics</short_desc>
          <delta_ts>2012-09-27 05:59:04 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jacek Sieka">arnetheduck</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2125679</commentid>
    <comment_count>0</comment_count>
    <who name="Jacek Sieka">arnetheduck</who>
    <bug_when>2012-06-18 17:08:36 -0400</bug_when>
    <thetext>Build Identifier: Version: 3.7.2 Build id: M20120208-0800

I have the following two classes:

public class Implement {
	public interface I&lt;T&gt; {
		void m(T t);

		T m2();
	}

	public static class S&lt;T&gt; implements I&lt;T&gt; {
		@Override
		public void m(T t) {
		}

		@Override
		public T m2() {
			return null;
		}
	}
}


public class BaseCall {
	public interface I&lt;T&gt; extends Implement.I&lt;T&gt; {
		@Override
		void m(T t);

		@Override
		T m2();
	}

	public static class X&lt;T&gt; extends Implement.S&lt;T&gt; implements I&lt;T&gt; {
	}
}


If I parse them using ASTParser, then call isSubsignature on the method binding of BaseCall.I&lt;T&gt;.m(T t) with Implement.S&lt;T&gt;.m(T t) as parameter, false is returned.

If I remove all generics (remove all &lt;T&gt;), true is returned instead as expected (as the method Implements.S.m(T t) provides the implementation for BaseCall.I&lt;T&gt; as well)

Reproducible: Always

Steps to Reproduce:
1. Get IMethodBinding mb for BaseCall.I&lt;T&gt;.m(T t) (using getInterfaces()[x].getDeclaredMethods() on ITypeBinding for BaseCall.X&lt;T&gt;)

2. Get IMethodBinding sm for Implement.S&lt;T&gt;.m(T t) (using getSuperclass().getDeclaredMethods() on ITypeBinding for BaseCall.X&lt;T&gt;)

3. Call sm.isSubsignature(mb)

I expect 3. to return true, it returns false.

Removing all generics causes it to return true as expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2125737</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-19 00:29:50 -0400</bug_when>
    <thetext>(In reply to comment #0)

&gt; If I parse them using ASTParser, then call isSubsignature on the method binding
&gt; of BaseCall.I&lt;T&gt;.m(T t) with Implement.S&lt;T&gt;.m(T t) as parameter, false is
&gt; returned.

Could you please attach a snippet that shows the problem ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2149279</commentid>
    <comment_count>2</comment_count>
    <who name="Jacek Sieka">arnetheduck</who>
    <bug_when>2012-08-16 16:34:22 -0400</bug_when>
    <thetext>What should the snippet do? I&apos;ve provided an example class that shows the bad behaviour and you can verify it with the ASTView plugin. A snippet would have to set up the whole ASTParser bits which I assume you have unit tests for already..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164066</commentid>
    <comment_count>3</comment_count>
      <attachid>221454</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-09-25 04:07:25 -0400</bug_when>
    <thetext>Created attachment 221454
Test case

I have put the test case given in comment #0 in a junit test case, which fails currently.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164703</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-09-26 10:21:24 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; Steps to Reproduce:
&gt; 1. Get IMethodBinding mb for BaseCall.I&lt;T&gt;.m(T t) (using
&gt; getInterfaces()[x].getDeclaredMethods() on ITypeBinding for BaseCall.X&lt;T&gt;)
&gt; 
&gt; 2. Get IMethodBinding sm for Implement.S&lt;T&gt;.m(T t) (using
&gt; getSuperclass().getDeclaredMethods() on ITypeBinding for BaseCall.X&lt;T&gt;)
&gt; 
&gt; 3. Call sm.isSubsignature(mb)
&gt; 
&gt; I expect 3. to return true, it returns false.

I just noticed that you are invoking isSubsignature on the inherited method and not on the inheriting method. For the test case I attached earlier, if I change the assertion to mb.isSubsignature(sm), the test pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164942</commentid>
    <comment_count>5</comment_count>
    <who name="Jacek Sieka">arnetheduck</who>
    <bug_when>2012-09-26 16:30:02 -0400</bug_when>
    <thetext>(In reply to comment #4)

&gt; I just noticed that you are invoking isSubsignature on the inherited method
&gt; and not on the inheriting method. For the test case I attached earlier, if I
&gt; change the assertion to mb.isSubsignature(sm), the test pass.

My reading of 8.4.2 in JLS3 is that the notion of &quot;same arguments&quot; is symmetric, i e the order of comparison is not important, for non-erased types/methods (the first case in the definition of subsignature)..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165103</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-09-27 05:59:04 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; My reading of 8.4.2 in JLS3 is that the notion of &quot;same arguments&quot; is
&gt; symmetric, i e the order of comparison is not important, for non-erased
&gt; types/methods (the first case in the definition of subsignature)..

This is from the spec:
&quot;The signature of a method m1 is a subsignature of the signature of a method
m2 if either
◆ m2 has the same signature as m1, or
◆ the signature of m1 is the same as the erasure of the signature of m2.&quot;

But it goes on to say:
&quot;The notion of subsignature defined here is designed to express a relationship between two
methods whose signatures are not identical, but in which one may override the other.&quot;

Anyway, in JDT code, I do see some code deliberately trying to see if the &apos;other&apos; method is from the super class/interface. And this behavior has been around at least since 3.7.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>221454</attachid>
            <date>2012-09-25 04:07:00 -0400</date>
            <delta_ts>2012-09-25 04:07:25 -0400</delta_ts>
            <desc>Test case</desc>
            <filename>Testcase for bug-382907.patch</filename>
            <type>text/plain</type>
            <size>2216</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>422220</bug_id>
          
          <creation_ts>2013-11-21 03:56:00 -0500</creation_ts>
          <short_desc>VerifyTests that use Util#getFreePort() occasionally fail with &quot;Address already in use at java.net.PlainSocketImpl.socketBind&quot;</short_desc>
          <delta_ts>2015-08-19 01:12:32 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc>http://download.eclipse.org/eclipse/downloads/drops4/N20131120-2000/testresults/html/org.eclipse.jdt.core.tests.compiler_linux.gtk.x86_6.0.html</bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>david_williams</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2332740</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-11-21 03:56:12 -0500</bug_when>
    <thetext>BUILD ID: N20131120-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20131120-2000/testresults/html/org.eclipse.jdt.core.tests.compiler_linux.gtk.x86_6.0.html


Unexpected error running resulting class file for testFallThrough.java: --[START]-- Exception in thread &quot;main&quot; java.net.BindException: Address already in use at java.net.PlainSocketImpl.socketBind(Native Method) at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:376) at java.net.ServerSocket.bind(ServerSocket.java:376) at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:237) at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:128) at org.eclipse.jdt.core.tests.util.VerifyTests.run(VerifyTests.java:201) at org.eclipse.jdt.core.tests.util.VerifyTests.main(VerifyTests.java:198) ---[END]---

junit.framework.AssertionFailedError: Unexpected error running resulting class file for testFallThrough.java:
--[START]--
Exception in thread &quot;main&quot; java.net.BindException: Address already in use
at java.net.PlainSocketImpl.socketBind(Native Method)
at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:376)
at java.net.ServerSocket.bind(ServerSocket.java:376)
at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:237)
at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:128)
at org.eclipse.jdt.core.tests.util.VerifyTests.run(VerifyTests.java:201)
at org.eclipse.jdt.core.tests.util.VerifyTests.main(VerifyTests.java:198)
---[END]---

at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2344)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2120)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runConformTest(AbstractRegressionTest.java:1191)
at org.eclipse.jdt.core.tests.compiler.regression.SwitchTest.testFallThrough2(SwitchTest.java:1792)
at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:55)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2332957</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-11-21 09:46:13 -0500</bug_when>
    <thetext>See also bug 414653.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472962</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-28 11:35:12 -0400</bug_when>
    <thetext>*** Bug 442450 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472964</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-28 11:35:24 -0400</bug_when>
    <thetext>*** Bug 446261 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472973</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-28 11:54:20 -0400</bug_when>
    <thetext>This is a fundamental design problem in all tests that rely on org.eclipse.jdt.core.tests.util.Util#getFreePort(). That method returns a port number that *was* free when the call returned, but there&apos;s no guarantee that it stays free until you actually start another ServerSocket with that port.

A decent OS tries to avoid using the same temporary port number in quick succession, but that&apos;s not always easy to achieve and is not guaranteed.


There are two possible ways to fix this (neither is simple):

a) Change all socket servers to clients and all clients to servers. That way, you can open a new ServerSocket(0) and keep it open until the test is done.

b) Don&apos;t pass a server port number as command line argument, but generate it at the place where the ServerSocket is opened, and then somehow pass the chosen port back to the test. Either via System.out/err, or via another &quot;long-running&quot; socket that gets opened on the test vm and to which clients can connect. That way, you effectively pass open client port numbers (in both directions), but not temporary server port numbers.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472974</commentid>
    <comment_count>5</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-28 11:59:10 -0400</bug_when>
    <thetext>FYI: JUnit launch configurations have a similar problem, see bug 322266.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2572448</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-06-02 03:44:14 -0400</bug_when>
    <thetext>*** Bug 469074 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2573923</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2015-06-04 03:49:40 -0400</bug_when>
    <thetext>AnnotationTest.test190 failed with same problem (also Linux).

We should get rid of those random test failures. They cause distractions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2573935</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-06-04 04:17:52 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #7)
&gt; AnnotationTest.test190 failed with same problem (also Linux).
&gt; 
&gt; We should get rid of those random test failures. They cause distractions.

The problem is with the test infrastructure, which means this could theoretically happen with any test using it. We should try out the options Markus suggested during 4.6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2603787</commentid>
    <comment_count>9</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-08-18 23:56:42 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #8)
&gt; (In reply to Dani Megert from comment #7)
&gt; &gt; AnnotationTest.test190 failed with same problem (also Linux).
&gt; &gt; 
&gt; &gt; We should get rid of those random test failures. They cause distractions.
&gt; 
&gt; The problem is with the test infrastructure, which means this could
&gt; theoretically happen with any test using it. We should try out the options
&gt; Markus suggested during 4.6.

Jay: are we targeting this for 4.5.1?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2603807</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-08-19 01:12:32 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #9)
&gt; Jay: are we targeting this for 4.5.1?

Sorry, couldn&apos;t spend time on this. Moving out of 4.5.1 plan. Fortunately for us, failures haven&apos;t surfaced for a while now.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>428069</bug_id>
          
          <creation_ts>2014-02-13 03:34:00 -0500</creation_ts>
          <short_desc>DebugEvaluationTest.test012</short_desc>
          <delta_ts>2014-09-10 10:22:58 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>test</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2362708</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-13 03:34:58 -0500</bug_when>
    <thetext>N20140212-2000.

http://download.eclipse.org/eclipse/downloads/drops4/N20140212-2000/testresults/html/org.eclipse.jdt.core.tests.compiler_linux.gtk.x86_6.0.html

Value expected:&lt;true&gt; but was:&lt;false&gt;

junit.framework.AssertionFailedError: Value expected:&lt;true&gt; but was:&lt;false&gt;
at org.eclipse.jdt.core.tests.eval.EvaluationTest.failNotEquals(EvaluationTest.java:471)
at org.eclipse.jdt.core.tests.eval.EvaluationTest.assertEquals(EvaluationTest.java:156)
at org.eclipse.jdt.core.tests.eval.DebugEvaluationTest.test012(DebugEvaluationTest.java:581)
at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:55)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:133)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:103)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:374)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:228)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1462)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362884</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 09:05:29 -0500</bug_when>
    <thetext>S.t. non-deterministic going on here, I sometimes observe this when running the tests in the IDE, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2384573</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-04-04 04:35:46 -0400</bug_when>
    <thetext>DebugEvaluationTest.test048 (test048 - 1.5) failed in N20140403-2000:

N/A

org.eclipse.jdt.internal.eval.InstallException
at org.eclipse.jdt.internal.eval.EvaluationContext.evaluate(EvaluationContext.java:298)
at org.eclipse.jdt.core.tests.eval.DebugEvaluationTest.evaluate(DebugEvaluationTest.java:148)
at org.eclipse.jdt.core.tests.eval.DebugEvaluationTest.test048(DebugEvaluationTest.java:2048)
at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:55)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400099</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-05-12 04:35:09 -0400</bug_when>
    <thetext>This one failed again. This time on Windows:

test012 - 1.6

Value expected:&lt;true&gt; but was:&lt;false&gt;

junit.framework.AssertionFailedError: Value expected:&lt;true&gt; but was:&lt;false&gt;
at org.eclipse.jdt.core.tests.eval.EvaluationTest.failNotEquals(EvaluationTest.java:471)
at org.eclipse.jdt.core.tests.eval.EvaluationTest.assertEquals(EvaluationTest.java:156)
at org.eclipse.jdt.core.tests.eval.DebugEvaluationTest.test012(DebugEvaluationTest.java:584)
at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:55)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433487</commentid>
    <comment_count>4</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-30 05:43:17 -0400</bug_when>
    <thetext>Failed again.

N20140729-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20140729-2000/testresults/html/org.eclipse.jdt.core.tests.compiler_linux.gtk.x86_64_8.0.html

test012 - 1.3	


Failure	Value expected:&lt;true&gt; but was:&lt;false&gt; 

Call stack same as Comment 3.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437462</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-11 05:13:48 -0400</bug_when>
    <thetext>Failed Again.

Build ID: N20140810-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20140810-2000/testResults.php

test012 - 1.7

Value expected:&lt;true&gt; but was:&lt;false&gt;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438273</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-12 22:04:45 -0400</bug_when>
    <thetext>Failed again.
Build ID: I20140812-0800
test012 - 1.3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438515</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-13 10:00:50 -0400</bug_when>
    <thetext>The failure has occurred both on Linux (more than once) and Windows and across multiple JRE levels. Just looking at the order of tests run, I don&apos;t think it could be inter dependencies between tests (not sure, though).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438861</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-14 02:44:42 -0400</bug_when>
    <thetext>One theory is that the preceding assignment of variable &apos;date&apos; never takes effect or the second evaluation is kicked off even before the previous result has been stored. 

Interestingly, the next test in line test013, which is commented out, is identical to the one failing now - only difference being reassignment of an int variable being tested instead of java.util.Date.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438929</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-14 05:21:11 -0400</bug_when>
    <thetext>I have put some trouble shooting log here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=7bcf1741dcb918f3307ee7d52f0450e52fdd3029

However, if my theory (comment #8) is correct and the trouble shooting code introduces some delay, they tests may not fail. Anyway, let&apos;s wait and see what the results produce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444730</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-08-28 04:43:58 -0400</bug_when>
    <thetext>Failed again:

http://download.eclipse.org/eclipse/downloads/drops4/N20140827-2000/testresults/html/org.eclipse.jdt.core.tests.compiler_linux.gtk.x86_64_8.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444826</commentid>
    <comment_count>11</comment_count>
      <attachid>246481</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-28 07:20:01 -0400</bug_when>
    <thetext>Created attachment 246481
Proposed fix

I suspect the previous evaluation doesn&apos;t quite complete before the next one picks up the stale value in test012(). I can&apos;t reproduce this behavior, but...

In org.eclipse.jdt.core.eval.IEvaluationContext.evaluateCodeSnippet(), I see the following documentation:

* This method is long-running; progress and cancellation are provide
* by the given progress monitor.

Unfortunately the implementing EvaluationContext and EvaluationContextWrapper (and as a result our tests) don&apos;t make use of the progress monitor. I will release some more trouble shooting logs (in place of the ones I already put, which isn&apos;t quite useful) before confirming my thoughts and releasing this fix. But at the moment, I strongly believe this is a test only issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445903</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-01 02:21:34 -0400</bug_when>
    <thetext>I notice that this test --&gt; test012 has started hanging of late - particularly
when run as RunAll* - You can reproduce easily by launching RunAllJava8Tests.

Jay, could you just glance through the logging code added recently to make
sure that is causing the shift in symptoms ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445968</commentid>
    <comment_count>13</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-01 05:19:38 -0400</bug_when>
    <thetext>Failed again.
Build ID: N20140831-2000
Platform: Linux
test012 - 1.5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446192</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-02 01:57:59 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #13)
&gt; Failed again.
&gt; Build ID: N20140831-2000
&gt; Platform: Linux
&gt; test012 - 1.5

From the logs:

Old date =	Thu Oct 04 19:00:00 EST 1582
new date =	Mon Sep 01 03:57:54 EDT 2014
cal.getGregorianChange() =	Thu Oct 04 19:00:00 EST 1582
...
Old date =	Thu Oct 04 19:00:00 EST 1582
new date =	Thu Oct 04 19:00:00 EST 1582

The first set of print outs are from a passing instance and the second is from the failing tests. So, looks like the assignment of the date never took place or completed. This confirms my thoughts that it is indeed a timing issue.

After looking at the complaint from comment #12, I will release the fix for the test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446193</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-02 02:02:35 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)
&gt; I notice that this test --&gt; test012 has started hanging of late -
&gt; particularly
&gt; when run as RunAll* - You can reproduce easily by launching RunAllJava8Tests.
&gt; 
&gt; Jay, could you just glance through the logging code added recently to make
&gt; sure that is causing the shift in symptoms ? TIA.

I don&apos;t see the test hanging. Do you see the tests taking longer time or they actually hang? The changes to the tests only included some print statements to the snippet being evaluated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446203</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-02 02:32:11 -0400</bug_when>
    <thetext>I have seen my test runs being stuck at this test for 5 minutes or more. I didn&apos;t
verify if the test is really hanging - so I am using &quot;hang&quot; somewhat informally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446854</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-03 02:48:09 -0400</bug_when>
    <thetext>I have disabled this test as it consistently appears to hang when you run
RunAllJava8Tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446866</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-03 02:59:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #17)
&gt; I have disabled this test as it consistently appears to hang when you run
&gt; RunAllJava8Tests.

Srikanth, it will be good if you can find some time to see what&apos;s going on in your machine. Perhaps you can take the thread dump when it happens and share it so we can investigate? I don&apos;t see this in my environment and nor in the build environment. In the build environment, this particular test doesn&apos;t take more than a sec (regardless pass/fail). TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446869</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-03 03:03:58 -0400</bug_when>
    <thetext>I(In reply to Jayaprakash Arthanareeswaran from comment #18)
&gt; Srikanth, it will be good if you can find some time to see what&apos;s going on
&gt; in your machine. Perhaps you can take the thread dump when it happens and
&gt; share it so we can investigate? I don&apos;t see this in my environment and nor
&gt; in the build environment. In the build environment, this particular test
&gt; doesn&apos;t take more than a sec (regardless pass/fail). TIA!

I can see the hang issue sometimes while running RunAllJava8Tests.
I will investigate and let you know.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449800</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-10 10:22:58 -0400</bug_when>
    <thetext>This is what I observe:

While performing the write operation : 
185: out.write(classDefinition); // [1]
we get a NPE. There is no call stack. 

The unit test case does not proceed beyond the line:
EventSet set = this.jdiVM.eventQueue().remove(); // [2]

The scenario is not 100% reproducible. I observe this behavior while we run
RunAllJava8 tests.

---
[1] Stack Trace
Thread [main] (Suspended)	
	TargetInterface.sendClasses(boolean, ClassFile[]) line: 185	
	EvaluationTest$Requestor.acceptClassFiles(ClassFile[], char[]) line: 52	
	EvaluationContext.evaluate(char[], char[][], char[][], int[], char[], boolean, boolean, INameEnvironment, Map, IRequestor, IProblemFactory) line: 297	
	EvaluationContext.evaluate(char[], INameEnvironment, Map, IRequestor, IProblemFactory) line: 316	
	JDIStackFrame.getDebuggedThread(DebugEvaluationTest) line: 153	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String, String, String, int, long) line: 86	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String, String, String, int) line: 66	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String) line: 56	
	DebugEvaluationTest.test012() line: 569	

---

[2] Stack Trace
Thread [main] (Suspended)	
	JDIStackFrame.getDebuggedThread(DebugEvaluationTest) line: 180	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String, String, String, int, long) line: 86	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String, String, String, int) line: 66	
	JDIStackFrame.&lt;init&gt;(VirtualMachine, DebugEvaluationTest, String) line: 56	
	DebugEvaluationTest.test012() line: 569</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>246481</attachid>
            <date>2014-08-28 07:20:00 -0400</date>
            <delta_ts>2014-08-28 07:20:01 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Fixed-Bug-428069--DebugEvaluationTesttest012.patch</filename>
            <type>text/plain</type>
            <size>5588</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>428166</bug_id>
          
          <creation_ts>2014-02-14 03:25:00 -0500</creation_ts>
          <short_desc>[test][model]CopyMoveResourcesTests.testCopyCU05 failed</short_desc>
          <delta_ts>2015-01-01 08:20:14 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>test</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2363289</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-14 03:25:55 -0500</bug_when>
    <thetext>N20140213-2000.

http://download.eclipse.org/eclipse/downloads/drops4/N20140213-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_5.0.html


Destination container not changed

junit.framework.AssertionFailedError: Destination container not changed
at org.eclipse.jdt.core.tests.model.CopyMoveResourcesTests.copyPositive(CopyMoveResourcesTests.java:82)
at org.eclipse.jdt.core.tests.model.CopyMoveResourcesTests.testCopyCU05(CopyMoveResourcesTests.java:325)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:133)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:103)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:374)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:228)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1462)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428878</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2014-07-17 10:23:42 -0400</bug_when>
    <thetext>*** Bug 428321 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444621</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-27 23:44:43 -0400</bug_when>
    <thetext>testCopyCU04 failed.
Similar call stack.

Build ID: M20140827-1200</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466185</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-10-16 04:09:14 -0400</bug_when>
    <thetext>testCopyCU04 failed.
Similar call stack.

Build ID: N20141015-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466186</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-10-16 04:09:58 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; testCopyCU04 failed.
&gt; Similar call stack.
&gt; 
&gt; Build ID: N20141015-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20141015-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_64_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473759</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-29 19:13:48 -0400</bug_when>
    <thetext>testCopyImportStatic Failed.
Build ID: I20141028-2000
Test Location: http://download.eclipse.org/eclipse/downloads/drops4/I20141028-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Similar Call Stack.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489615</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-11-27 04:12:09 -0500</bug_when>
    <thetext>testCopyCU07 failed
Build Id N20141126-2000
platform Linux
http://download.eclipse.org/eclipse/downloads/drops4/N20141126-2000/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html
details: Added children not correct for element copy
stacktrace: junit.framework.AssertionFailedError: Added children not correct for element copy
	at org.eclipse.jdt.core.tests.model.CopyMoveResourcesTests.copyPositive(CopyMoveResourcesTests.java:96)
	at org.eclipse.jdt.core.tests.model.CopyMoveResourcesTests.testCopyCU07(CopyMoveResourcesTests.java:389)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
	at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
	at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
	at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501391</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-01 08:20:14 -0500</bug_when>
    <thetext>Failed: testCopyCU01
N20141229-2000.
Platform: Linux</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>430605</bug_id>
          
          <creation_ts>2014-03-18 08:37:00 -0400</creation_ts>
          <short_desc>[select] Current text selection cannot be opened in an editor</short_desc>
          <delta_ts>2016-03-18 10:44:12 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Aaron Digulla">digulla</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manju656</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2377070</commentid>
    <comment_count>0</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-18 08:37:48 -0400</bug_when>
    <thetext>I have this source code:

        if( InputFieldType.MULTIPLE_LINE_TEXT == getInputFieldType() ) {
            postProcessMultiLineText();
        }

        return options;
    }

    private void postProcessMultiLineText() {
        // TODO Auto-generated method stub
        
    }

When the cursor is on the first &quot;postProcessMultiLineText()&quot; and I press F3, Eclipse says &quot;Current text selection cannot be opened in an editor&quot; in the status bar.

Ctrl+Click doesn&apos;t work. Actually, both ways to navigate to the declaration doesn&apos;t work in most places in the file, not even for things like String.

The outline works and Ctrl+Shift+T also still works. It also still works in other Java editors in the same project. It&apos;s just a single editor that it affected.

So my guess is that some cache which Eclipse uses to do this navigation got corrupted in a way that neither

- Opening the class again
- Restarting Eclipse
- Cleaning the project
- Close&amp;Open the project

fixes this. I&apos;ve seen similar problems with the .markers file which can accumulate garbage in Xtext editors. The only way to get rid of it is to close the project, delete the marker file, open the project and force a rebuild.

To debug this further, I&apos;d like to know where in Eclipse&apos;s code I could set breakpoints to find out why it can&apos;t locate the types anymore.

Alternatively: Which per-editor files in .metadata should contain this navigation info? How can I force Eclipse to rebuild them?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2377373</commentid>
    <comment_count>1</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-03-18 22:22:36 -0400</bug_when>
    <thetext>Do you see an exception in the Error Log or .metadata or .log files?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2377446</commentid>
    <comment_count>2</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-19 04:30:33 -0400</bug_when>
    <thetext>Nothing that seems related. My guess is that Eclipse believes that the cache is still OK and doesn&apos;t need updating.

What still works is clicking on &quot;break&quot; and &quot;continue&quot;; that will get me to the related loop. But all Java type lookup is broken in this file. In another file in the same package of the project, everything works fine.

When I grep the .metadata folder for the class, I get these results:

/work/workspace/.metadata/.plugins/org.eclipse.jdt.ui/QualifiedTypeNameHistory.xml
/work/workspace/.metadata/.plugins/org.eclipse.jdt.ui/OpenTypeHistory.xml
/work/workspace/.metadata/.plugins/org.eclipse.debug.ui/launchConfigurationHistory.xml
/work/workspace/.metadata/.plugins/org.eclipse.e4.workbench/workbench.xmi
/work/workspace/.metadata/.plugins/org.eclipse.core.resources/.snap
/work/workspace/.metadata/.plugins/org.eclipse.core.resources/.root/61.tree
/work/workspace/.metadata/.plugins/org.eclipse.core.resources/.history/c5/50a66cb565ab00131995b80345616221
/work/workspace/.metadata/.plugins/org.eclipse.core.resources/.projects/blu-core/.markers
/work/workspace/.metadata/.plugins/org.eclipse.ltk.core.refactoring/.refactorings/blu-core/2014/3/12/refactorings.history
/work/workspace/.metadata/.plugins/org.eclipse.jdt.junit.core/history/20140318-161850.446.xml
/work/workspace/.metadata/.plugins/org.eclipse.jdt.core/1307505951.index
/work/workspace/.metadata/.plugins/org.eclipse.jdt.core/3735228071.index

Which of these is used for &quot;Open Declaration&quot;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2377641</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-19 12:48:34 -0400</bug_when>
    <thetext>If it still doesn&apos;t work after all the steps you listed, then I don&apos;t think a cache is the problem. It sounds like the compiler has a serious problem with building an AST for this file and doesn&apos;t even get to the stage where it tries to resolve a type.

Could you try to remove parts of the affected file and maybe even come up with a self-contained snippet to reproduce the problem?

F3 and Ctrl+Click use org.eclipse.jdt.internal.core.CompilationUnit#codeSelect(..) to compute the target.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2378469</commentid>
    <comment_count>4</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-21 08:57:36 -0400</bug_when>
    <thetext>Thanks. I&apos;ll try to run Eclipse in the debugger to see what happens.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2379769</commentid>
    <comment_count>5</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-25 08:33:51 -0400</bug_when>
    <thetext>Okay, I think I found the problem:

When I step through the code, I get this exception in org.eclipse.jdt.internal.codeassist.SelectionEngine.select(ICompilationUnit, int, int):

org.eclipse.jdt.internal.compiler.problem.AbortCompilation: Pb(324) The type com.pany.X$Y cannot be resolved. It is indirectly referenced from required .class files
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:135)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:201)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(ProblemReporter.java:2176)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.isClassPathCorrect(ProblemReporter.java:4211)

There is nothing in the error log because the exception is swallowed (line 973 in org.eclipse.jdt.internal.codeassist.SelectionEngine.select(ICompilationUnit, int, int):

		} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object
			if(DEBUG) {
				System.out.println(&quot;Exception caught by SelectionEngine:&quot;); //$NON-NLS-1$
				e.printStackTrace(System.out);
			}
		}

:-(

Interestingly, the CompilationResult further up in the code says:

Filename : /.../com/pany/Foo.java
COMPILED type(s)	
No PROBLEM

So I tried to find out where the error comes from which led me to a third type Bar. What I see in the code is this pattern:

I have Foo.java and I try to look up anything in there. One of the imports in Foo.java is Bar. That import comes from a JAR which is on the classpath. Bar, in turn imports X$Y from X.java.

So Foo.java comes from project A which is open. Project B contains X.java and is open as well. The lookup is project A -&gt; JAR -&gt; project B and something in that chain fails.

This is the call stack when this happens:

SelectionEngine$3(ProblemHandler).handle(int, String[], int, String[], int, int, int, ReferenceContext, CompilationResult) line: 135	
SelectionEngine$3(ProblemHandler).handle(int, String[], String[], int, int, ReferenceContext, CompilationResult) line: 201	
SelectionEngine$3(ProblemReporter).handle(int, String[], String[], int, int) line: 2176	
SelectionEngine$3(ProblemReporter).isClassPathCorrect(char[][], CompilationUnitDeclaration, Object) line: 4211	
UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 59	
BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 133	
LookupEnvironment.getTypeFromTypeSignature(SignatureWrapper, TypeVariableBinding[], ReferenceBinding, char[][][]) line: 1359	
BinaryTypeBinding.createFields(IBinaryField[], long, char[][][]) line: 419	
BinaryTypeBinding.cachePartsFrom(IBinaryType, boolean) line: 376	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 700	

Just for fun, I added this import at the top of Foo.java:

import com.pany.X.Y;

When I press F3 on the this import, it works! Also, I don&apos;t get compile errors, so the file is definitely there.

My guess is that the problem is the transit from Bar.class to X.java on the classpath: Eclipse can compile this but when looking for a type in a JAR, it can&apos;t find them in open projects on the classpath. Is that possible?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2379779</commentid>
    <comment_count>6</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-25 08:50:07 -0400</bug_when>
    <thetext>I tried to create a simplified test case for my situation but CompilationUnit#codeSelect() works in that case.

Any pointers how I can debug why Eclipse returns org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding for X$Y?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2381647</commentid>
    <comment_count>7</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-03-28 09:00:26 -0400</bug_when>
    <thetext>Two more comments:

1. Replacing the JAR with the actual project on the classpath solves the issue.

2. I&apos;m using Maven and it&apos;s org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER. Maybe this has an influence?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2381667</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-28 09:23:48 -0400</bug_when>
    <thetext>Maybe a dup of bug 73957 (see bug 73957 comment 50 for a summary).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2383938</commentid>
    <comment_count>9</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-04-03 04:11:39 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #8)
&gt; Maybe a dup of bug 73957 (see bug 73957 comment 50 for a summary).

Maybe the two are related but this isn&apos;t a dup.

First of all, I have just one huge Maven project in the workspace, so all projects use the same dependencies (and hence the same JARs).

In my case, the missing class is in a util JAR that is included in every module, so JDT should be able to see it, no matter over which path it&apos;s searched and every module uses the same version, so in the end, all dependencies point to the same place.

Is there a way to see the classpath that Eclispe tries to access the &quot;missing&quot; class?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2384178</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-03 10:42:54 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #8)
&gt; Maybe a dup of bug 73957 (see bug 73957 comment 50 for a summary).

I think the difference is that PDE avoids putting transitive dependencies on the classpath (unless re-exported) whereas m2e (to the best of my knowledge) puts everything on one flat classpath, transitively.

So with m2e we should be able to see everything.

(In reply to Aaron Digulla from comment #6)
&gt; I tried to create a simplified test case for my situation but
&gt; CompilationUnit#codeSelect() works in that case.

Thanks for trying. I assume you did not include m2e and its classpath container in that test, right?

So, if you are able to debug the bug, you might want to chase down the LookupEnvironment (I see it in one of your stack traces, also BinaryTypeBinding stores it in a field), and drill into its nameEnvironment. Inside you should find the equivalent of the resolved classpath currently in use.

HTH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409154</commentid>
    <comment_count>11</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2014-05-28 10:41:50 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)

&gt; (In reply to Aaron Digulla from comment #6)
&gt; &gt; I tried to create a simplified test case for my situation but
&gt; &gt; CompilationUnit#codeSelect() works in that case.
&gt; 
&gt; Thanks for trying. I assume you did not include m2e and its classpath
&gt; container in that test, right?

I did. There must be something else. Unfortunately, I&apos;ve been too busy to spend time on this in the last weeks. I hope to visit this again in three weeks :-P</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2510691</commentid>
    <comment_count>12</comment_count>
      <attachid>250256</attachid>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2015-01-27 07:23:27 -0500</bug_when>
    <thetext>Created attachment 250256
Stack trace of &quot;rename method&quot;

The attachment bug-430605-eclipse-refactoring-error.txt might be related to this bug. I was trying to rename a method in a module of the project but the error was thrown and Eclipse did roll back all changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2515603</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-08 12:41:30 -0500</bug_when>
    <thetext>(In reply to Aaron Digulla from comment #12)
&gt; Created attachment 250256 [details]
&gt; Stack trace of &quot;rename method&quot;
&gt; 
&gt; The attachment bug-430605-eclipse-refactoring-error.txt might be related to
&gt; this bug. I was trying to rename a method in a module of the project but the
&gt; error was thrown and Eclipse did roll back all changes.

What connection do you see?

For better searchability, here&apos;s the top frame from attachment 250256:
java.lang.NullPointerException
        at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:386)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2576487</commentid>
    <comment_count>14</comment_count>
      <attachid>254292</attachid>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2015-06-10 09:22:13 -0400</bug_when>
    <thetext>Created attachment 254292
Project which demonstrates the behavior</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2576488</commentid>
    <comment_count>15</comment_count>
      <attachid>254293</attachid>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2015-06-10 09:23:53 -0400</bug_when>
    <thetext>Created attachment 254293
Open and closed projects</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2576496</commentid>
    <comment_count>16</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2015-06-10 09:40:55 -0400</bug_when>
    <thetext>I&apos;ve spent four more hours in the Eclipse debugger today and I was finally able to determine and locate the bug.

This happens if you have three projects:

- main-module
- jar-module
- util-module

main-module contains a class which references a type from jar-module.

The class in jar-module references an inner parameterized type from util-module.

In a nutwhell:

---------- main-module: Foo.jar ----------------
import Bar
---------- main-module: Foo.jar ----------------

---------- jar-module: Bar.java ----------------
import org.eclipse.bugs.bug430605.util.X;

public class Bar {
        public final static X.EqualsTool&lt;Bar&gt; BUG = new X.EqualsTool&lt;Bar&gt;( Bar.class );
}
---------- jar-module: Bar.java ----------------

---------- util-module: X.java -----------------
public class X {
        /** We need a parameterized inner type here */
    public static class EqualsTool&lt;T&gt; {
        public EqualsTool( Class&lt;T&gt; type ) {}
    }
---------- util-module: X.java -----------------

This works when project jar-module is open.

When the project is closed and you open Foo.java, then Eclipse is suddenly unable to resolve the type X$EqualsTool while parsing Bar.class

My guess is that it needs the type &quot;Bar&quot; to be able to fill the type parameter for &quot;EqualsTool&lt;T&gt;&quot; but it doesn&apos;t yet know about this type because it&apos;s in the middle of parsing &quot;Bar&quot;.

Setup of the workspace

- Clean Eclipse (Kepler SR2)
- Install the Maven plugin m2e (I&apos;m using 1.4.1)
- Groovy plugin (2.9.1)
- Import the project (see attachment above)
- Import all the modules of the project
- Compile once with &quot;mvn install&quot;
- Close the module &quot;jar-module&quot; (as in the attached image)
- Clean all projects
- Open the type &quot;Foo&quot;
- F3 on &quot;String&quot; or &quot;Bar&quot; -&gt; error in the status bar

Ctrl+Click simply doesn&apos;t work (you don&apos;t get any underlines for anything in the file except fields)

It starts to work when &quot;EqualsTool&quot; isn&apos;t an inner type or when it&apos;s not parameterized.


Notes:

The tests were done with Kepler SR2 (Build id: 20140224-0627)
I have the plugins org.eclipse.m2e (1.4.1) and the Groovy plugin (2.9.1) installed. The Groovy plugin has added some patches to the compiler. As far as I can tell, the patches should have no effect on this bug but I don&apos;t have a clean install of Eclipse ATM.

The sources for the Groovy plugin can be found at https://github.com/groovy/groovy-eclipse/tree/master/jdt-patch/e43/org.eclipse.jdt.core

I zipped the sources in batch/*, compiler/*, codeassisst/* and formatter/* to be able to debug.

I was here during debugging when I noticed why Eclipse fails:

Thread [ModalContext] (Suspended)	
	UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 52	
	BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 138	
	LookupEnvironment.getTypeFromTypeSignature(SignatureWrapper, TypeVariableBinding[], ReferenceBinding, char[][][]) line: 1369	
	BinaryTypeBinding.createFields(IBinaryField[], long, char[][][]) line: 424	
	BinaryTypeBinding.cachePartsFrom(IBinaryType, boolean) line: 381	
	LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 710	
	LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 686	
	SelectionEngine(Engine).accept(IBinaryType, PackageBinding, AccessRestriction) line: 60	
	LookupEnvironment.askForType(PackageBinding, char[]) line: 151	
	PackageBinding.getTypeOrPackage(char[]) line: 197	
	CompilationUnitScope.findImport(char[][], int) line: 563	
	CompilationUnitScope.findSingleImport(char[][], int, boolean) line: 631	
	CompilationUnitScope.faultInImports() line: 482	
	CompilationUnitScope.faultInTypes() line: 536	
	SelectionEngine.select(ICompilationUnit, int, int) line: 924	
	CompilationUnit(Openable).codeSelect(ICompilationUnit, int, int, WorkingCopyOwner) line: 162	
	CompilationUnit.codeSelect(int, int, WorkingCopyOwner) line: 379	
	CompilationUnit.codeSelect(int, int) line: 373	
	SelectionConverter.codeResolve(IJavaElement, ITextSelection) line: 273	
	SelectionConverter$1CodeResolveRunnable.run(IProgressMonitor) line: 257	
	ModalContext$ModalContextThread.run() line: 121	

NameEnvironmentAnswer:
accessRestriction = null	
binaryType = null
compilationUnit	= null
sourceTypes = [1]
[Info for class EqualsTool [in X [in X.java [in org.eclipse.bugs.bug430605.util [in src/main/java [in util-module]]]]]
  Class&lt;T&gt; type
  EqualsTool(Class&lt;T&gt;)
  boolean isEquals(Object, Object)
  boolean doEquals(T, T)]

util is closed

org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer
typeName = X$EqualsTool
packageName = ...correct...

org.eclipse.jdt.internal.core.NameLookup.findType(String, String, boolean, int, boolean, boolean, boolean, IProgressMonitor)
typeName = X$EqualsTool
packageName = ...correct...
partialMatch	false	
acceptFlags	30	
considerSecondaryTypes	true	
waitForIndexes	false	
checkRestrictions	true	
monitor	null</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2577516</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-06-12 05:19:25 -0400</bug_when>
    <thetext>I can reproduce even on latest Mars. Thanks for the detailed steps. I will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2597527</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-08-03 01:53:09 -0400</bug_when>
    <thetext>Sorry, couldn&apos;t get to this in time. Will look at it during M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2615371</commentid>
    <comment_count>19</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-09-15 23:10:20 -0400</bug_when>
    <thetext>Moving out of M2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632979</commentid>
    <comment_count>20</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-10-28 10:12:09 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #19)
&gt; Moving out of M2

Out of M3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632985</commentid>
    <comment_count>21</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-10-28 10:25:05 -0400</bug_when>
    <thetext>Assigning to Jay per comment 18 and also to have an owner. Jay: please feel free to reassign.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>250256</attachid>
            <date>2015-01-27 07:23:00 -0500</date>
            <delta_ts>2015-01-27 07:23:27 -0500</delta_ts>
            <desc>Stack trace of &quot;rename method&quot;</desc>
            <filename>bug-430605-eclipse-refactoring-error.txt</filename>
            <type>text/plain</type>
            <size>9374</size>
            <attacher name="Aaron Digulla">digulla</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>254292</attachid>
            <date>2015-06-10 09:22:00 -0400</date>
            <delta_ts>2015-06-10 09:22:13 -0400</delta_ts>
            <desc>Project which demonstrates the behavior</desc>
            <filename>bug-430605.tar.gz</filename>
            <type>application/gzip</type>
            <size>2830</size>
            <attacher name="Aaron Digulla">digulla</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>254293</attachid>
            <date>2015-06-10 09:23:00 -0400</date>
            <delta_ts>2015-06-10 09:23:53 -0400</delta_ts>
            <desc>Open and closed projects</desc>
            <filename>bug-430605-workspace-setup.png</filename>
            <type>image/png</type>
            <size>53459</size>
            <attacher name="Aaron Digulla">digulla</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>431687</bug_id>
          
          <creation_ts>2014-04-01 03:52:00 -0400</creation_ts>
          <short_desc>[test][model]JavaProjectTests.lastlyTestDeletePackageWithAutobuild failed</short_desc>
          <delta_ts>2015-05-25 04:11:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>sasikanth.bharadwaj</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2382840</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-04-01 03:52:36 -0400</bug_when>
    <thetext>N20140331-2000.

Unexpected delta. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} ------------ but was ------------ JavaProjectLibTests[*]: {CLOSED}\n JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectLibTests)\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} --------- Difference is ---------- expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[LibTests[*]: {CLOSED}\n JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectLibTests)\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProject]Tests[*]: {CHILDREN}...&gt;

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
------------ but was ------------
JavaProjectLibTests[*]: {CLOSED}\n
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectLibTests)\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
--------- Difference is ----------
expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[LibTests[*]: {CLOSED}\n
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectLibTests)\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProject]Tests[*]: {CHILDREN}...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.lastlyTestDeletePackageWithAutobuild(JavaProjectTests.java:732)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409603</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-29 01:01:13 -0400</bug_when>
    <thetext>Failed.

Results: http://download.eclipse.org/eclipse/downloads/drops4/I20140528-0930
/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

ID: I20140528-0930
Platform: Linux

----

Unexpected delta. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} ------------ but was ------------ JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} --------- Difference is ---------- expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[SrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProject]Tests[*]: {CHILDREN}...&gt;

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
------------ but was ------------
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
--------- Difference is ----------
expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[SrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProject]Tests[*]: {CHILDREN}...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.lastlyTestDeletePackageWithAutobuild(JavaProjectTests.java:733)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409656</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-29 04:43:29 -0400</bug_when>
    <thetext>lastlyTestDeletePackageWithAutobuild

http://download.eclipse.org/eclipse/downloads/drops4/I20140528-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Build ID: I20140528-2000



Unexpected delta. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} ------------ but was ------------ JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} --------- Difference is ---------- expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[SrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProject]Tests[*]: {CHILDREN}...&gt;

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
------------ but was ------------
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProjectTests[*]: {CHILDREN}\n
&lt;project root&gt;[*]: {CHILDREN}\n
x.y[-]: {}
--------- Difference is ----------
expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[SrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProject]Tests[*]: {CHILDREN}...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.lastlyTestDeletePackageWithAutobuild(JavaProjectTests.java:733)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409662</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-29 05:04:34 -0400</bug_when>
    <thetext>Cannot be reproduced locally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477675</commentid>
    <comment_count>4</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-11-06 03:37:11 -0500</bug_when>
    <thetext>Failed again:
http://download.eclipse.org/eclipse/downloads/drops4/N20141105-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_64_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477680</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-11-06 03:42:00 -0500</bug_when>
    <thetext>*** Bug 450226 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493045</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-12-05 03:24:07 -0500</bug_when>
    <thetext>Failed again
N20141204-2000 platform - mac

Same stack trace
http://download.eclipse.org/eclipse/downloads/drops4/N20141204-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_64_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2567573</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-05-25 04:11:51 -0400</bug_when>
    <thetext>Failed 

http://download.eclipse.org/eclipse/downloads/drops4/I20150524-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

build I20150524-2000

platform: win32

details: Unexpected delta. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} ------------ but was ------------ JavaProjectLibTests[*]: {CLOSED}\n JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectLibTests)\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProjectTests[*]: {CHILDREN}\n &lt;project root&gt;[*]: {CHILDREN}\n x.y[-]: {} --------- Difference is ---------- expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[LibTests[*]: {CLOSED}\n JavaProjectSrcTests[*]: {CLOSED}\n ResourceDelta(/JavaProjectLibTests)\n ResourceDelta(/JavaProjectSrcTests)\n \n JavaProject]Tests[*]: {CHILDREN}...&gt;

stacktrace: junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		x.y[-]: {}
------------ but was ------------
JavaProjectLibTests[*]: {CLOSED}\n
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectLibTests)\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProjectTests[*]: {CHILDREN}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		x.y[-]: {}
--------- Difference is ----------
 expected:&lt;JavaProject[]Tests[*]: {CHILDREN}...&gt; but was:&lt;JavaProject[LibTests[*]: {CLOSED}\n
JavaProjectSrcTests[*]: {CLOSED}\n
ResourceDelta(/JavaProjectLibTests)\n
ResourceDelta(/JavaProjectSrcTests)\n
\n
JavaProject]Tests[*]: {CHILDREN}...&gt;
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1027)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1017)
	at org.eclipse.jdt.core.tests.model.JavaProjectTests.lastlyTestDeletePackageWithAutobuild(JavaProjectTests.java:739)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:105)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:89)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite$1.protect(SuiteOfTestCases.java:77)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:86)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
	at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
	at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
	at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>435761</bug_id>
          
          <creation_ts>2014-05-26 06:20:00 -0400</creation_ts>
          <short_desc>[test][model]RootManipulationsTests.testCopySourceFolder3 failed</short_desc>
          <delta_ts>2014-07-17 07:12:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2407001</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-05-26 06:20:13 -0400</bug_when>
    <thetext>I20140523-2000.

http://download.eclipse.org/eclipse/downloads/drops4/I20140523-2000/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

Unexpected delta. ----------- Expected ------------ P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n src1[+]: {}\n ResourceDelta(/P2/.classpath)[*] ------------ but was ------------ P1[*]: {CHILDREN}\n src1/src2[+]: {}\n \n P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n src1[+]: {}\n ResourceDelta(/P2/.classpath)[*] --------- Difference is ---------- expected:&lt;P[]2[*]: {CHILDREN | CO...&gt; but was:&lt;P[1[*]: {CHILDREN}\n src1/src2[+]: {}\n \n P]2[*]: {CHILDREN | CO...&gt;

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
src1[+]: {}\n
ResourceDelta(/P2/.classpath)[*]
------------ but was ------------
P1[*]: {CHILDREN}\n
src1/src2[+]: {}\n
\n
P2[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
src1[+]: {}\n
ResourceDelta(/P2/.classpath)[*]
--------- Difference is ----------
expected:&lt;P[]2[*]: {CHILDREN | CO...&gt; but was:&lt;P[1[*]: {CHILDREN}\n
src1/src2[+]: {}\n
\n
P]2[*]: {CHILDREN | CO...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.RootManipulationsTests.testCopySourceFolder3(RootManipulationsTests.java:224)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>435762</bug_id>
          
          <creation_ts>2014-05-26 06:21:00 -0400</creation_ts>
          <short_desc>[test][model] JavaProjectTests.testChangeOutputLocation failed</short_desc>
          <delta_ts>2015-04-01 01:35:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2407002</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-05-26 06:21:41 -0400</bug_when>
    <thetext>I20140523-2000.

http://download.eclipse.org/eclipse/downloads/drops4/I20140523-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Unexpected delta 1. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] ------------ but was ------------ P[-]: {}\n \n JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] --------- Difference is ---------- expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n \n ]JavaProjectTests[*]:...&gt;

junit.framework.ComparisonFailure: Unexpected delta 1.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
------------ but was ------------
P[-]: {}\n
\n
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
--------- Difference is ----------
expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n
\n
]JavaProjectTests[*]:...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.testChangeOutputLocation(JavaProjectTests.java:663)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:379)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:233)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410877</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-31 23:29:17 -0400</bug_when>
    <thetext>Build ID: I20140531-1500

http://download.eclipse.org/eclipse/downloads/drops4/I20140531-1500/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html


----

Unexpected delta 1. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] ------------ but was ------------ P[-]: {}\n \n JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] --------- Difference is ---------- expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n \n ]JavaProjectTests[*]:...&gt;

junit.framework.ComparisonFailure: Unexpected delta 1.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
------------ but was ------------
P[-]: {}\n
\n
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
--------- Difference is ----------
expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n
\n
]JavaProjectTests[*]:...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.testChangeOutputLocation(JavaProjectTests.java:663)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413314</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-05 04:44:19 -0400</bug_when>
    <thetext>I20140604-2000

http://download.eclipse.org/eclipse/downloads/drops4/I20140604-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html


---
Unexpected delta 1. ----------- Expected ------------ JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] ------------ but was ------------ P[-]: {}\n \n JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n &lt;project root&gt;[*]: {CHILDREN}\n bin[+]: {}\n ResourceDelta(/JavaProjectTests/.classpath)[*] --------- Difference is ---------- expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n \n ]JavaProjectTests[*]:...&gt;

junit.framework.ComparisonFailure: Unexpected delta 1.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
------------ but was ------------
P[-]: {}\n
\n
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
&lt;project root&gt;[*]: {CHILDREN}\n
bin[+]: {}\n
ResourceDelta(/JavaProjectTests/.classpath)[*]
--------- Difference is ----------
expected:&lt;[]JavaProjectTests[*]:...&gt; but was:&lt;[P[-]: {}\n
\n
]JavaProjectTests[*]:...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.testChangeOutputLocation(JavaProjectTests.java:663)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)

---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413315</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-05 04:45:38 -0400</bug_when>
    <thetext>Test case does not fail locally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413922</commentid>
    <comment_count>4</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-06 02:54:12 -0400</bug_when>
    <thetext>Build ID: I20140605-1635.

Failed Again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2423228</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-01 23:40:34 -0400</bug_when>
    <thetext>Failed Again. 
Build ID: I20140701-0800

Test Location: http://download.eclipse.org/eclipse/downloads/drops4/I20140701-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501390</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-01 08:16:50 -0500</bug_when>
    <thetext>Failed.
Build ID: N20141231-2000
Platform: win</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533421</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-03-18 04:39:06 -0400</bug_when>
    <thetext>Failed again
buildId	4.5.0-I20150317-2000
platform: win32

Same stacktrace</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2540477</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-04-01 01:33:09 -0400</bug_when>
    <thetext>Failed again
platform: win32
buildId: I20150331-0800

stacktrace: junit.framework.ComparisonFailure: Unexpected delta 2.
----------- Expected ------------
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		bin[-]: {}\n
	ResourceDelta(/JavaProjectTests/.classpath)[*]
------------ but was ------------
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		bin[+]: {}\n
	ResourceDelta(/JavaProjectTests/.classpath)[*]\n
\n
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		bin[-]: {}\n
	ResourceDelta(/JavaProjectTests/.classpath)[*]
--------- Difference is ----------
 expected:&lt;... {CHILDREN}\n
		bin[[]-]: {}\n
	ResourceDe...&gt; but was:&lt;... {CHILDREN}\n
		bin[[+]: {}\n
	ResourceDelta(/JavaProjectTests/.classpath)[*]\n
\n
JavaProjectTests[*]: {CHILDREN | CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
	&lt;project root&gt;[*]: {CHILDREN}\n
		bin[]-]: {}\n
	ResourceDe...&gt;
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1027)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1017)
	at org.eclipse.jdt.core.tests.model.JavaProjectTests.testChangeOutputLocation(JavaProjectTests.java:676)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:105)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:89)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite$1.protect(SuiteOfTestCases.java:77)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:86)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
	at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
	at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
	at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2540478</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-01 01:35:27 -0400</bug_when>
    <thetext>Interesting to note that the failure is not exactly same every time.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>436278</bug_id>
          
          <creation_ts>2014-05-31 06:59:00 -0400</creation_ts>
          <short_desc>[test][model]RootGetPackageFragments2 Failed</short_desc>
          <delta_ts>2014-11-25 03:17:15 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc>http://download.eclipse.org/eclipse/downloads/drops4/I20140530-2000/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html</bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2410772</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-31 06:59:57 -0400</bug_when>
    <thetext>Build ID: I20140530-2000


Unexpected packages. ----------- Expected ------------ &lt;default&gt; [in &lt;project root&gt; [in P]] ------------ but was ------------ &lt;default&gt; [in &lt;project root&gt; [in P]]\n bin [in &lt;project root&gt; [in P]]\n bin2 [in &lt;project root&gt; [in P]] --------- Difference is ---------- expected:&lt;...roject root&gt; [in P]][]&gt; but was:&lt;...roject root&gt; [in P]][\n bin [in &lt;project root&gt; [in P]]\n bin2 [in &lt;project root&gt; [in P]]]&gt;

junit.framework.ComparisonFailure: Unexpected packages.
----------- Expected ------------
&lt;default&gt; [in &lt;project root&gt; [in P]]
------------ but was ------------
&lt;default&gt; [in &lt;project root&gt; [in P]]\n
bin [in &lt;project root&gt; [in P]]\n
bin2 [in &lt;project root&gt; [in P]]
--------- Difference is ----------
expected:&lt;...roject root&gt; [in P]][]&gt; but was:&lt;...roject root&gt; [in P]][\n
bin [in &lt;project root&gt; [in P]]\n
bin2 [in &lt;project root&gt; [in P]]]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:250)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:226)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertElementsEqual(AbstractJavaModelTests.java:677)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertElementsEqual(AbstractJavaModelTests.java:655)
at org.eclipse.jdt.core.tests.model.JavaProjectTests.testRootGetPackageFragments2(JavaProjectTests.java:2205)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410773</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-31 07:04:55 -0400</bug_when>
    <thetext>Did not fail locally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429584</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-21 00:00:22 -0400</bug_when>
    <thetext>testRootGetPackageFragments2 Failed again.

Build ID: N20140719-1500
Platform: Linux.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2488605</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-11-25 03:17:15 -0500</bug_when>
    <thetext>Failed again

Build id N20141124-2000
platform: mac

details: Unexpected packages. ----------- Expected ------------ &lt;default&gt; [in &lt;project root&gt; [in P]] ------------ but was ------------ &lt;default&gt; [in &lt;project root&gt; [in P]]\n bin [in &lt;project root&gt; [in P]] --------- Difference is ---------- expected:&lt;...roject root&gt; [in P]][]&gt; but was:&lt;...roject root&gt; [in P]][\n bin [in &lt;project root&gt; [in P]]]&gt;

stacktrace: junit.framework.ComparisonFailure: Unexpected packages.
----------- Expected ------------
&lt;default&gt; [in &lt;project root&gt; [in P]]
------------ but was ------------
&lt;default&gt; [in &lt;project root&gt; [in P]]\n
bin [in &lt;project root&gt; [in P]]
--------- Difference is ----------
 expected:&lt;...roject root&gt; [in P]][]&gt; but was:&lt;...roject root&gt; [in P]][\n
bin [in &lt;project root&gt; [in P]]]&gt;
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:258)
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:234)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertElementsEqual(AbstractJavaModelTests.java:677)
	at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertElementsEqual(AbstractJavaModelTests.java:655)
	at org.eclipse.jdt.core.tests.model.JavaProjectTests.testRootGetPackageFragments2(JavaProjectTests.java:2205)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
	at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
	at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
	at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>440117</bug_id>
          
          <creation_ts>2014-07-22 10:21:00 -0400</creation_ts>
          <short_desc>[test][model] testFindTypeWithDot Failed</short_desc>
          <delta_ts>2015-05-12 03:39:23 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc>http://download.eclipse.org/eclipse/downloads/drops4/N20140721-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html</bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2430270</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-22 10:21:23 -0400</bug_when>
    <thetext>Build ID: N20140721-2000

Unexpected type found. ----------- Expected ------------ class Y [in X [in X.java [in p [in &lt;project root&gt; [in P]]]]] ------------ but was ------------ Y (not open) [in X [in X.java [in p [in &lt;project root&gt; [in P]]]]] --------- Difference is ---------- expected:&lt;[class Y] [in X [in X.java [i...&gt; but was:&lt;[Y (not open)] [in X [in X.java [i...&gt;

junit.framework.ComparisonFailure: Unexpected type found.
----------- Expected ------------
class Y [in X [in X.java [in p [in &lt;project root&gt; [in P]]]]]
------------ but was ------------
Y (not open) [in X [in X.java [in p [in &lt;project root&gt; [in P]]]]]
--------- Difference is ----------
expected:&lt;[class Y] [in X [in X.java [i...&gt; but was:&lt;[Y (not open)] [in X [in X.java [i...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:258)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:234)
at org.eclipse.jdt.core.tests.model.ClassNameTests.testFindTypeWithDot(ClassNameTests.java:576)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2430290</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-22 10:33:29 -0400</bug_when>
    <thetext>Does not fail with 64 bit JRE. Will update the results with 32 bit JRE.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432202</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-26 00:57:56 -0400</bug_when>
    <thetext>The test has not failed in subsequent failures.
No failures with 32 bit JRE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2561987</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-05-12 03:39:23 -0400</bug_when>
    <thetext>This hasn&apos;t failed in a while. Although I am tempted to close this one, will wait till 4.6 to follow up.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>441465</bug_id>
          
          <creation_ts>2014-08-10 07:48:00 -0400</creation_ts>
          <short_desc>[test][model] testMoveCU05 Failed</short_desc>
          <delta_ts>2014-09-01 05:24:26 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2437357</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-10 07:48:32 -0400</bug_when>
    <thetext>Build ID: N20140809-1500

Test Results: http://download.eclipse.org/eclipse/downloads/drops4/N20140809-1500/testresults/html/org.eclipse.jdt.core.tests.model_linux.gtk.x86_64_8.0.html

Incorrect delta. ----------- Expected ------------ P[*]: {CHILDREN}\n src[*]: {CHILDREN}\n p1[*]: {CHILDREN}\n X.java[-]: {MOVED_TO(Y.java [in p2 [in src [in P]]])}\n p2[*]: {CHILDREN}\n Y.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n Y[+]: {MOVED_FROM(X [in X.java [in p1 [in src [in P]]]])} ------------ but was ------------ P[*]: {CHILDREN}\n src[*]: {CHILDREN}\n p2[+]: {}\n \n P[*]: {CHILDREN}\n src[*]: {CHILDREN}\n p1[*]: {CHILDREN}\n X.java[-]: {MOVED_TO(Y.java [in p2 [in src [in P]]])}\n p2[*]: {CHILDREN}\n Y.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n Y[+]: {MOVED_FROM(X [in X.java [in p1 [in src [in P]]]])} --------- Difference is ---------- expected:&lt;...*]: {CHILDREN}\n p[]1[*]: {CHILDREN}\n ...&gt; but was:&lt;...*]: {CHILDREN}\n p[2[+]: {}\n \n P[*]: {CHILDREN}\n src[*]: {CHILDREN}\n p]1[*]: {CHILDREN}\n ...&gt; 

junit.framework.ComparisonFailure: Incorrect delta.
----------- Expected ------------
P[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
p1[*]: {CHILDREN}\n
X.java[-]: {MOVED_TO(Y.java [in p2 [in src [in P]]])}\n
p2[*]: {CHILDREN}\n
Y.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n
Y[+]: {MOVED_FROM(X [in X.java [in p1 [in src [in P]]]])}
------------ but was ------------
P[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
p2[+]: {}\n
\n
P[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
p1[*]: {CHILDREN}\n
X.java[-]: {MOVED_TO(Y.java [in p2 [in src [in P]]])}\n
p2[*]: {CHILDREN}\n
Y.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n
Y[+]: {MOVED_FROM(X [in X.java [in p1 [in src [in P]]]])}
--------- Difference is ----------
expected:&lt;...*]: {CHILDREN}\n
p[]1[*]: {CHILDREN}\n
...&gt; but was:&lt;...*]: {CHILDREN}\n
p[2[+]: {}\n
\n
P[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
p]1[*]: {CHILDREN}\n
...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:258)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:234)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.CopyMoveResourcesTests.testMoveCU05(CopyMoveResourcesTests.java:895)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445971</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-01 05:24:26 -0400</bug_when>
    <thetext>testDeleteType2 Failed.
Build ID: N20140831-2000
Platform: Windows
Test Location: http://download.eclipse.org/eclipse/downloads/drops4/N20140831-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Similar failure message as mentioned in Comment 0.

---

Unexpected delta. ----------- Expected ------------ P1[*]: {CHILDREN}\n src[*]: {CHILDREN}\n &lt;default&gt;[*]: {CHILDREN}\n X.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n X[-]: {} ------------ but was ------------ P1[+]: {}\n \n P1[*]: {CHILDREN}\n src[*]: {CHILDREN}\n &lt;default&gt;[*]: {CHILDREN}\n X.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n X[-]: {} --------- Difference is ---------- expected:&lt;P1[[]*]: {CHILDREN}\n sr...&gt; but was:&lt;P1[[+]: {}\n \n P1[]*]: {CHILDREN}\n sr...&gt; 

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
P1[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
&lt;default&gt;[*]: {CHILDREN}\n
X.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n
X[-]: {}
------------ but was ------------
P1[+]: {}\n
\n
P1[*]: {CHILDREN}\n
src[*]: {CHILDREN}\n
&lt;default&gt;[*]: {CHILDREN}\n
X.java[*]: {CHILDREN | FINE GRAINED | PRIMARY RESOURCE}\n
X[-]: {}
--------- Difference is ----------
expected:&lt;P1[[]*]: {CHILDREN}\n
sr...&gt; but was:&lt;P1[[+]: {}\n
\n
P1[]*]: {CHILDREN}\n
sr...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:258)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:234)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1026)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1016)
at org.eclipse.jdt.core.tests.model.DeleteTests.testDeleteType2(DeleteTests.java:1046)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:384)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:239)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>441650</bug_id>
          
          <creation_ts>2014-08-12 22:26:00 -0400</creation_ts>
          <short_desc>[test][model] testBug152841 Failed</short_desc>
          <delta_ts>2014-08-13 00:22:10 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2438274</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-12 22:26:09 -0400</bug_when>
    <thetext>Build ID: I20140812-0800
Test Results: http://download.eclipse.org/eclipse/downloads/drops4/I20140812-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

junit.framework.AssertionFailedError
at org.eclipse.jdt.core.tests.model.ClassNameTests.testBug152841(ClassNameTests.java:1250)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>469495</bug_id>
          
          <creation_ts>2015-06-05 11:20:00 -0400</creation_ts>
          <short_desc>[delta] deltas improperly merged (CHANGE being lost)</short_desc>
          <delta_ts>2015-07-15 08:02:40 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://git.eclipse.org/r/51634</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Carsten Pfeiffer">carsten.pfeiffer</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>pisv</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2574656</commentid>
    <comment_count>0</comment_count>
      <attachid>254149</attachid>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-06-05 11:20:11 -0400</bug_when>
    <thetext>Created attachment 254149
JUnit-Plugin-Test project

I believe that org.eclipse.jdt.internal.core.DeltaProcessor.mergeDeltas(Collection) improperly discards CHANGE deltas.

Consider a simple refactoring where a compilation unit is renamed from A to B and rename participant additional changes the same compilation unit in some way (e.g. adds a field, method or annotation).

After the refactoring I only get the following delta, which says nothing about the modification of the compilation unit.
Java Model[*]: {CHILDREN}
	DeltaProcessorTest[*]: {CHILDREN}
		src[*]: {CHILDREN}
			test.deltaprocessor1[*]: {CHILDREN}
				ClassBeingMoved1.java[-]: {MOVED_TO(ClassBeingMoved2.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}
				ClassBeingMoved2.java[+]: {MOVED_FROM(ClassBeingMoved1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}


But that information was actually available in mergeDeltas:
[DeltaProcessorTest[*]: {CHILDREN}
	src[*]: {CHILDREN}
		test.deltaprocessor1[*]: {CHILDREN}
			ClassBeingMoved1.java[-]: {MOVED_TO(ClassBeingMoved2.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}
			ClassBeingMoved2.java[+]: {MOVED_FROM(ClassBeingMoved1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}, Java Model[*]: {CHILDREN}
	DeltaProcessorTest[*]: {CHILDREN}
		src[*]: {CHILDREN}
			test.deltaprocessor1[*]: {CHILDREN}
				ClassBeingMoved2.java[*]: {CHILDREN | FINE GRAINED}
					ClassBeingMoved2[*]: {CHILDREN | FINE GRAINED}
						participantField[+]: {}, Java Model[*]: {CHILDREN} &lt;------- this field was added by the participant
	DeltaProcessorTest[*]: {CHILDREN}
		src[*]: {CHILDREN}
			test.deltaprocessor1[*]: {CHILDREN}
				ClassBeingMoved1.java[-]: {MOVED_TO(ClassBeingMoved2.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}
				ClassBeingMoved2.java[+]: {MOVED_FROM(ClassBeingMoved1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}]

So the merging of the deltas discards valuable information which is essential for properly handling the change.

A testcase is attached.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585015</commentid>
    <comment_count>1</comment_count>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-02 08:25:04 -0400</bug_when>
    <thetext>FWIW, this bug only occurs when the compilation unit being refactored is *not open* in a java editor.

When you open the compilation unit in the testcase like this:

@Test
public void testDeltaProcessor() throws Exception {
	Assert.assertNotNull(cu);
	Assert.assertTrue(cu.exists());

	DeltaListener tempListener = registerDeltaListener(); 

	// ---&gt; when open in an editor, the test succeeds
	IEditorPart tempEditor = JavaUI.openInEditor(cu);
	Assert.assertNotNull(tempEditor);
[...]

the testcase succeeeds.

Any idea what could cause this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585031</commentid>
    <comment_count>2</comment_count>
    <who name="Vladimir Piskarev">pisv</who>
    <bug_when>2015-07-02 08:50:20 -0400</bug_when>
    <thetext>Hi Carsten,

AFAIK, FINE_GRAINED deltas are only available for working copies. So in general you cannot expect them to be reported for compilation units not open in the Java editor.

HTH,
Vladimir</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585379</commentid>
    <comment_count>3</comment_count>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-03 04:07:23 -0400</bug_when>
    <thetext>Hi Vladimir,

thanks for your comment. Indeed, when I change the testcase to create a working copy in the beginning like this:

cu.becomeWorkingCopy(null);

I do get the expected delta.

Now I&apos;m not sure how to proceed and integrate this into our tooling...

Can anyone confirm that this is intended behavior?

FWIW, the code discarding the fine grained delta is at JavaElementDelta.insertDeltaTree() and the line says:

	if (!equalsAndSameParent(element, getElement())) { // handle case of two jars that can be equals but not in the same project
		addAffectedChild(childDelta);
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585982</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-06 04:10:13 -0400</bug_when>
    <thetext>I will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586047</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-06 06:08:18 -0400</bug_when>
    <thetext>At some point (In reply to Carsten Pfeiffer from comment #3)
&gt; cu.becomeWorkingCopy(null);
&gt; 
&gt; I do get the expected delta.

What exactly are you expecting in the delta? I think the testcase passes when the delta has the following:

[[Working copy] ClassBeingRenamed1.java[*]: {AST AFFECTED}, Java Model[*]: {CHILDREN}

Which I believe is added by reconciler but perhaps not the one you are interested in?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586077</commentid>
    <comment_count>6</comment_count>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-06 07:30:31 -0400</bug_when>
    <thetext>Thanks for taking a look at this, Jay.

Indeed, when I have a closer look at what I get with having a working copy at hand, the problem is still there. When invoking becomeWorkingCopy(), I get a CHANGE delta before even performing the refactoring, and the testcase happily accepts that change.

So I move the registering of the delta listener after the becomeWorkingCopy() call, like this:

cu.becomeWorkingCopy(null);
DeltaListener tempListener = registerDeltaListener();

and then the testcase fails again because no CHANGE delta is being reported. I only get this, which says nothing about the field being added.

Java Model[*]: {CHILDREN}
	DeltaProcessorTest[*]: {CHILDREN}
		src[*]: {CHILDREN}
			test.deltaprocessor1[*]: {CHILDREN}
				[Working copy] ClassBeingRenamed1.java[-]: {MOVED_TO(ClassBeingRenamed2.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}
				ClassBeingRenamed2.java[+]: {MOVED_FROM([Working copy] ClassBeingRenamed1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}


What I would additionally expect is this:

ClassBeingMoved2.java[*]: {CHILDREN | FINE GRAINED}
					ClassBeingMoved2[*]: {CHILDREN | FINE GRAINED}
						participantField[+]: {}, Java Model[*]: {CHILDREN} &lt;------- this field was added by the participant


This delta is actually produced by the reconciler, but it is discarded by DeltaProcessor.mergeDeltas(), or more concretely, JavaElementDelta# insertDeltaTree(IJavaElement element, JavaElementDelta delta).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586792</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-07 00:28:47 -0400</bug_when>
    <thetext>I see the problem. As you said, we take no action when we find out that there is an existing child delta on the same element (in this case, the CU). Perhaps we should check for fine grained changes and add it too. I will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2587471</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-08 01:14:24 -0400</bug_when>
    <thetext>On closer look, this seems like a well thought out strategy of not reporting finer changes when an element is either added or removed.

I wonder if it makes sense in most cases. In this particular case, though, it might, because even though the delta kind is ADDED, it was actually moved from another element.

ClassBeingRenamed2.java[+]: {CHILDREN | MOVED_FROM([Working copy] ClassBeingRenamed1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]]) | FINE GRAINED}]

But I am still wondering whether we also want the children (participantField) to be part of the delta tree.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2588092</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-09 02:44:08 -0400</bug_when>
    <thetext>The Gerrit patch is here with some test changes. 

https://git.eclipse.org/r/#/c/51634/

While it works, the following delta makes me bit uncomfortable:
test.deltaprocessor1[*]: {CHILDREN}
				[Working copy] ClassBeingRenamed1.java[-]: {MOVED_TO(ClassBeingRenamed2.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]])}
				ClassBeingRenamed2.java[+]: {CHILDREN | MOVED_FROM([Working copy] ClassBeingRenamed1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]]) | FINE GRAINED}
					ClassBeingRenamed2[+]: {CHILDREN | MOVED_FROM(ClassBeingRenamed1 [in [Working copy] ClassBeingRenamed1.java [in test.deltaprocessor1 [in src [in DeltaProcessorTest]]]]) | FINE GRAINED}
						participantField[+]: {}]

Will see how the test goes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2588117</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-09 03:55:44 -0400</bug_when>
    <thetext>(In reply to Carsten Pfeiffer from comment #0)
&gt; Created attachment 254149 [details]
&gt; JUnit-Plugin-Test project

Hi Carsten, can you please update the patch to match the detla I posted in comment #9? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2589273</commentid>
    <comment_count>11</comment_count>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-13 05:13:08 -0400</bug_when>
    <thetext>Thanks a lot Jay,

I will check it out tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2589294</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-13 05:44:32 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #9)
&gt; The Gerrit patch is here with some test changes. 
&gt; 
&gt; https://git.eclipse.org/r/#/c/51634/

All JDT Core and UI tests pass with this patch. But ...

this violates the following documentation on IJavaElementDelta#ADDED:

	/**
	 * Status constant indicating that the element has been added.
	 * Note that an added java element delta has no children, as they are all implicitly added.
	 */

Now I am not entirely sure if we will be breaking any clients. May be we can make exceptions for &apos;move&apos; deltas? Copying Markus on behalf of JDT UI who will be the foremost client.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2590749</commentid>
    <comment_count>13</comment_count>
      <attachid>255211</attachid>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-15 08:00:28 -0400</bug_when>
    <thetext>Created attachment 255211
JUnit-Plugin-Test project v2

The updated testcase, now looking explicitly for the added field.

Since there is no modification delta, I removed the code looking for that. The testcase succeeds with your changes in https://git.eclipse.org/r/#/c/51634/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2590751</commentid>
    <comment_count>14</comment_count>
    <who name="Carsten Pfeiffer">carsten.pfeiffer</who>
    <bug_when>2015-07-15 08:02:40 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran Away till 20 July from comment #12)
&gt; Now I am not entirely sure if we will be breaking any clients. May be we can
&gt; make exceptions for &apos;move&apos; deltas? Copying Markus on behalf of JDT UI who
&gt; will be the foremost client.

Would there be an alternative like adding a MODIFIED delta after the ADDED delta?

Thanks again for looking into this!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>254149</attachid>
            <date>2015-06-05 11:20:00 -0400</date>
            <delta_ts>2015-07-15 08:00:28 -0400</delta_ts>
            <desc>JUnit-Plugin-Test project</desc>
            <filename>test-jdt-deltaprocessor.zip</filename>
            <type>application/zip</type>
            <size>15377</size>
            <attacher name="Carsten Pfeiffer">carsten.pfeiffer</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>255211</attachid>
            <date>2015-07-15 08:00:00 -0400</date>
            <delta_ts>2015-07-15 08:00:28 -0400</delta_ts>
            <desc>JUnit-Plugin-Test project v2</desc>
            <filename>test-jdt-deltaprocessor2.zip</filename>
            <type>application/zip</type>
            <size>15248</size>
            <attacher name="Carsten Pfeiffer">carsten.pfeiffer</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>472567</bug_id>
          
          <creation_ts>2015-07-14 02:07:00 -0400</creation_ts>
          <short_desc>ClassCastException in SingleNameReference.localVariableBinding (851)</short_desc>
          <delta_ts>2015-08-14 02:09:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="EPP Error Reports">error-reports-inbox</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2589716</commentid>
    <comment_count>0</comment_count>
    <who name="EPP Error Reports">error-reports-inbox</who>
    <bug_when>2015-07-14 02:07:41 -0400</bug_when>
    <thetext>The following incident was reported via the automated error reporting:


    code:                   4
    plugin:                 org.eclipse.jdt.core_3.11.0.v20150126-2015
    message:                Could not create binding from binding key: Lorg/jooq/TransactionalCallable&lt;Lorg/jooq/impl/DefaultDSLContext;:214TT;&gt;;
    fingerprint:            199f7dd5
    exception class:        java.lang.ClassCastException
    exception message:      org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding
    number of children:     0
    
    java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding
    at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.localVariableBinding(SingleNameReference.java:851)
    at org.eclipse.jdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:199)
    at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
    at org.eclipse.jdt.internal.compiler.ast.Block.resolveUsing(Block.java:127)
    at org.eclipse.jdt.internal.compiler.ast.TryStatement.resolve(TryStatement.java:1071)
    at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:638)
    at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:307)
    at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:548)
    at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1188)
    at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1301)
    at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
    at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:803)
    at org.eclipse.jdt.core.dom.CompilationUnitResolver.process(CompilationUnitResolver.java:348)
    at org.eclipse.jdt.internal.core.util.BindingKeyResolver.consumeTopLevelType(BindingKeyResolver.java:462)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:635)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:618)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parseTypeArgument(BindingKeyParser.java:986)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parseParameterizedType(BindingKeyParser.java:929)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:649)
    at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:618)
    at org.eclipse.jdt.internal.core.util.BindingKeyResolver.getCompilerBinding(BindingKeyResolver.java:621)
    at org.eclipse.jdt.core.dom.CompilationUnitResolver.reportBinding(CompilationUnitResolver.java:1092)
    at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:913)
    at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:585)
    at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:897)
    at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.getExpectedType(LazyGenericTypeProposal.java:633)
    at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.computeTypeArgumentProposals(LazyGenericTypeProposal.java:331)
    at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.apply(LazyGenericTypeProposal.java:221)
    at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:320)
    at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:335)
    at org.eclipse.jdt.internal.ui.text.java.JavaTypeCompletionProposal.apply(JavaTypeCompletionProposal.java:112)
    at org.eclipse.jdt.internal.ui.text.java.AnonymousTypeCompletionProposal.apply(AnonymousTypeCompletionProposal.java:359)
    at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:498)
    at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:963)
    at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertSelectedProposalWithMask(CompletionProposalPopup.java:914)
    at org.eclipse.jface.text.contentassist.CompletionProposalPopup.verifyKey(CompletionProposalPopup.java:1358)
    at org.eclipse.jface.text.contentassist.ContentAssistant$InternalListener.verifyKey(ContentAssistant.java:814)
    at org.eclipse.jface.text.TextViewer$VerifyKeyListenersManager.verifyKey(TextViewer.java:492)
    at org.eclipse.swt.custom.StyledTextListener.handleEvent(StyledTextListener.java:66)
    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
    at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4354)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1085)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1070)
    at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:782)
    at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:6002)
    at org.eclipse.swt.custom.StyledText$7.handleEvent(StyledText.java:5687)
    at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
    at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4354)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1061)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1085)
    at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1070)
    at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1112)
    at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1108)
    at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1529)
    at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4764)
    at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:343)
    at org.eclipse.swt.widgets.Control.windowProc(Control.java:4645)
    at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:339)
    at org.eclipse.swt.widgets.Display.windowProc(Display.java:5042)
    at org.eclipse.swt.internal.win32.OS.DispatchMessageW(OS.java:-2)
    at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2549)
    at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3759)
    at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1151)
    at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
    at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1032)
    at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
    at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:648)
    at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
    at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:592)
    at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
    at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:138)
    at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
    at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
    at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
    at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
    at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
   
  

General Information:

    reported-by:      
    anonymous-id:     db231407-f5a0-4b36-b04d-38aa61d7e49a
    eclipse-build-id: 4.5.0.I20150203-1300
    eclipse-product:  org.eclipse.epp.package.dsl.product
    operating system: Windows8 6.2.0 (x86_64) - win32
    jre-version:      1.8.0_31-b13

The following plug-ins were present on the execution stack (*):
    1. org.eclipse.core.databinding.observable_1.4.1.v20140910-2107
    2. org.eclipse.core.databinding_1.4.100.v20141002-1314
    3. org.eclipse.core.runtime_3.10.0.v20150112-1422
    4. org.eclipse.e4.ui.workbench_1.3.0.v20150113-2327
    5. org.eclipse.e4.ui.workbench.swt_0.12.100.v20150114-0905
    6. org.eclipse.equinox.app_1.3.200.v20130910-1609
    7. org.eclipse.equinox.launcher_1.3.0.v20140415-2008
    8. org.eclipse.jdt_3.11.0.v20150203-1300
    9. org.eclipse.jdt.core_3.11.0.v20150126-2015
    10. org.eclipse.jdt.ui_3.10.100.v20150116-1347
    11. org.eclipse.jface.text_3.10.0.v20150112-1146
    12. org.eclipse.jface_3.11.0.v20150121-1751
    13. org.eclipse.swt_3.104.0.v20150203-2243
    14. org.eclipse.ui_3.107.0.v20150107-0903
    15. org.eclipse.ui.ide.application_1.0.600.v20150120-1542
    16. org.eclipse.ui.ide_3.10.100.v20150126-1117

Please note that:
* Messages, stacktraces, and nested status objects may be shortened.
* Bug fields like status, resolution, and whiteboard are sent
  back to reporters.
* The list of present bundles and their respective versions was
  calculated by package naming heuristics. This may or may not reflect reality.

Other Resources:
* Report: https://dev.eclipse.org/recommenders/committers/confess/#/problems/54f82fc1e4b0ad909161a927  
* Manual: https://dev.eclipse.org/recommenders/community/confess/#/guide


Thank you for your assistance.
Your friendly error-reports-inbox.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2590085</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-07-14 04:09:06 -0400</bug_when>
    <thetext>Perhaps a fix for this is as easy as letting the ctor of ProblemFieldBinding set
  this.bits |= Binding.FIELD;

We also have useful information in the error message, which tells us we were parsing this binding key:
  Lorg/jooq/TransactionalCallable&lt;Lorg/jooq/impl/DefaultDSLContext;:214TT;&gt;;

So, if s.o. digs out the involved classes (from https://github.com/jOOQ ?) and invents a bug leading to creation of the ProblemFieldBinding we should be able to create a JUnit. Maybe the concrete classes aren&apos;t even needed if we synthesize a similar example according to the stack trace.

Note that org.eclipse.jdt.core_3.11.0.v20150126-2015 is not the release version.

Anyone?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2602042</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-08-14 02:09:29 -0400</bug_when>
    <thetext>&gt; Anyone?

I will take a look.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>473629</bug_id>
          
          <creation_ts>2015-07-27 06:18:00 -0400</creation_ts>
          <short_desc>Static Imports are sorted not in ASCII order</short_desc>
          <delta_ts>2016-02-23 11:19:22 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Aleksandr Ivanov">ivanov-alex</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>gautier.desaintmartinlacaze</cc>
    
    <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>3</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2595063</commentid>
    <comment_count>0</comment_count>
    <who name="Aleksandr Ivanov">ivanov-alex</who>
    <bug_when>2015-07-27 06:18:15 -0400</bug_when>
    <thetext>I have Eclipse default configuration for Organize Imports (java,javax,org,com).
It works good with non-static imports after Mars release.

However, I cannot understand how static imports are sorted.
In example below you can see that in non-static imports, HttpHeaders.Names follows HttpHeaders.Values (in ASCII order). But in static section HttpHeaders.setHeader goes before HttpHeaders.Names.DATE (not in ASCII order)


package com.mycompany.app;

import static io.netty.handler.codec.http.HttpConstants.COLON;
import static io.netty.handler.codec.http.HttpHeaders.addHeader;
import static io.netty.handler.codec.http.HttpHeaders.setHeader;
import static io.netty.handler.codec.http.HttpHeaders.Names.DATE;

import org.junit.Test;

import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpHeaders.Names;
import io.netty.handler.codec.http.HttpHeaders.Values;
import io.netty.handler.codec.http.HttpMessage;

public class test {

    @Test
    public void test() {
        String s2 = DATE;
        HttpMessage m1;
        addHeader(m1,s2,s2);
        setHeader(m1,s2,s2);
        Names s3;
        HttpHeaders s4;
        Values s5;
        byte s7 =COLON; 
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2595699</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-07-28 10:05:23 -0400</bug_when>
    <thetext>Just guessing: do we sort methods &amp; fields before member types?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2596052</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-07-29 04:20:22 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; Just guessing: do we sort methods &amp; fields before member types?

I&apos;ll check and confirm.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>99657</bug_id>
          
          <creation_ts>2005-06-13 10:16:00 -0400</creation_ts>
          <short_desc>Classpath ordering not respected with duplicate types in JRE and source</short_desc>
          <delta_ts>2016-01-14 12:59:45 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>mirko</cc>
    
    <cc>philippe_mulet</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>477714</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2005-06-13 10:16:33 -0400</bug_when>
    <thetext>I20050610-1757 (3.1RC2)

- new workspace, import plug-in org.junit as source

- change classpath ordering such that the JRE is the first entry; .classpath:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;classpath&gt;
	&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot;/&gt;
	&lt;classpathentry kind=&quot;src&quot; path=&quot;src-junit&quot;/&gt;
	&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.pde.core.requiredPlugins&quot;/&gt;
	&lt;classpathentry kind=&quot;output&quot; path=&quot;bin&quot;/&gt;
&lt;/classpath&gt;

- add cu /org.junit/src-junit/java/util/Enumeration.java:
package java.util;
public interface Enumeration {
//	boolean hasMoreElements(); // no questions!
	Object nextElement();
}

=&gt; The compiler reports errors on references to Enumeration#hasMoreElements():
&quot;The method hasMoreElements() is undefined for the type Enumeration&quot;. I would
expect that my Enumeration.java is not consulted, since the version from the JRE
wins the classpath race.

Interestingly, when I hover over references to Enumeration in the editor, I get
the javadoc from the JRE version. Also, Open Declaration (F3) jumps to the JRE
version, even from error-marked class to hasMoreElements().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>481588</commentid>
    <comment_count>1</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2005-06-15 12:36:20 -0400</bug_when>
    <thetext>All source in your source folders wins over any .class file on your classpath.

I doubt we will ever change this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>481654</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2005-06-15 13:23:53 -0400</bug_when>
    <thetext>It&apos;s not that I would see a real use in such a setup; I just found it strange
that Open Declaration and the hovers tell a different story than the compiler.

Frankly, I don&apos;t care too much whether this will be fxed or not, unless it is a
regression (I didn&apos;t check).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>838263</commentid>
    <comment_count>3</comment_count>
    <who name="Maxime Daniel">maxime_daniel</who>
    <bug_when>2006-11-27 07:55:42 -0500</bug_when>
    <thetext>From comment #1, I would take that we won&apos;t change that ever (Philippe?). Then, shouldn&apos;t we repurpose the bug at handling the discrepancy raised in comment #2? (Checked a recent build, and F3 does point the user to the JRE if it&apos;s before the sources in the classpath, and to the source Enumeration else. This is wrong if F3&apos;s meaning is to point the user to the type used by the invocation site.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>976870</commentid>
    <comment_count>4</comment_count>
    <who name="Maxime Daniel">maxime_daniel</who>
    <bug_when>2007-05-29 02:21:50 -0400</bug_when>
    <thetext>Pls decide.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>105372</bug_id>
          
          <creation_ts>2005-07-27 16:01:00 -0400</creation_ts>
          <short_desc>[buildpath] JDT should support multiple classpaths per project</short_desc>
          <delta_ts>2016-03-18 13:10:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=356450</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=479483</see_also>
    
    <see_also>https://git.eclipse.org/r/68343</see_also>
    
    <see_also>https://git.eclipse.org/c/e4/org.eclipse.e4.ui.git/commit/?id=314fb1c56098e642932e249b1b7dd59c69c00f2e</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>376616</blocked>
    
    <blocked>482315</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Dickman">didickman</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>aholland</cc>
    
    <cc>andre.dietisheim</cc>
    
    <cc>apupier</cc>
    
    <cc>atg.sleepless</cc>
    
    <cc>cbridgha</cc>
    
    <cc>cdtdoug</cc>
    
    <cc>csdonat</cc>
    
    <cc>d.seymore</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>darin.eclipse</cc>
    
    <cc>david_williams</cc>
    
    <cc>eclipse</cc>
    
    <cc>ekuleshov</cc>
    
    <cc>fbricon</cc>
    
    <cc>felix</cc>
    
    <cc>gautier.desaintmartinlacaze</cc>
    
    <cc>gregory.amerson</cc>
    
    <cc>gunnar</cc>
    
    <cc>heiko.boettger</cc>
    
    <cc>ian</cc>
    
    <cc>igor</cc>
    
    <cc>irbull</cc>
    
    <cc>jan.sievers</cc>
    
    <cc>jnord</cc>
    
    <cc>jonah</cc>
    
    <cc>Lars.Vogel</cc>
    
    <cc>manderse</cc>
    
    <cc>markus_keller</cc>
    
    <cc>mike.milinkovich</cc>
    
    <cc>mistria</cc>
    
    <cc>mn</cc>
    
    <cc>nikop</cc>
    
    <cc>nitind</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>pablo.queixalos</cc>
    
    <cc>pascal</cc>
    
    <cc>radim.kubacki</cc>
    
    <cc>schrepfler</cc>
    
    <cc>st.oehme</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>wayne</cc>
    
    <cc>xcoulon</cc>
          
          <votes>31</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>510263</commentid>
    <comment_count>0</comment_count>
    <who name="Daniel Dickman">didickman</who>
    <bug_when>2005-07-27 16:01:17 -0400</bug_when>
    <thetext>I would like to set up separate classpaths for my project code as well as a 
classpath for my junit test code. Currently I have to add all the required 
jars to the classpath and don&apos;t have a clear view of the project dependencies 
(which need to be deployed along with the system) versus test dependencies 
(which needn&apos;t be deployed along with the system).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>518625</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2005-08-15 12:04:40 -0400</bug_when>
    <thetext>*** Bug 107032 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1257607</commentid>
    <comment_count>2</comment_count>
    <who name="David Seymore">d.seymore</who>
    <bug_when>2008-06-03 11:27:34 -0400</bug_when>
    <thetext>I was playing with access rules for build-path entries, and it looks like that same mechanism, but, in reverse.. maybe &quot;usage rules&quot; would be a good solution, rather than changing the complete UI to handle linking source paths to classpaths or libraries.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1329243</commentid>
    <comment_count>3</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-11 10:24:19 -0400</bug_when>
    <thetext>To be investigating for M4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1338134</commentid>
    <comment_count>4</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-25 11:46:00 -0400</bug_when>
    <thetext>Planning discussions lead to remove this item from the 3.5 plan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1383107</commentid>
    <comment_count>5</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2008-12-03 09:45:57 -0500</bug_when>
    <thetext>Is there any change this issue can be considered for 3.5? Even if JDT itself won&apos;t be using it, there is number of 3rd party tools that would benefit from this. For example m2e project http://eclipse.org/m2e/ would be able to provide much closer mapping with the Maven project model.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1383117</commentid>
    <comment_count>6</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-12-03 09:53:09 -0500</bug_when>
    <thetext>The problem is not that JDT won&apos;t use this feature. Actually, JDT/Core would like to use it. For example, the &quot;batch&quot; and &quot;compiler&quot; source folders would need a different classpath than other source folder since they must target a 1.3 JRE, where the other source folders could target a 1.4 JRE.

The problem is that we don&apos;t have the resources for such a major change.

As usual, a good quality patch would be welcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1665474</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-01-28 10:26:02 -0500</bug_when>
    <thetext>See bug 300593 for another occurrence: if a plugin project contains
a source folder for a non-OSGi jar, classpaths of both source
folders must be separated for accurate results.

I did not mark bug 300593 as a duplicate because there also some
non-determinism in PDE&apos;s classpath computation is involved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350788</commentid>
    <comment_count>8</comment_count>
    <who name="Pablo Queixalos">pablo.queixalos</who>
    <bug_when>2014-01-16 14:02:58 -0500</bug_when>
    <thetext>Maven (m2) users could really enjoy classpath contextualization for a single project.

&apos;test&apos; and &apos;runtime&apos; scoped dependencies are both in same classpath, which causes :
 - bad completion
 - no errors on bad imports (eg. runtime java class importing a test scoped class)

A java project&apos; source folder could be attached to a named classpath.

Anyway we can resurrect this issue ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350928</commentid>
    <comment_count>9</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2014-01-17 02:29:49 -0500</bug_when>
    <thetext>@Pablo: In general, the only good way to resurrect this kind issue is if you can contribute a patch (or pay someone to contribute it) ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2583908</commentid>
    <comment_count>10</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-06-30 03:29:20 -0400</bug_when>
    <thetext>Gradle also heavily relies on the concept of different classpath definition. But since there is no support for that, all we can do to in the Buildship project (Gradle plugins for Eclipse) is a workaround. Right now we simply add the sum of all source sets and dependency jars to the classpath. 

This might be feasible for smaller projects but anything beyond will be a pain to do in Eclipse. We&apos;d like to know if the JDT team has some kind of plan anytime to do something about it</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2583912</commentid>
    <comment_count>11</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-06-30 03:37:24 -0400</bug_when>
    <thetext>I would love to see that the community helps resolving this issue. I&apos;d definitely like to help and I&apos;m sure I&apos;m not the the only one.  

But most probably this is not a task which anybody know how to implement properly unless committer who is familiar with the code gives assistance. It would be really nice if somebody could give a summary on what has to be changed to get this story done (Maybe by me if I find some free time).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2583931</commentid>
    <comment_count>12</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2015-06-30 04:06:39 -0400</bug_when>
    <thetext>For the Maven use-case it seems like it&apos;s &quot;just&quot; a matter of having m2e create several classpath containers (one per scope) in the project, and JDT to be able either to assign or filter out specific classpath entries for a given source folder.
Is this the same in Gradle? Is the classpath depending on the source folder?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2583991</commentid>
    <comment_count>13</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-06-30 05:52:35 -0400</bug_when>
    <thetext>With Gradle it is possible to define the same source folder for different source sets and assign arbitrary classpath to them.

In terms of plain Java projects it is more of a corner case. Consequently, in Buildship defining a new classpath container for each dependency scope looks like a viable option, we will definitely experiment with that. Thanks for the hint!

For completeness the actual multiple classpath would be still interesting especially for AndMore project. If they want to move Gradle/Buildship for the build in the future they have to deal with all the versions, release types, flavours and whatnot, which will require a fine-grained classpath handling.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2584016</commentid>
    <comment_count>14</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2015-06-30 07:03:26 -0400</bug_when>
    <thetext>(In reply to Mickael Istria from comment #12)
&gt; For the Maven use-case it seems like it&apos;s &quot;just&quot; a matter of having m2e
&gt; create several classpath containers (one per scope) in the project, and JDT
&gt; to be able either to assign or filter out specific classpath entries for a
&gt; given source folder.
&gt; Is this the same in Gradle? Is the classpath depending on the source folder?

What you describe is not what M2E needs.

M2E needs multiple of source-roots+classpath+compiler-options+output, pretty much entire concept currently encapsulated by IJavaProject, per physical IProject. And ability to establish classpath dependencies at granularity of individual source-roots+classpath+compiler-options+output things. Beside classpath changes, M2E will also need few smaller changes to JDT to property support Maven nested project layout.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2584473</commentid>
    <comment_count>15</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-07-01 03:04:32 -0400</bug_when>
    <thetext>Thanks for the clarification. It&apos;s good to understand the the precise details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585629</commentid>
    <comment_count>16</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2015-07-03 12:14:30 -0400</bug_when>
    <thetext>I see m2e uses &quot;attributes&quot; to decorate a classpath entry, couldn&apos;t it use one of those attributes to reference a specific classpath container in the project? If so, we could imagine tweaking the Java editor to use the referenced container when specified instead of the project one?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585707</commentid>
    <comment_count>17</comment_count>
    <who name="Max Rydahl Andersen">manderse</who>
    <bug_when>2015-07-04 02:01:13 -0400</bug_when>
    <thetext>The editor is not really relevant here, it is the compiler/builder that now need to have this knowledge. 

The editor just shows what is in the built model (more or less)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644135</commentid>
    <comment_count>18</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-11-25 09:29:42 -0500</bug_when>
    <thetext>*** Bug 336376 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644164</commentid>
    <comment_count>19</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-11-25 10:06:16 -0500</bug_when>
    <thetext>Support for multiple classpaths per project would probably be doable for the compiler, but the bigger problem is that this would break all the APIs on IJavaProject, and all APIs that use IJavaProject as the context. This includes
- Search (uses IJavaProject as scope)
- Type Hierarchies
- ASTParser

And the next request around the corner will be separate sets of compiler options per classpath (e.g. to disable some warnings in test projects).

The entity that encapsulates all these concerns in Eclipse is the project. Source folders are just a way to link multiple source roots into the same project. If you need a separate classpath, you have to create a separate project.

This is a WONTFIX for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644167</commentid>
    <comment_count>20</comment_count>
    <who name="James Nord">jnord</who>
    <bug_when>2015-11-25 10:12:44 -0500</bug_when>
    <thetext>If this gets marked WONT_FIX then seems like you are saying that you do not care about proper Maven support in eclipse.

There is already have a request to support different compiler options per source root #87215 (Netbeans already supports this also).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644168</commentid>
    <comment_count>21</comment_count>
    <who name="Gautier de SAINT MARTIN LACAZE">gautier.desaintmartinlacaze</who>
    <bug_when>2015-11-25 10:17:29 -0500</bug_when>
    <thetext>I agree with James Nord, we need a proper support for maven, and a maven project have separate classpath.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644170</commentid>
    <comment_count>22</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2015-11-25 10:20:57 -0500</bug_when>
    <thetext>and what about keeping the project properties as the &quot;default&quot; settings for any entry (so that API and behaviour wouldn&apos;t change) and adding to IClasspahEntry (defining source folders) some optional/additional methods for specific settings, such as classpath or compiler option?
Then progressively, the parts that usually to consume them would replace the IJavaProject context by IClasspathEntry when it makes sense. For example, I believe that things such as Search or Type Hierarchies may be OK to remain on the IJavaProject scope whereas builders would need to adopt it ASAP.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644179</commentid>
    <comment_count>23</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-11-25 10:32:16 -0500</bug_when>
    <thetext>Proper support for Maven is already possible if the Eclipse Java projects are set up properly. I don&apos;t use m2e, but they apparently chose a suboptimal mapping from Maven projects to Eclipse Java projects. They are free to fix that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644180</commentid>
    <comment_count>24</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2015-11-25 10:34:47 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #23)
&gt; Proper support for Maven is already possible if the Eclipse Java projects
&gt; are set up properly. I don&apos;t use m2e, but they apparently chose a suboptimal
&gt; mapping from Maven projects to Eclipse Java projects. They are free to fix
&gt; that.

Can you please document the optimal way in a wiki page? I would like to give it a try and see how usable it is compared to m2e.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644187</commentid>
    <comment_count>25</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2015-11-25 10:52:45 -0500</bug_when>
    <thetext>(In reply to Mickael Istria from comment #24)
&gt; Can you please document the optimal way in a wiki page? I would like to give
&gt; it a try and see how usable it is compared to m2e.

Given the reasons in comment 19, it must be two Java projects, with the test project depending on the first project, inheriting it&apos;s full classpath plus additional test dependencies.


I think this is doable. But I think dealing with two different projects for the same thing will be awkward in JDT Packages Explorer and potentially other UI elements operating with projects. Plus, there likely needs to be a 3rd project for bringing in all the other parts of a Maven project into Eclipse as resources.

What&apos;s needed in this case is a way in the UI to group the three projects together as one Maven project. That&apos;s possible in Project Explorer but there are a lot gaps in other areas of the Eclipse UI (eg., search, project preferences) to support such a grouping.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644191</commentid>
    <comment_count>26</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2015-11-25 11:00:24 -0500</bug_when>
    <thetext>There are concrete issue that make the 3 projects (1 main, 1 test, 1 &quot;aggregator&quot;) approach not usable.
The simplest one -but quite annoying- I can think of would be that I want projects to be named as folder, and Eclipse resource model doesn&apos;t allow multiple projects with same name. So it would end up with a main, main(1), ... main(100) projects and same for tests. That would be horrible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644277</commentid>
    <comment_count>27</comment_count>
    <who name="Fred Bricon">fbricon</who>
    <bug_when>2015-11-25 14:37:18 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #19)
&gt; Support for multiple classpaths per project .. would break all the APIs on
&gt; IJavaProject, and all APIs that use IJavaProject as the context. 
&gt; 
&gt; This is a WONTFIX for me.

All these use-cases show the APIs need to evolve to keep Eclipse relevant as a Java IDE. AFAIK, breaking changes are not forbidden, provided you bump the major version (call it Eclipse 5.0). Adopters will have to adapt, and that will cause a major refactoring in many places, but that&apos;s life. The main problem as I see it, is rather to find funding to get people on fixing the problem in JDT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644296</commentid>
    <comment_count>28</comment_count>
    <who name="Max Rydahl Andersen">manderse</who>
    <bug_when>2015-11-25 15:28:41 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #23)
&gt; Proper support for Maven is already possible if the Eclipse Java projects
&gt; are set up properly. I don&apos;t use m2e, but they apparently chose a suboptimal
&gt; mapping from Maven projects to Eclipse Java projects. They are free to fix
&gt; that.

Markus that is a very narrow minded response. This is not an Us vs They vs Them. 

You say you don&apos;t use m2e and call it a suboptimal mapping even though eclipse&apos;s mapping of projects is the one that is standing out.

Eclipse is the *only* Java IDE on this planet afaik that still insist on a single classpat per project.

This issue is *not* just for m2e (Maven). It is *also* for buildship (Gradle). This issue is one of many reasons why it is hard to support Android development setup in Eclipse.

It is also relevant for anyone using junit, testng, etc. 

The project model of Eclipse is simply not uptodate on how Java (possibly outside osgi) have been built and are being built the last 10+ years. 

So far the community have adopted/adjusted for the deficiencies in Eclipse JDT in this area. I think it is about time we try move this forward and entertain looking at this besides just claiming users are holding...eh..using it wrong.
 
If you really think everyone need to change their project mapping and then bump into issues like Michael Istria and others outline I would say it would be worthwhile you try and actually use m2e or buildship to see what the challenges are.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648687</commentid>
    <comment_count>29</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-12-07 07:02:45 -0500</bug_when>
    <thetext>(In reply to Max Rydahl Andersen from comment #28)
&gt; (In reply to Markus Keller from comment #23)
&gt; &gt; Proper support for Maven is already possible if the Eclipse Java projects
&gt; &gt; are set up properly. I don&apos;t use m2e, but they apparently chose a suboptimal
&gt; &gt; mapping from Maven projects to Eclipse Java projects. They are free to fix
&gt; &gt; that.
&gt; 
&gt; Markus that is a very narrow minded response. This is not an Us vs They vs
&gt; Them. 
&gt; 
&gt; You say you don&apos;t use m2e and call it a suboptimal mapping even though
&gt; eclipse&apos;s mapping of projects is the one that is standing out.
&gt; 
&gt; Eclipse is the *only* Java IDE on this planet afaik that still insist on a
&gt; single classpat per project.
&gt; 
&gt; This issue is *not* just for m2e (Maven). It is *also* for buildship
&gt; (Gradle). This issue is one of many reasons why it is hard to support
&gt; Android development setup in Eclipse.
&gt; 
&gt; It is also relevant for anyone using junit, testng, etc. 
&gt; 
&gt; The project model of Eclipse is simply not uptodate on how Java (possibly
&gt; outside osgi) have been built and are being built the last 10+ years. 
&gt; 
&gt; So far the community have adopted/adjusted for the deficiencies in Eclipse
&gt; JDT in this area. I think it is about time we try move this forward and
&gt; entertain looking at this besides just claiming users are
&gt; holding...eh..using it wrong.
&gt;  
&gt; If you really think everyone need to change their project mapping and then
&gt; bump into issues like Michael Istria and others outline I would say it would
&gt; be worthwhile you try and actually use m2e or buildship to see what the
&gt; challenges are.

You are right with the Buildship project. Missing the option</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648688</commentid>
    <comment_count>30</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-12-07 07:06:35 -0500</bug_when>
    <thetext>(my previous comment was stripped)

So for the Buildship project having multiple classpaths per project is the most wanted feature. Without it we simply can&apos;t make use of dependency scopes. Currently we throw in all dependencies to the classpath and hope for the best.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648712</commentid>
    <comment_count>31</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-12-07 08:03:56 -0500</bug_when>
    <thetext>This feature is also required for proper Android support in Eclipse (of course related to Gradle). Android uses by default three scopes: compile, test (for unit tests on the JVM) and androidTest (for unit tests require to run on an Android device).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648841</commentid>
    <comment_count>32</comment_count>
    <who name="Doug Schaefer">cdtdoug</who>
    <bug_when>2015-12-07 10:46:09 -0500</bug_when>
    <thetext>This requirement reminds me of CDT&apos;s build configurations. They are a level below project and allow us to set up for entirely different tool chains with thier own build options and even down to their own set of resources to use in the build. So this is possible with the Eclipse platform.

A few years ago, one of the CDT contributors added IBuildConfiguration to the core.resources. He was able to do it without breaking APIs. As Mickael suggested, there is a default this is automatically set up so none of the existing API clients need to know about it until they need to use it.

I can understand if the Platform team is stretched for resources and that&apos;s a valid argument to make and a call for help, but to suggest this is a bad idea, what Max said...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648848</commentid>
    <comment_count>33</comment_count>
    <who name="Donat Csikos">csdonat</who>
    <bug_when>2015-12-07 10:54:48 -0500</bug_when>
    <thetext>Let’s think about a solution for a second. IMHO this issue is very complex and should be addressed by a core developer who has deep understanding about jdt as a whole. It would be nice if this person would step up, evaluate the situation and say, i) is it achievable, ii) what are the alternatives for the implementation, and iii) can it be solved as a community effort?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648864</commentid>
    <comment_count>34</comment_count>
    <who name="Doug Schaefer">cdtdoug</who>
    <bug_when>2015-12-07 11:06:47 -0500</bug_when>
    <thetext>(In reply to Donat Csikos from comment #33)
&gt; iii) can it be solved as a community effort?

In theory, JDT is already a community effort.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2649461</commentid>
    <comment_count>35</comment_count>
    <who name="Doug Schaefer">cdtdoug</who>
    <bug_when>2015-12-08 09:34:10 -0500</bug_when>
    <thetext>I think that at this point, it would be prudent for someone to start working on a patch, at least to get things started. Both proper Gradle and Maven support depends on it and I would think a few of us have a vested interest in making it work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2649493</commentid>
    <comment_count>36</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-12-08 10:05:48 -0500</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #35)
&gt; I think that at this point, it would be prudent for someone to start working
&gt; on a patch, at least to get things started. Both proper Gradle and Maven
&gt; support depends on it and I would think a few of us have a vested interest
&gt; in making it work.

Dani, indicated that the JDT team might work in this area for Java 9. http://dev.eclipse.org/mhonarc/lists/ide-dev/msg01039.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2681781</commentid>
    <comment_count>37</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2016-03-14 08:53:43 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/68343</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2681785</commentid>
    <comment_count>38</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2016-03-14 08:58:09 -0400</bug_when>
    <thetext>https://git.eclipse.org/r/#/c/68343/ is a draft/POV of a proposal to support this notion of multiple classpath without intruding much into current JDT behavior. It consists of a builder that one can hook on a JDT project and of some classpath attributes that one can add programatically or directly in the .classpath. The classpath annotation allow to define which source folder can see the types inside the annotated container, and the builder uses them to check that referenced type in a file are visible for the containing source folder and reports an error if not.
This is totally standalone, and doesn&apos;t change anything in JDT behavior, it&apos;s just an optional top-in.

I&apos;ve validated the idea with Maven and adopting it would consists of 2 (discussable changes) in m2e: https://bugs.eclipse.org/bugs/show_bug.cgi?id=486035 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=486032</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2681900</commentid>
    <comment_count>39</comment_count>
    <who name="Doug Schaefer">cdtdoug</who>
    <bug_when>2016-03-14 11:39:26 -0400</bug_when>
    <thetext>Awesome. Thanks Mickael. Can&apos;t wait to try this out.

I&apos;ve been working on Gradle support for Android in Andmore and it has a similar requirement that m2e does as far as test configurations go, and even more as more configurations are added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682004</commentid>
    <comment_count>40</comment_count>
    <who name="Doug Schaefer">cdtdoug</who>
    <bug_when>2016-03-14 14:32:34 -0400</bug_when>
    <thetext>This is genius Mickael! A builder that detects cross scope references and raises an error. That&apos;s what we&apos;re really looking for in the end. And I can use this code as is with the Android Gradle build.

Any thoughts on performance of this builder?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682013</commentid>
    <comment_count>41</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2016-03-14 14:50:06 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #40)
&gt; Any thoughts on performance of this builder?

The builder currently has some limitations in detecting the referenced types (so it&apos;s not feature complete), and it is stateless and does recompute the &quot;scope state&quot; every time it&apos;s invoked (so there&apos;s much room for optimization).
So far, it seems that the performance is reactive enough and not causing any annoyance; I don&apos;t have better metrics to share ;)
I wouldn&apos;t expect this operation to be more complicated nor take longer than actually re-compiling the class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682082</commentid>
    <comment_count>42</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2016-03-14 16:39:37 -0400</bug_when>
    <thetext>(In reply to Mickael Istria from comment #38)
&gt; https://git.eclipse.org/r/#/c/68343/ is a draft/POV of a proposal to support
&gt; this notion of multiple classpath without intruding much into current JDT
&gt; behavior.

Interesting approach.

I have a suggestion to make the implementation more flexible.

Right now it seems an IClasspathEntry must know which source folder it contributes too. What if source folders are renamed?

I think it should be more abstract. It should be possible to &quot;tag&quot; source folders as well es other classpath entries with a scope, i.e. making the attribute independent of the folder name. Then the scope build would do the wiring based on the scope tags. It picks source folders based on tags and highlights any usage as error coming from an entry without a matching tag.

In a second step, other containers could be enhanced to provide a scope as extra attribute on a each resolved IClasspathEntry. I think this would help with Maven, where one container is contributing all the libraries. It could add extra options to each individual library dynamically based on the pom scope option. In fact, the M2E could also tag source folders automatically based on its known conventions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682220</commentid>
    <comment_count>43</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2016-03-15 03:17:13 -0400</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #42)
&gt; Right now it seems an IClasspathEntry must know which source folder it
&gt; contributes too. What if source folders are renamed?

Similarly to a classpath entry of type &quot;src&quot;, the rename operation could fix the .classpath to react to that operation.


&gt; I think it should be more abstract. It should be possible to &quot;tag&quot; source
&gt; folders as well es other classpath entries with a scope, i.e. making the
&gt; attribute independent of the folder name. Then the scope build would do the
&gt; wiring based on the scope tags. It picks source folders based on tags and
&gt; highlights any usage as error coming from an entry without a matching tag.

Ok, that seems doable (attach a &quot;scopeTag&quot; attribute to classpath source entry, and reference scope tags instead of direct folders). However, what other use case did you imagine that would take advantage of it?

&gt; one container is contributing all the libraries.

I somehow believe more and more that this is actually the main reason why this support for multiple classpath was never implemented so far. JDT classpath containers are a decent mapping for Maven scopes, if m2e adopted multiple containers a while ago, a similar proposal than the one here would already have been implemented years ago...
Whether to use multiple container in m2e or not is the topic of bug 486035.
Frankly, I don&apos;t believe that it&apos;s worth going into smaller grain than classpath containers, if project uses a single classpath container, they simply cannot implement nor present scopes properly in JDT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682223</commentid>
    <comment_count>44</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2016-03-15 03:35:48 -0400</bug_when>
    <thetext>(In reply to Mickael Istria from comment #43)
&gt; Frankly, I don&apos;t believe that it&apos;s worth going into smaller grain than
&gt; classpath containers, if project uses a single classpath container, they
&gt; simply cannot implement nor present scopes properly in JDT.

You&apos;ve seen the arguments about classpath hell why multiple containers won&apos;t fly with m2e. I believe the granularity level should be IClasspathEntry. An unresolved container is a IClasspathEntry and its resolution adds IClasspathEntry. Thus I think it&apos;s not a matter of being too fine grained but just a matter of supporting all types of IClasspathEntry on the resolved classpath.

As outlined by Igor, there are flaws with regards to classpath order if two or more containers (think runtime, provided, compile time and test) are used instead of one. Although that concern may only be valid for existing projects - it is a concern in the flat classpath world that the majority of Java projects exists.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682238</commentid>
    <comment_count>45</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2016-03-15 03:57:10 -0400</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #44)
&gt; You&apos;ve seen the arguments about classpath hell why multiple containers won&apos;t
&gt; fly with m2e.
&gt; ...
&gt; As outlined by Igor, there are flaws with regards to classpath order if two
&gt; or more containers (think runtime, provided, compile time and test) are used
&gt; instead of one. Although that concern may only be valid for existing
&gt; projects - it is a concern in the flat classpath world that the majority of
&gt; Java projects exists.

I&apos;ve seen there is a concern, I&apos;ve not been convinced it&apos;s actually making it worth being a blocker for simple adoption of scopes. I&apos;m still waiting for an example to change my mind on the other bug.
But that&apos;s the story of the other bug...

&gt; I believe the granularity level should be IClasspathEntry. An
&gt; unresolved container is a IClasspathEntry and its resolution adds
&gt; IClasspathEntry.

The current grain level with my proposal isn&apos;t the container, it&apos;s the &quot;root&quot; classpath entry (entry in the .classpath) so scope restriction can be attached to individual jars, or even other source folders, as long as they are in the .classpath.
With your proposal, it would be adopter project (m2e, Gradle...) that would be in charge of annotating resolved classpath entries?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2682250</commentid>
    <comment_count>46</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2016-03-15 04:26:54 -0400</bug_when>
    <thetext>(In reply to Mickael Istria from comment #45)
&gt; With your proposal, it would be adopter project (m2e, Gradle...) that would
&gt; be in charge of annotating resolved classpath entries?

Correct. Users could tag raw entries in classpath file manually. But adopters would have a chance to manage scopes almost transparent (modifying .classpath for source folders aside) from the users.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2683501</commentid>
    <comment_count>47</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2016-03-17 03:54:53 -0400</bug_when>
    <thetext>FYI, I implemented the various suggestions made by Gunnar (thanks Gunnar!) so this appraoch should work with resolved classpath entries as well as root/raw classpath entry. That means that it&apos;s possible to put the scope per jar inside the classpaht container so it doesn&apos;t require multiple JDT classpath containers.
I hope I&apos;ll have time to try this on m2e soon -m2e annotating the jars in its container with the scope-, but if someone else is eager to do it before I can, that&apos;s highly welcome and I&apos;d be glad to help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2683508</commentid>
    <comment_count>48</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2016-03-17 04:11:50 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/68343 was merged to [master].
Commit: http://git.eclipse.org/c/e4/org.eclipse.e4.ui.git/commit/?id=314fb1c56098e642932e249b1b7dd59c69c00f2e</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>137111</bug_id>
          
          <creation_ts>2006-04-17 19:44:00 -0400</creation_ts>
          <short_desc>classpath collision for separate src / test directories</short_desc>
          <delta_ts>2006-04-17 19:46:22 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="jieryn">jieryn</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>pombredanne</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>671802</commentid>
    <comment_count>0</comment_count>
    <who name="jieryn">jieryn</who>
    <bug_when>2006-04-17 19:44:16 -0400</bug_when>
    <thetext>I prefer to keep my jUnit tests in a separate directory structure which mirrors the source directory layout exactly. I also prefer to keep the name of the jUnit testcase the same as the class name which it is testing. I find this layout to be extremely intuitive and easy to maintain; since each test is kept outside the product itself, I can easily package up a product w/out having to include my tests. By keeping a separate classpath for the src and test directories (in fact, the test is identical to the src except that it includes itself) I can maintain this logical split but keep all the benefits of having the tests inside the same package as their counterparts but without cluttering up my real src directory as well as allowing for the src and test filename to be duplicated without filesystem collisions.

Recent online discussion has validated that others also would prefer this hierarchy. Unfortunately, when both src and test directories are added into the classpath Eclipse correctly errors that the type [classname] is already defined.

Thank you for a great product!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>671804</commentid>
    <comment_count>1</comment_count>
    <who name="jieryn">jieryn</who>
    <bug_when>2006-04-17 19:46:22 -0400</bug_when>
    <thetext>I should have added, that a minimal fix for this would also include the ability to configure what type of error/warn/ignore message should be posted into the Problem panel.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>149978</bug_id>
          
          <creation_ts>2006-07-07 10:25:00 -0400</creation_ts>
          <short_desc>Eclipse background compile disrupts user input</short_desc>
          <delta_ts>2016-01-14 12:45:51 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>needinfo, performance</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="&quot;Z&quot; Zorzella">zorzella</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>eric_jodet</cc>
    
    <cc>jerome_lanneluc</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>746927</commentid>
    <comment_count>0</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2006-07-07 10:25:21 -0400</bug_when>
    <thetext>One of the coolest features of Eclipse is it&apos;s progressive background compilation (&quot;Build Automatically&quot;). The only problem I have with it is that it, often, gets in the way of actually writting code. The scenario is simple to reproduce:

1) Open a large project

2) Change a class that lots of other classes depend upon, and save

3) Immediatelly try to type more stuff

At this point, you will likely get blocked by Eclipse -- a progress dialog will appear until compilation finishes (blocking your work). The same happens if you trigger compilation with CTRL-B and try to edit the file. In fact, even if &quot;Build Automatically&quot; is disabled, saving java often takes a non-trivial amount of time (I suspect it might block on re-parsing and/or re-builing the AST, maybe ? It does not seem to be simple io bottleneck). In fact, I often have an emacs handy so I can continue working while Eclipse is doing its things...

I wish Eclipse would make use of an &quot;event queue&quot; of some sort -- so a file save (and other things) would immediatelly return (after enqueueing an event), and compilation/parsing/whatever would pick events out of the queue, and do whatever it needs without blocking user input, ever...

Z</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>795470</commentid>
    <comment_count>1</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-09-25 06:14:59 -0400</bug_when>
    <thetext>Eclipse uses a working queue, but there are some locks taken on modified files which may cause you grief here.

Please try to check the following preferences:
Preferences/General/Always run in background

and let us know if the pain is still the same. I suspect some of your issues are caused by modal dialogs. Still locking will occur, but maybe in a less blocking fashion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>795851</commentid>
    <comment_count>2</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2006-09-25 11:28:07 -0400</bug_when>
    <thetext>I do have that option enabled (that only causes things to run in background by default, rather than prompting, right?). The problem is, indeed, that some things apparently do not make (best?) use of the queue -- like modifying files, and even saving them. Another time this happens is with &quot;CTRL-SPACE&quot; completion -- every now and again it takes a long time, and while it does, it blocks all user input (can&apos;t even cancel it). 

I&apos;d trade in all my other bugs and peeves to having Eclipse never, ever prevent me from just plain typing...

Thanks,

Z</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>796044</commentid>
    <comment_count>3</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-09-25 13:07:13 -0400</bug_when>
    <thetext>Preventing from typing is very painful indeed. We will look at your scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>920232</commentid>
    <comment_count>4</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2007-04-02 12:00:23 -0400</bug_when>
    <thetext>To be investigated during 3.3 M7.

Zorzella, first do you still have the problem ? If you do, assuming you&apos;re on Windows, could you please start eclipse with the following argument: -vm &lt;path to your jdk&gt;\java.exe. This should open a DOS console. When the hang happens, press Ctrl+Break in the DOS console. Then copy/paste the thread dumps in this bug. This should tell us what the threads are doing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>927184</commentid>
    <comment_count>5</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-04-09 20:32:58 -0400</bug_when>
    <thetext>How about linux?

There are sooooo many actions that block user input, I&apos;ll have a field day. I&apos;ll try to do that for some common culprits:

* compile

* auto-complete

* open type hierarchy

the list goes on...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>934121</commentid>
    <comment_count>6</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-04-17 11:05:55 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; How about linux?
&gt; 
On a Linux box, from the &apos;eclipse&apos; sub-directory where you installed your eclipse SDK, start your eclipse session using following command line in a terminal window:
eclipse -consoleLog -refresh -data &lt;your workspace path&gt; -vm &lt;your VM path&gt;

When problem occurs, identify the first child process of the main eclipse running process and in an other terminal window, enter &apos;kill -3 &lt;child process ID&gt;&apos; as root.

Then you should see VM threads dump displayed in the terminal window from where you launched eclipse.

HTH
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>959516</commentid>
    <comment_count>7</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-11 20:28:35 -0400</bug_when>
    <thetext>My project is large and needs extra memory, so I started Eclipse with 

$ /usr/local/eclipse-3.3M7/eclipse -consoleLog -refresh -vm /usr/bin/java -data /usr/local/src/myworkspace -vmargs -server -Xms1000M -Xmx1500M

1) When eclipse opened, I went to package explorer and unfolded the tree a couple of times. Each time it hang the UI while the tree was being calculated (for as long as some 20 seconds). Thread dump at 1_UI_WAITS_ON_TREE_UNFOLD.txt

2) I had previously cleaned this project and &quot;Build Automatically&quot; is disabled. Then I hit CTRL-B (compile), typed some stuff in a class and hit CTRL-S (save). It gave me the &quot;User Operation is Waiting&quot;. Thread dump at 2_SAVE_WAITS_ON_BUILD.txt

3) I hit the &quot;stop&quot; button for the &quot;save&quot; task so I could do a couple more fun things. I, then, opened another class and tried to type. Another &quot;UOIA&quot; dialog was presented with &quot;Waiting User Operation&quot; task below the &quot;Building Workspace&quot;. Thread dump is at 3_TYPING_WAITS_ON_BUILD.txt

After the build was complete, it showed me the &quot;read-only&quot; dialog. This is because I normally have Perforce, which marks all files are read-only until you check them out (I disabled it right after experiment &quot;1&quot; to not have it interfere with these experiments). Maybe this filesystem interaction is what&apos;s really bothering the Build process.

I waited until the build was complete to proceed.

4) Finally, I asked for the type hierarchy of java.lang.Object. This started this &quot;Creating type hierarchy&quot; task with a progress bar in the bottom of Eclipse, and transformed the cursor into a sandclock. I could not do anything (not even cancell the operation) until the hierarchy was printed. Thread dump at 4_ECLIPSE_WAITS_ON_F4.txt. In fact, it eventually froze the whole UI (no repainting).

I could go on and on. Let me know if you want more examples. All the actions that deal with Perforce block the world. Even a &quot;clean&quot; blocks file saves.

Z</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>959517</commentid>
    <comment_count>8</comment_count>
      <attachid>66956</attachid>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-11 20:29:24 -0400</bug_when>
    <thetext>Created attachment 66956
Thread dump for tree unfold</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>959518</commentid>
    <comment_count>9</comment_count>
      <attachid>66957</attachid>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-11 20:29:54 -0400</bug_when>
    <thetext>Created attachment 66957
Thread dump for save</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>959519</commentid>
    <comment_count>10</comment_count>
      <attachid>66958</attachid>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-11 20:30:21 -0400</bug_when>
    <thetext>Created attachment 66958
Thread dump for typing</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>959521</commentid>
    <comment_count>11</comment_count>
      <attachid>66959</attachid>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-11 20:30:49 -0400</bug_when>
    <thetext>Created attachment 66959
Thread dump for open type hierarchy</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>960008</commentid>
    <comment_count>12</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-05-14 04:27:29 -0400</bug_when>
    <thetext>Sorry, I can&apos;t remember why I added the [reconcile] (invalid) prefix!?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>960017</commentid>
    <comment_count>13</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-05-14 04:40:25 -0400</bug_when>
    <thetext>Can you confirm that you made these thread dumps using 3.3 M7?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>960455</commentid>
    <comment_count>14</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-14 11:12:23 -0400</bug_when>
    <thetext>Yes, 3.3M7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>962968</commentid>
    <comment_count>15</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-05-16 04:47:58 -0400</bug_when>
    <thetext>I cannot reproduce the symptoms you described in comment 7 using 3.3 M7.
I tested your scenarios on a Eclipse full source workspace:
1) Indexes are not rebuild systematically on session startup
2) Is normal behavior, build locks project resources and so nothing can be modify in this project until it&apos;s finished...
3) I can cancel the save and continue to type without any problem. I do not feel reconciling slower during this operation
4) I can also cancel the Open Type Hierarchy pressing the red button on progress displayed in status bar...

So, either there&apos;s something special in your project making these actions really slow or it is a specific Mac/OS issue... I&apos;ll try these scenarios on a Linux box to see whether it makes a difference or not.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>972358</commentid>
    <comment_count>16</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-05-24 05:10:15 -0400</bug_when>
    <thetext>I did same tests on our Linux box and also didn&apos;t get any troubles you described.
Any other hints to help us to understand what happen with your config?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>973799</commentid>
    <comment_count>17</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-24 17:34:31 -0400</bug_when>
    <thetext>I think there are 2 distinct issues here. Point by point, first:

&gt; 1) Indexes are not rebuild systematically on session startup

Sorry. I don&apos;t understand this remark, or how it relates to this bug.

&gt; 2) Is normal behavior, build locks project resources and so nothing can
&gt; be modify in this project until it&apos;s finished...

If I understand what you say, this is part of what I am reporting as a bug. I want the build to not stop me from typing. It&apos;s called &quot;Background Compilation&quot;, right?

&gt; 3) I can cancel the save and continue to type without any problem. I do not
&gt; feel reconciling slower during this operation
&gt; 4) I can also cancel the Open Type Hierarchy pressing the red button on
&gt; progress displayed in status bar...

So the two issues are:

A) you say that, at any given point in time, you are able to hit the &quot;red button&quot; to stop Eclipse from doing what it is doing so you can do what you actually want to do. This is suboptimal. There are several things that already behave much better: like, running a JUnit test does not prevent you from doing any work. Why would &quot;Open Type Hierarchy&quot; do it?

B) The second issue is that you are saying you can always hit the red button, which is certainly not my experience. I&apos;ll try this in a less complex computer (like, with no NFS/automount, etc). To confirm: wou&apos;re saying that if I, say, download all Eclipse sources (to take a simple example of a large project), and it F4 on java.lang.Object I won&apos;t cause Eclipse to freeze altogether, but instead I&apos;ll be able to abort it with the red button, right?



</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>973849</commentid>
    <comment_count>18</comment_count>
    <who name="&quot;Z&quot; Zorzella">zorzella</who>
    <bug_when>2007-05-24 18:41:41 -0400</bug_when>
    <thetext>Ok, I&apos;m trying it in a Windows (XP) computer, and the problems seem a little different, but at the same time the same. This is what I did:

- CVS checkedout all of Eclipse

the best started compiling

- Opened java.lang.Object, hit F4. This behaved a little better than my last experiment, for the entire UI was &quot;sandclock&quot;ed (can&apos;t change tabs, see menus, or anything), except for the red button. I pressed it and some life came back to Eclipse

- While it was still compiling, I hit &quot;Ctrl-N&quot; and &quot;New Project&quot;, named it &quot;test&quot;. The &quot;progress dialog&quot; showed up with Compilation as the first item. I hit the &quot;red&quot; button, and the &quot;new project&quot; dialog came back all greyed out. Only when compilation finished (a couple of minutes later), the thing came out of that. 

- created a new file, type a little, I told it to clean all projects and tried to save. Again the dialog. Again I hit the red button.

I could not quite make the thing freeze quite so miserably, but it might be because the Eclipse sources are split in these much smaller parts. My project is this huge beast. Maybe Eclipse has a better time dealing with the project dependencies this way. I don&apos;t know. I&apos;ll try to find out a large, monolithic open java project out there to experiment with. 

Do you guys have any pre-setup &quot;large random beasty monolithic&quot; project to try these things on?</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>66956</attachid>
            <date>2007-05-11 20:29:00 -0400</date>
            <delta_ts>2007-05-11 20:29:24 -0400</delta_ts>
            <desc>Thread dump for tree unfold</desc>
            <filename>1_UI_WAITS_ON_TREE_UNFOLD.txt</filename>
            <type>text/plain</type>
            <size>18526</size>
            <attacher name="&quot;Z&quot; Zorzella">zorzella</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>66957</attachid>
            <date>2007-05-11 20:29:00 -0400</date>
            <delta_ts>2007-05-11 20:29:54 -0400</delta_ts>
            <desc>Thread dump for save</desc>
            <filename>2_SAVE_WAITS_ON_BUILD.txt</filename>
            <type>text/plain</type>
            <size>25340</size>
            <attacher name="&quot;Z&quot; Zorzella">zorzella</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>66958</attachid>
            <date>2007-05-11 20:30:00 -0400</date>
            <delta_ts>2007-05-11 20:30:21 -0400</delta_ts>
            <desc>Thread dump for typing</desc>
            <filename>3_TYPING_WAITS_ON_BUILD.txt</filename>
            <type>text/plain</type>
            <size>16998</size>
            <attacher name="&quot;Z&quot; Zorzella">zorzella</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>66959</attachid>
            <date>2007-05-11 20:30:00 -0400</date>
            <delta_ts>2007-05-11 20:30:49 -0400</delta_ts>
            <desc>Thread dump for open type hierarchy</desc>
            <filename>4_ECLIPSE_WAITS_ON_F4.txt</filename>
            <type>text/plain</type>
            <size>17764</size>
            <attacher name="&quot;Z&quot; Zorzella">zorzella</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>154479</bug_id>
          
          <creation_ts>2006-08-20 14:59:00 -0400</creation_ts>
          <short_desc>Dependent projects added via classpath container not being rebuild</short_desc>
          <delta_ts>2011-03-29 09:15:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Eugene Kuleshov">ekuleshov</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jerome_lanneluc</cc>
    
    <cc>mlists</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>scott</cc>
    
    <cc>Tod_Creasey</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>770654</commentid>
    <comment_count>0</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-08-20 14:59:47 -0400</bug_when>
    <thetext>I am working on Maven support for Eclipse. I have implemented custom classpath container that calculating classpath entries based on Maven&apos;s descriptor. It can also automatically link other Eclipse projects trough adding project entries into the classpath container. In some sense it is similar to what had been done for PDE. The major difference is that Maven have support for transitive dependencies, so if project1 has dependency1 and 2 and project2 has dependency on project1 it should automatically inherit dependencies 1 and 2, though those are coming from project1 (unless they are explicitly excluded).

The problem I am facing is that when classpath container on projec1 is changed, project2 is not being rebuild. So, it looks like builder is not taking into the account project dependencies unless they are explicitly defined in .classpath</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>770655</commentid>
    <comment_count>1</comment_count>
      <attachid>48257</attachid>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-08-20 15:03:53 -0400</bug_when>
    <thetext>Created attachment 48257
classpath containers with project dependencies

This is how it look now. spring-core jar in project2 is showing a wrong version after container in project1 had been updated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>772695</commentid>
    <comment_count>2</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2006-08-23 05:44:19 -0400</bug_when>
    <thetext>Is JavaCore#setClasspathContainer(...) being called after the container is changed ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>772882</commentid>
    <comment_count>3</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-08-23 10:41:23 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Is JavaCore#setClasspathContainer(...) being called after the container is
&gt; changed ?

Yes. Otherwis it is won&apos;t be ipdated. I am not using any internal API... I can introspect container&apos;s content trough java model and data changes looks ok to me. That is why I suspected issue in dependency resolver.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>838310</commentid>
    <comment_count>4</comment_count>
    <who name="Tod Creasey">Tod_Creasey</who>
    <bug_when>2006-11-27 09:23:50 -0500</bug_when>
    <thetext>Does this problem happen on platforms other than Vista?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>838575</commentid>
    <comment_count>5</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-11-27 13:24:24 -0500</bug_when>
    <thetext>I actually have Windows XP. For some reason Vista was set by Mylar&apos;s bugzilla editor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>859068</commentid>
    <comment_count>6</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2007-01-06 02:10:45 -0500</bug_when>
    <thetext>Any chance this can be looked at in 3.3 timeframe? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>860293</commentid>
    <comment_count>7</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2007-01-09 12:41:51 -0500</bug_when>
    <thetext>Looking at the code, I don&apos;t see what would cause this problem.
Could you please provide a small plugin that implements a container initializer that shows the problem, so that I can try to debug it ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>869031</commentid>
    <comment_count>8</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2007-01-18 03:46:03 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; Looking at the code, I don&apos;t see what would cause this problem.
&gt; Could you please provide a small plugin that implements a container initializer
&gt; that shows the problem, so that I can try to debug it ?

Jerome, I am not sure if I can extract small container for you to test with.
But I can point you to the open source project that you can test with.

You can get code either from the update site at http://m2eclipse.codehaus.org/
or from Subversion repository at http://svn.codehaus.org/m2eclipse/trunk/

If that is ok, I can prepare example Eclipse projects for you that will use that container.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>869034</commentid>
    <comment_count>9</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2007-01-18 03:57:09 -0500</bug_when>
    <thetext>I also noticed that if I have two Java projects projectA and projectB, and when projectB has dependencies like this:

projectA
projectB
+- src
+- Maven container
   +- junit.jar
   +- projectA &lt;-- project entry in classpath container

Then closing or deleting projectA does NOT trigger build for projectB. I.e. my builder registered in projectB is not being invoked, even so projectB does show the error that required project is missing.

I though that it would trigger builder automatically and not even sure how do I force build from my code in this situation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1556146</commentid>
    <comment_count>10</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-07-21 15:57:57 -0400</bug_when>
    <thetext>Kent, please investigate.
If not reproducable, please close as WORKSFORME.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>48257</attachid>
            <date>2006-08-20 15:03:00 -0400</date>
            <delta_ts>2006-08-20 15:03:53 -0400</delta_ts>
            <desc>classpath containers with project dependencies</desc>
            <filename>m2containers.gif</filename>
            <type>image/gif</type>
            <size>57812</size>
            <attacher name="Eugene Kuleshov">ekuleshov</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>155312</bug_id>
          
          <creation_ts>2006-08-26 12:04:00 -0400</creation_ts>
          <short_desc>[compiler] Feature-Request:: static check for unecessary variable assignment</short_desc>
          <delta_ts>2008-08-22 11:18:21 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Michael Schneider">m_schnei</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>benjamin.muskalla</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>775588</commentid>
    <comment_count>0</comment_count>
    <who name="Michael Schneider">m_schnei</who>
    <bug_when>2006-08-26 12:04:57 -0400</bug_when>
    <thetext>I propose adding a static check in Java code for the following situation:

    x = 42;
    
    // ... no reading of variable &apos;x&apos;

    x = 100;

Here, variable x is assigned a value &apos;42&apos;, which is never read before reassigning the value &apos;100&apos; to x. This is never useful, but sometimes it is a sign of an error. As an example, imagine a JUnit testcase with variables x and y in the testfixture, and the two assignments above within the setUp() routine. Most probably, the author wanted to write

    x = 42;
    y = 100;

but accidentally assigned value &apos;100&apos; to variable &apos;x&apos; instead of &apos;y&apos;. This might become a hard to find error.

I propose adding this static check to the Preferences, under

  Java -&gt; Compiler -&gt; Errors/Warnings -&gt; Unnecessary Code

Michael</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>159839</bug_id>
          
          <creation_ts>2006-10-05 03:18:00 -0400</creation_ts>
          <short_desc>Attach local Javadoc archive using a relative path or variable</short_desc>
          <delta_ts>2014-04-15 20:15:01 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Nelson">cnelson</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>david</cc>
    
    <cc>dtrebbien</cc>
    
    <cc>fgiust</cc>
    
    <cc>jacob</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>kevin</cc>
    
    <cc>markus_keller</cc>
    
    <cc>mirth18</cc>
    
    <cc>rhuddusa</cc>
    
    <cc>user</cc>
          
          <votes>14</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>804064</commentid>
    <comment_count>0</comment_count>
    <who name="Christian Nelson">cnelson</who>
    <bug_when>2006-10-05 03:18:20 -0400</bug_when>
    <thetext>When associating Javadoc to a library, there is no way to make a relative association.  All associations are either URLs to local or remote resources, or &quot;Javdoc in archive&quot; which also captures an absolute path.  &quot;Javadoc in archive&quot; even captures an absolute path when the Javadoc archive is located in the workspace.

This prevents teams from sharing projects files that make reference to Javadoc for 3rd party libs that live within the project&apos;s workspace, unless all team members use the same drive/directory layout.

Additionally, there is no way to extend a variable (like one can with source) for Javadoc.

It&apos;s desirable is some situations to store the source and Javadoc with the 3rd party libraries within the project.  The team can all share the benefits of navigating source and documentation without having to maintain it individually, and without having to actively hit the internet for public documentation.

Regards,
Christian</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1301237</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2008-07-30 10:47:02 -0400</bug_when>
    <thetext>*** Bug 213366 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1878305</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-02-04 06:35:58 -0500</bug_when>
    <thetext>*** Bug 122805 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226395</commentid>
    <comment_count>3</comment_count>
    <who name="Brad Clarke">user</who>
    <bug_when>2013-03-05 14:23:03 -0500</bug_when>
    <thetext>This is an example of the problem using JUnit in 4.2.2. The library itself and the source jar are put in .classpath using project-relative paths, but the javadoc jar path is workspace relative and includes a hard coded project name:

&lt;classpath&gt;
	&lt;classpathentry kind=&quot;src&quot; path=&quot;src&quot;/&gt;
	&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;lib/junit-4.11.jar&quot; sourcepath=&quot;lib/junit-4.11-sources.jar&quot;&gt;
		&lt;attributes&gt;
			&lt;attribute name=&quot;javadoc_location&quot; value=&quot;jar:platform:/resource/MyProject/lib/junit-4.11-javadoc.jar!/&quot;/&gt;
		&lt;/attributes&gt;
	&lt;/classpathentry&gt;
	&lt;classpathentry kind=&quot;output&quot; path=&quot;bin&quot;/&gt;
&lt;/classpath&gt;</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>163365</bug_id>
          
          <creation_ts>2006-11-03 13:09:00 -0500</creation_ts>
          <short_desc>[compiler] problem methods can throw java.lang.VerifyError at runtime</short_desc>
          <delta_ts>2015-11-23 14:46:30 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 2000</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jon Barrilleaux">jonb</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>823028</commentid>
    <comment_count>0</comment_count>
    <who name="Jon Barrilleaux">jonb</who>
    <bug_when>2006-11-03 13:09:16 -0500</bug_when>
    <thetext>This is a new one. I&apos;m using the latest integration build, eclipse-SDK-I20061102-1715-win32.zip


java.lang.VerifyError: class gumbo2.graphic.math.Matrix4$Impl overrides final method .
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClassInternal(Unknown Source)
	at gumbo2.test.graphic.math.Matrix4Test.setUp(Matrix4Test.java:554)
	at junit.framework.TestCase.runBare(TestCase.java:125)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>823029</commentid>
    <comment_count>1</comment_count>
    <who name="Jon Barrilleaux">jonb</who>
    <bug_when>2006-11-03 13:16:44 -0500</bug_when>
    <thetext>Of course, right after i submitted the bug I noticed that a dependent class had a compiler error because it was trying to override a final method.  I removed the offending code and all is now right with the world.

However, shouldn&apos;t I have gotten a &quot;compiler error&quot; instead of a &quot;verify error&quot; when I tried to run the bad code?

(I changed the severity level of the bug to &quot;normal&quot;, and will let you decide whether this is really a bug or not.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>823051</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-11-03 13:40:06 -0500</bug_when>
    <thetext>Could you please provide a test case to reproduce this issue?
This looks like a bug in the problem method support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>823123</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-11-03 15:07:13 -0500</bug_when>
    <thetext>*** Bug 163378 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>824582</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-11-07 09:41:07 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Of course, right after i submitted the bug I noticed that a dependent class had
&gt; a compiler error because it was trying to override a final method.  I removed
&gt; the offending code and all is now right with the world.
This would be related to the problem method support.

&gt; However, shouldn&apos;t I have gotten a &quot;compiler error&quot; instead of a &quot;verify error&quot;
&gt; when I tried to run the bad code?
Definitely! You should never get a VerifyError. You should get an unresolved compilation error.

&gt; (I changed the severity level of the bug to &quot;normal&quot;, and will let you decide
&gt; whether this is really a bug or not.)
This is definitely a bug and a test case to reproduce it would be welcome.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>824610</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-11-07 10:13:43 -0500</bug_when>
    <thetext>Reproduced with:
class Y {
	final public void foo() {
	}
}
public class X extends Y {

	public void foo() {}
	
	public static void main(String[] args) {
		new X().foo();
	}
}

Not sure what is the best way to fix this. I&apos;ll investigate. Let me know if this looks like the code you had.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>824616</commentid>
    <comment_count>6</comment_count>
    <who name="Jon Barrilleaux">jonb</who>
    <bug_when>2006-11-07 10:22:09 -0500</bug_when>
    <thetext>I already posted my code demonstrating the problem with instructions on what to
run and where to look in the original bug....

https://bugs.eclipse.org/bugs/show_bug.cgi?id=163378

I see that you tried to boil it down.  I&apos;ll take a look at this in the next day or so (its election day here and must go fight for democracy).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>824685</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-11-07 11:30:53 -0500</bug_when>
    <thetext>In this case the only way this can be fixed would be to report the compilation error on the type (not inside a method) and remove the method from the problem type.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>172118</bug_id>
          
          <creation_ts>2007-01-30 03:27:00 -0500</creation_ts>
          <short_desc>[classpath] Extension point for plugin to contribute libraries used in class path.</short_desc>
          <delta_ts>2007-06-20 05:10:07 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Willson">johnwillsons</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>873059</commentid>
    <comment_count>0</comment_count>
    <who name="John Willson">johnwillsons</who>
    <bug_when>2007-01-30 03:27:32 -0500</bug_when>
    <thetext>There is extension point for plugin to contribute classpath container. But in many cases, plugin just want to provide set of jars for use as a library. JUnit can be a best example.
So we need a extension point for plugin to contribute libraries using just description.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>873064</commentid>
    <comment_count>1</comment_count>
      <attachid>57774</attachid>
    <who name="John Willson">johnwillsons</who>
    <bug_when>2007-01-30 03:32:22 -0500</bug_when>
    <thetext>Created attachment 57774
plugin providing pluggable library extension support

This contains an annotation based configuration to objects library.
Anyway, the ideas are there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>873066</commentid>
    <comment_count>2</comment_count>
      <attachid>57775</attachid>
    <who name="John Willson">johnwillsons</who>
    <bug_when>2007-01-30 03:37:27 -0500</bug_when>
    <thetext>Created attachment 57775
An example of plugin providing library

This is an example of plugin providing tapestry libraries.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>873072</commentid>
    <comment_count>3</comment_count>
    <who name="John Willson">johnwillsons</who>
    <bug_when>2007-01-30 03:41:26 -0500</bug_when>
    <thetext>The attachment plugin only support library classpath container, but it&apos;s easy to add UI support to select a provided library. 
Anyway you need to add following in .classpath file to see it acting.
&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.library.pluggable.classpathContainerInitializer/org.apache.tapestry/tapestry5&quot;/&gt;
</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>57774</attachid>
            <date>2007-01-30 03:32:00 -0500</date>
            <delta_ts>2007-01-30 03:32:22 -0500</delta_ts>
            <desc>plugin providing pluggable library extension support</desc>
            <filename>org.eclipse.jdt.library.pluggable.zip</filename>
            <type>application/zip</type>
            <size>96139</size>
            <attacher name="John Willson">johnwillsons</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>57775</attachid>
            <date>2007-01-30 03:37:00 -0500</date>
            <delta_ts>2007-01-30 03:37:27 -0500</delta_ts>
            <desc>An example of plugin providing library</desc>
            <filename>org.apache.tapestry.zip</filename>
            <type>application/zip</type>
            <size>599125</size>
            <attacher name="John Willson">johnwillsons</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>208171</bug_id>
          
          <creation_ts>2007-10-30 22:59:00 -0400</creation_ts>
          <short_desc>[sourcemapper] Support multiple explicit roots in source archive</short_desc>
          <delta_ts>2011-03-29 09:08:42 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Darin Wright">darin.eclipse</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>andrew.niefer</cc>
    
    <cc>baumanbr</cc>
    
    <cc>cwindatt</cc>
    
    <cc>darin.eclipse</cc>
    
    <cc>jerome_lanneluc</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1091389</commentid>
    <comment_count>0</comment_count>
    <who name="Darin Wright">darin.eclipse</who>
    <bug_when>2007-10-30 22:59:02 -0400</bug_when>
    <thetext>Currently, a source archive attachment for a binary jar can have one explicit root, or multiple auto-detected roots. It would be useful to be able to have mutliple explicit roots, or be able to spec an explicit root within the archive where auto-detection of roots can start from.

For example, to ship source for JUnit 3.8 and JUnit 4.0 in the same archive, auto-detect would not work well (since source names overlap). It would be possible with distinct/explicit roots. One could imagine a similar scenario where each explicit root could have sub-roots that need auto-detection.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1091392</commentid>
    <comment_count>1</comment_count>
    <who name="Darin Wright">darin.eclipse</who>
    <bug_when>2007-10-30 23:02:10 -0400</bug_when>
    <thetext>Also see bug 202462. There are cases where plug-ins may want the flexibility to bundle source in the same archive.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1109668</commentid>
    <comment_count>2</comment_count>
    <who name="Brian Bauman">baumanbr</who>
    <bug_when>2007-11-29 11:59:14 -0500</bug_when>
    <thetext>If we could do this, it would help clean up extra folders in a binary plug-in project that might otherwise confuse users (ie. why is there a second MANIFEST.MF in my project?).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1110388</commentid>
    <comment_count>3</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2007-11-30 10:22:47 -0500</bug_when>
    <thetext>

*** This bug has been marked as a duplicate of bug 173641 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1110490</commentid>
    <comment_count>4</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2007-11-30 12:00:21 -0500</bug_when>
    <thetext>Oops, this is not a dup of bug 173641 (which is about specifying multiple source attachments)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1329269</commentid>
    <comment_count>5</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-11 10:52:49 -0400</bug_when>
    <thetext>Targeting M5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1404269</commentid>
    <comment_count>6</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2009-01-09 05:12:46 -0500</bug_when>
    <thetext>Not for 3.5</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>224708</bug_id>
          
          <creation_ts>2008-03-28 14:42:00 -0400</creation_ts>
          <short_desc>Ability to mark source folder as test sources</short_desc>
          <delta_ts>2015-12-07 06:57:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=356450</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>helpwanted</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>77980</blocked>
    
    <blocked>270375</blocked>
    
    <blocked>332602</blocked>
    
    <blocked>376616</blocked>
    
    <blocked>414645</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Amiruddin Nagri">amir.nagri</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>amir.nagri</cc>
    
    <cc>brockj</cc>
    
    <cc>cbeams</cc>
    
    <cc>christian.kesselheim</cc>
    
    <cc>christian</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>darin.eclipse</cc>
    
    <cc>digulla</cc>
    
    <cc>divers</cc>
    
    <cc>eclipse.org</cc>
    
    <cc>eclipse</cc>
    
    <cc>georgmueller</cc>
    
    <cc>gregory.amerson</cc>
    
    <cc>groar</cc>
    
    <cc>grzegorzborkowski</cc>
    
    <cc>ivalo</cc>
    
    <cc>jal</cc>
    
    <cc>jarthana</cc>
    
    <cc>joerg.sesterhenn</cc>
    
    <cc>Joerg.Thoennes</cc>
    
    <cc>jorgen.rygh</cc>
    
    <cc>kariem</cc>
    
    <cc>kdevolder</cc>
    
    <cc>Konstantin.Scheglov</cc>
    
    <cc>m.turra</cc>
    
    <cc>markhobson</cc>
    
    <cc>markus_keller</cc>
    
    <cc>markward.schubert</cc>
    
    <cc>mauromol</cc>
    
    <cc>mistria</cc>
    
    <cc>mlists</cc>
    
    <cc>mohsens</cc>
    
    <cc>neale</cc>
    
    <cc>nikop</cc>
    
    <cc>qualidafial</cc>
    
    <cc>robert.munteanu</cc>
    
    <cc>rwinch</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>sslavic</cc>
    
    <cc>stanio</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>45</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1188036</commentid>
    <comment_count>0</comment_count>
    <who name="Amiruddin Nagri">amir.nagri</who>
    <bug_when>2008-03-28 14:42:04 -0400</bug_when>
    <thetext>If there is an ability to mark source folder as test sources. The behavior can be
- The test sources can be optionally exported to the projects dependent on this project
- For a web application, the test classes are not compiled and put into WEB-INF/classes folder
- The source folder classes are independent of test sources</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1196755</commentid>
    <comment_count>1</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-04-08 10:32:27 -0400</bug_when>
    <thetext>This will likely be post 3.4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1300163</commentid>
    <comment_count>2</comment_count>
    <who name="Grzegorz Borkowski">grzegorzborkowski</who>
    <bug_when>2008-07-29 04:38:24 -0400</bug_when>
    <thetext>In the past, I usually worked with NetBeans. For some time, I&apos;m experimenting with Eclipse too. There is one thing in Eclipse which makes me crazy and in some cases is real showstopper: lack of ability of mark some source folders as &quot;main&quot; and other as &quot;test&quot;. This is standard in NetBeans: you have some java sources structure, and parallel test sources structure. If i put, for example, log4j.properties file or persistence.xml file into sources hierarchy, and the same file with different settings in test files, then everything works as I expect: when i run a proejct, the file from main sources is used (&quot;production file&quot;). When I run unit tests, the file from tests sources overrides the main file. So, for example, I have log4j configuration file with DEBUG level for running tests, and with WARN or INFO for main sources (for production). Similarly, the persistence.xml file for production uses Oracle database, and for tests uses HSQLDb database, etc.
This is the most standard procedure for anybody coming from NetBeans word. I cannot imagine how it can be done differently. 
When I try to do similar setup on Eclipse, I&apos;m lost. I&apos;ve searched many Eclipse forums, no hint found. Strange is, that it seems that nobody in Eclipse has such problem! Is there some simple workaround for this? How do you setup projects for such usecases in Eclipse? 
For me, it is one of the biggest shortcomings of Eclipse. I really believe it should be implemented asap.
Those are my requirements for implementation:
1. Each source folder (from build path) can be marked as &quot;test sources folder&quot;. Sources folders not marked are treated as &quot;main sources&quot;.
2. If you run any file from main sources (with e.g. &quot;run as Java application&quot;) then test sources are not visible on classpath
3. If you run any file from test sources (with w.g. &quot;run as JUnit test&quot;) then test sources are visible on classpath before main sources (for 2 files with the same name, the one from test sources is used)
4. By default, when building jars/wars etc test sources are not exported. 
5. By default, test sources are build into different directory than main sources (e.g. main sources into &quot;bin/main&quot;, test sources into &quot;bin/test&quot;, or similar)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1316525</commentid>
    <comment_count>3</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-08-21 06:47:04 -0400</bug_when>
    <thetext>(In reply to comment #2)
Grzegorz, if I understand you correctly, your request is slightly different than the original request. It sounds like you want to configure the classpath at runtime (where the original request is to configure it at build time).

I believe you can already achieve what you want by editing the Classpath tab of your JUnit&apos;s Run configuration. To do so:
1. Run &gt; Run Configuration
2. Select your JUnit&apos;s Run configuration
3. Go to the Classpath tab
4. Select User Entries
5. Press Advanced
6. Select Add Folder, then OK
7. Select your test folder, then OK
8. Press Up to put it first on the classpath

If this doesn&apos;t work for you, please enter a new bug against JDT/Debug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1317163</commentid>
    <comment_count>4</comment_count>
    <who name="Amiruddin Nagri">amir.nagri</who>
    <bug_when>2008-08-21 23:13:58 -0400</bug_when>
    <thetext>Hi Jerome,

There can we workarounds for achieving the same functionality, but it will be really good if it comes as a feature in eclipse. Since other IDEs also have similar functionality, not having this in eclipse is surprising. A lot of other eclipse users also have raised similar issues and i am sure a lot of them are waiting to see this feature in eclipse. So it will be great to have it as a feature.

Thanks,
Amiruddin Nagri</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1317253</commentid>
    <comment_count>5</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-08-22 04:11:38 -0400</bug_when>
    <thetext>(In reply to comment #4)
Amiruddin, I was just offering a workaround for Grzegorz&apos;s test case. However your request seems a little bit different. It sounds a good idea but I would need a more detailed description of what you expect to assess the work needed on this feature. So can you please clarify your request:

&gt; - The test sources can be optionally exported to the projects dependent on 
&gt;   this project
How does this work? Is it when you mark the source folder as test folder that you export it to dependent projects?

&gt; - For a web application, the test classes are not compiled and put into
&gt;   WEB-INF/classes folder
You can already defined a separate output folder per source folder. Are you asking that the setup of this separate output folder be done automatically when the folder is marked as a test folder?

&gt; - The source folder classes are independent of test sources
What do you mean? What source folder classes?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1317280</commentid>
    <comment_count>6</comment_count>
    <who name="Grzegorz Borkowski">grzegorzborkowski</who>
    <bug_when>2008-08-22 05:01:13 -0400</bug_when>
    <thetext>Jerome, 
Thanks for answer, but it still does not work for me.
Let&apos;s assume simplest case: I have project with class A, which loads some value from property file a.properties. Then I create test class TestA, which should use overwritten file a.properties (properties file stored on classpath used only for tests, with different values for the same key).
So I create New Java Project with source folder &quot;src&quot;. I put my class A and a.properties there. I run the project with Run as Java Appliction, it reads the values from a.properties file. Ok.
Now I want to create test class and second a.properties file.
So I create folder &apos;test&apos; in my project, but not add it to project source folders, because I don&apos;t want to have on classpath for standard classes. I create TestA class in this folder - Eclipse warns me that this folder is not source folder. Hmm. I then put in the same place copy of a.properties with changed values.
Now I do TestA-&gt; run as JUNit test, and follow your instructions: classpath-&gt;advanced-&gt;add folders-&gt;I add &apos;test&apos; folder-&gt; move it up. After this, Eclipse claims that there is no class &apos;TestA&apos; on classpath, I cannot run it. I&apos;m stuck here.
Maybe Eclipse needs .class files, and my test folder contains only .java files - maybe this is a problem? but how to fix it? if I don&apos;t mark it as source folder, probably eclipse will not compile it. If I do mark it, it will be visible to standard classes, and I don&apos;t want it.
So I don&apos;t really know how to handle it.

BTW: marking source folders as &quot;source&quot; or &quot;test&quot; is SEMANTICALLY important: this is how it is done in NetBeans, this is how maven do: they assume the normal java projects have two seperate hierarchies of classes: main and test, and their role and meaning is very different. test depends on main, but not other way round. main  is exported, test is not, e.g. main is put under WEB-INF/classes, test is not. etc... Those tools will know how to do it, because they will KNOW which folders play role of main or test. Eclipse won&apos;t.

Even if you are able to do it somehow in Eclipse (though I still don&apos;t  know how), Eclipse will not know anything about semantics of such setup.
This is similar to Ant vs Maven: you may build project with both of them, but maven is better, because it gives you access to semantics of the setup, so e.g. IDE using Maven will automatically know what is the classpath, which is not easy in case of Ant.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1317297</commentid>
    <comment_count>7</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-08-22 05:29:04 -0400</bug_when>
    <thetext>(In reply to comment #6)
Thanks for the explanation Grzegorz. I think I start understanding the request now. I&apos;ll see what we can do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1318138</commentid>
    <comment_count>8</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-08-25 06:23:15 -0400</bug_when>
    <thetext>*** Bug 166321 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1318932</commentid>
    <comment_count>9</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-08-26 05:06:24 -0400</bug_when>
    <thetext>*** Bug 220577 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1329248</commentid>
    <comment_count>10</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-11 10:33:01 -0400</bug_when>
    <thetext>Investigate for M4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330165</commentid>
    <comment_count>11</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2008-09-12 08:55:27 -0400</bug_when>
    <thetext>Isn&apos;t this a duplicate of bug #49611?

The good news is that this enhancement appears in 3.5 plan (http://www.eclipse.org/jdt/core/r3.5/plan.php) while the mentioned older report is marked as &quot;WONTFIX&quot;...

Mauro.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330728</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2008-09-13 04:09:30 -0400</bug_when>
    <thetext>*** Bug 246956 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330729</commentid>
    <comment_count>13</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2008-09-13 04:10:16 -0400</bug_when>
    <thetext>See also bug 77980.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1346710</commentid>
    <comment_count>14</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2008-10-09 03:23:10 -0400</bug_when>
    <thetext>Jérome, can you comment on whether the solution for this bug would cover the scenario from comment 77980? I doubt it, especially the case that two classes with the same name are in the project (one real X and one test class X that tests X).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1346919</commentid>
    <comment_count>15</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-10-09 09:33:18 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; Jérome, can you comment on whether the solution for this bug would cover the
&gt; scenario from comment 77980? I doubt it, especially the case that two classes
&gt; with the same name are in the project (one real X and one test class X that
&gt; tests X).
&gt; 

I doubt it would cover bug 77980 as well since JDT/Core doesn&apos;t know about JUnit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1346933</commentid>
    <comment_count>16</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2008-10-09 09:43:50 -0400</bug_when>
    <thetext>&gt;I doubt it, especially the case that two classes
&gt; with the same name are in the project
That was actually wrong: the test class gets a different name.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1346934</commentid>
    <comment_count>17</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2008-10-09 09:45:44 -0400</bug_when>
    <thetext>&gt;I doubt it would cover bug 77980 as well since JDT/Core doesn&apos;t know about
&gt;JUnit.
Right, but to resolve bug 77980 it would help if we could not just mark the folder as test folder but also map it to 0..n source folders.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1401438</commentid>
    <comment_count>18</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2009-01-06 11:17:02 -0500</bug_when>
    <thetext>This could not make it for M4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1452807</commentid>
    <comment_count>19</comment_count>
    <who name="Neale Upstone">neale</who>
    <bug_when>2009-03-16 04:30:20 -0400</bug_when>
    <thetext>Any chance of seeing this before 3.5 gets frozen?

It was on the plan.

At the very least, it would be good to get some of the core defined, which would allow tools such as SpringIDE and M4e etc to provide their own UI for now.

As someone who&apos;s hopping between IDEA and Eclipse, I&apos;m certainly keen that Eclipse e4 is a match for some of the more popular features of IDEA that are so far missing... this one included.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1452818</commentid>
    <comment_count>20</comment_count>
    <who name="Grzegorz Borkowski">grzegorzborkowski</who>
    <bug_when>2009-03-16 04:41:49 -0400</bug_when>
    <thetext>I have similar feelings: I&apos;m hopping between Eclipse and NetBeans. I really cannot believe that such basic and crucial requirement, implemented in NetBeans several versions and years ago, is still missing in Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1720574</commentid>
    <comment_count>21</comment_count>
    <who name="Grzegorz Borkowski">grzegorzborkowski</who>
    <bug_when>2010-04-24 16:49:54 -0400</bug_when>
    <thetext>More than one year passed since last comment. What&apos;s the current status of this issue?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1720669</commentid>
    <comment_count>22</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-04-25 10:50:41 -0400</bug_when>
    <thetext>&gt;More than one year passed since last comment. What&apos;s the current status of this
&gt;issue?
Sorry, no one is working on this. If you or someone else needs this you could work on the feature an provide a good quality patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1720674</commentid>
    <comment_count>23</comment_count>
    <who name="Neale Upstone">neale</who>
    <bug_when>2010-04-25 11:39:39 -0400</bug_when>
    <thetext>Sorry it&apos;s not made 3.6.  Understandable.

I think it&apos;s something in the scope of SpringSource or Sonatype, given both have notable investment in Maven Eclipse combo.

This is a bit of an epic, and if some Eclipse architecture gurus fancied writing up some pointers on likely API requirements and implications, then I think that&apos;d help.

I think source and test are a bit limited too, but possibly sufficient.  I&apos;d be looking to investigate how different builders (e.g. AspectJ) could apply to different source folders according to how they were tagged.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1805708</commentid>
    <comment_count>24</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2010-08-27 05:39:32 -0400</bug_when>
    <thetext>*** Bug 323790 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1807603</commentid>
    <comment_count>25</comment_count>
    <who name="Matthew Hall">qualidafial</who>
    <bug_when>2010-08-31 18:20:19 -0400</bug_when>
    <thetext>Ping.  Any chance of getting this on the 3.7 plan?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1807727</commentid>
    <comment_count>26</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-09-01 02:27:07 -0400</bug_when>
    <thetext>&gt;Ping.  Any chance of getting this on the 3.7 plan?
See comment 22.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1807788</commentid>
    <comment_count>27</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2010-09-01 05:01:15 -0400</bug_when>
    <thetext>(In reply to comment #26)
&gt; See comment 22.

Hi Dani, no one is working on this right now, but the question is: is there any hope that it will ever be put on a new release plan?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1807792</commentid>
    <comment_count>28</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-09-01 05:06:14 -0400</bug_when>
    <thetext>&gt;is there any hope that it will ever be put on a new release plan?
At this point, only if someone steps up and makes a real commitment to it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1807834</commentid>
    <comment_count>29</comment_count>
    <who name="Kariem Hussein">kariem</who>
    <bug_when>2010-09-01 06:56:16 -0400</bug_when>
    <thetext>I do not want to trigger a new discussion here, but I am not sure, if we are all thinking about the same solution.

As the summary says and Dani pointed out in comment 17, we just need the capability to add a property to a single source folder programmatically that a consumer can read at a latter point in time. On my initial request in January 2004, Martin described this as

Martin Aeschlimann (bug 49611, comment 8)
&gt; extra attribute to mark a source folder as test folder

Perhaps I underestimate this or do not really understand the implications, but if someone could send me a pointer on what I will have to touch, I will try to provide a patch for M1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1818155</commentid>
    <comment_count>30</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-09-23 08:59:24 -0400</bug_when>
    <thetext>&gt; As the summary says and Dani pointed out in comment 17, we just need the
&gt; capability to add a property to a single source folder programmatically that a
&gt; consumer can read at a latter point in time.
That&apos;s not the hard part. The real work is to adjust all the tooling (add UI to mark the folders, launcher, package etc.) and as long as there&apos;s no commitment to do this, it doesn&apos;t make too much sense to just add the attribute(s).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1972545</commentid>
    <comment_count>31</comment_count>
    <who name="Markku Saarela">ivalo</who>
    <bug_when>2011-08-01 11:38:04 -0400</bug_when>
    <thetext>I need this feature in several projects in my day-job, so I&apos;m keen to help. Any pointers to start working?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985040</commentid>
    <comment_count>32</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-08-26 12:09:54 -0400</bug_when>
    <thetext>Comment 30 pretty much sums up what&apos;s to do.

The easy part is adding a constant to IClasspathAttribute, e.g. TEST, with a definition similar to OPTIONAL. This attribute would be valid for all kinds of classpath entries.

In the compiler, we would need code that ensures that a source folder with the TEST attribute is treated specially:
- every reference from a non-TEST source folder into an element from a TEST entry (source folder, or a JAR like JUnit, a classpath container, etc.) must be flagged as an error
- references from a TEST source folder are not restricted

In the UI, the Source and Libraries tabs in the BuildPathsBlock need to be updated to allow the user to toggle the TEST attribute (add a new child node that can be edited). The quick fix that adds the JUnit library to the build path must also set the TEST attribute (JUnitQuickFixProcessor).

The JAR exporter (JarPackageWizard, JarFileExportOperation) needs an option to not include the TEST entries (enabled by default).

In the launcher, somewhere in AbstractJavaLaunchConfigurationDelegate, the TEST entries must be filtered out for non-JUnit launches.


This is the minimal support we need for this feature (unless testing reveals more places that need to be adjusted). I think we can go without any PDE support, since the recommended setup in OSGi is to have separate test bundles.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985467</commentid>
    <comment_count>33</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-08-29 00:29:28 -0400</bug_when>
    <thetext>Bug 354234 is similar to this. Don&apos;t think they are duplicates, but the requirements for the fix would be similar and as complicated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986202</commentid>
    <comment_count>34</comment_count>
    <who name="Davide Cavestro">groar</who>
    <bug_when>2011-08-30 03:48:24 -0400</bug_when>
    <thetext>Wondering if a comprehensive support for marking both classpath entries and sources is available.
For instance take a look at http://jira.codehaus.org/browse/MECLIPSE-79, I guess when using dependencies managers such as maven/ivy/gradle some classpath entries available at compile and validation time should never be included in produced artifacts. Could that need be somewhat related to this issue?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988795</commentid>
    <comment_count>35</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-09-04 18:43:55 -0400</bug_when>
    <thetext>(In reply to comment #32)
&gt; In the compiler, we would need code that ensures that a source folder with the
&gt; TEST attribute is treated specially:
&gt; - every reference from a non-TEST source folder into an element from a TEST
&gt; entry (source folder, or a JAR like JUnit, a classpath container, etc.) must be
&gt; flagged as an error
&gt; - references from a TEST source folder are not restricted

Maybe the internals of the compiler are beyond this bug, but the above
comment raises some questions:

The desired behavior requires that each class in the compiler knows where 
it was found. I don&apos;t see how this information is readily available at the
moment other then interpreting CompilationResult.fileName (bad idea).

If we think big, we might include also bug 148844 in the picture.
Why? Also compiling for OSGi is currently encumbered by the single
flat classpath.

Thinking of a general solution that would support several requirements
along these lines, I could imagine replacing the single LookupEnvironment
with a network of environments.

For the issue of test sources we would have one environment for regular
sources and one environment for test sources and visibility is only
from test to regular, not the opposite direction. A CompilationUnitScope
knows its environment so a regular type cannot see the test source
environment. This should work pretty well.

Then each lookup environment needs its on name environment etc. pp.

I&apos;m not sure if this will turn out being too huge a change, maybe this
would boil down to what Jerome already ruled out in bug 110176 comment 10.

But we keep hitting the ceiling of the single-flat-classpath model.


Alternatively, we might have to generate separate invocations of the 
builder, one cycle with regular source folders only, and another cycle
compiling the test sources with additional visibility of regular sources?
Sounds easier? What about performance (regular sources may have to be
touched twice)?


Any other options how to achieve unidirectional visibility in the compiler?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988888</commentid>
    <comment_count>36</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2011-09-05 04:37:30 -0400</bug_when>
    <thetext>(In reply to comment #35)

&gt; Alternatively, we might have to generate separate invocations of the 
&gt; builder, one cycle with regular source folders only, and another cycle
&gt; compiling the test sources with additional visibility of regular sources?
&gt; Sounds easier? What about performance (regular sources may have to be
&gt; touched twice)?

This is what Maven does; it&apos;s a simple solution (invoking the compiler twice), no changes to the compiler itself necessary and it scales well (for example, if you need a third kind of source, say, something that gets compiled into Java but needs Java classes, so the Java compiler needs to run three times).

This shouldn&apos;t be a big performance problem:

- When the compiler is invoked the second time, the OS will have the class files from the first run in the IO caches.

- If that should really be a problem, the compiler could dump the AST to a cache. Not sure if that would be faster than reading .class files, though.

- The classes for the compiler are in the VM&apos;s code area, so the only overhead is parsing the source code.

- It might help to check of the incremental compile code can be optimized further to get a smaller set of files to be recompiled but I doubt it. Test code should be highly decoupled (so a change in one source file will often trigger a compile of one test class).

So in the end, this approach would kind of double the amount of &quot;independent projects&quot; in the workspace.

But frankly, I don&apos;t see how that can be worse than what we have today: plugin projects already need to projects because they can&apos;t separate classpaths.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2641171</commentid>
    <comment_count>37</comment_count>
    <who name="Jörg Sesterhenn">joerg.sesterhenn</who>
    <bug_when>2015-11-18 05:06:43 -0500</bug_when>
    <thetext>I just want to voice our need for a separation of scopes in eclipse.
JDT should support good practices of java development. If the core assumptions of JDT don&apos;t allow for this to happen it might be time to reevaluate those assumptions. This should definitely be on the list for the next major version.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>229723</bug_id>
          
          <creation_ts>2008-04-30 16:51:00 -0400</creation_ts>
          <short_desc>Intermittent &quot;ClassNotFound&quot; exception when copying files into src/ folder.</short_desc>
          <delta_ts>2015-11-23 14:46:55 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Seng Phung Lu">sengpl</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>itewksbu</cc>
    
    <cc>kathy</cc>
    
    <cc>nsandona</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1219787</commentid>
    <comment_count>0</comment_count>
      <attachid>98265</attachid>
    <who name="Seng Phung Lu">sengpl</who>
    <bug_when>2008-04-30 16:51:30 -0400</bug_when>
    <thetext>Created attachment 98265
jst.ws.test plugin

Build ID: I20080330-1350

Steps To Reproduce:
1. Create a Dynamic Web Project in Web Tools Platform.
2. Copy a Java file into src folder.
3. Launch Web service wizard on the Java file. Proceed thru the wizard - at the point where the Java class is read, once in a while, we&apos;ll see a ClassNotFoundException.


More information:
I will create a simple JUnit plug-in test to recursively run the steps above.

Please download any recent WTP driver (M6/M7) - and include the wtp-Automated-Tests, wtp-sdk, and pre-reqs. Import the unzip and import the attached plugin. Run &quot;RecursiveRuns.java&quot;, with the following VM arg:
-Dorg.eclipse.jst.server.tomcat.50=&quot;C:\mnt\tomcat\tomcat50&quot; , where the location of your Tomcat v5.0 server is locally installed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1232768</commentid>
    <comment_count>1</comment_count>
    <who name="Nitin Dahyabhai">nitind</who>
    <bug_when>2008-05-13 02:21:13 -0400</bug_when>
    <thetext>I applaud the JUnit plug-in, but I can&apos;t get it running.  Do you have a stack trace?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1233466</commentid>
    <comment_count>2</comment_count>
    <who name="Seng Phung Lu">sengpl</who>
    <bug_when>2008-05-13 12:04:30 -0400</bug_when>
    <thetext>Since seeing this intermittent problem twice locally - I have not been able to reproduce it again yet.  This JUnit was meant to help reproduce it.  For the record, we saw intermittent failures(1 every 1-3 mths) reported in our jst.ws JUnit tests from the WTP builds.

I was able to run the plugin test with the 3.0 M7 driver.  Here are my steps.

1.Download the following zips:
eclipse-SDK-3.4M7-win32.zip
emf-runtime-2.4.0M7.zip
GEF-SDK-3.4.0M7.zip
wtp-Automated-Tests-S-3.0M7-20080506040630.zip
wtp-sdk-S-3.0M7-20080506040630.zip
xsd-runtime-2.4.0M7.zip

2. Start eclipse.exe.

3. Unzip plugins.zip (attachment).

4. Do &quot;Import-&gt; Plug-in Development-&gt;Plug-ins and Fragments&quot;, specify plug-in location to your unzipped plugins\ folder.

5. With the plug-in project in workspace, ensure the &quot;src\&quot; folder is set as source folder via project properties-&gt;&quot;Java Build Path&quot;.

6. Choose RecursiveRuns.java file, start &quot;Run Configurations...&quot;, choose &quot;JUnit plug-in Test&quot;.

7. Add the vmarg for Tomcat server location; optionally add &quot;-Xmx400m&quot; for more memory.

8. Run has the following output:
...
BEGIN: BUJavaAxisTC50
Assert BU wsdl folder exists? = true
Assert BU wsdl file exists? = true
END: BUJavaAxisTC50

BEGIN: BUJavaAxisTC50
Assert BU wsdl folder exists? = true
Assert BU wsdl file exists? = true
END: BUJavaAxisTC50

BEGIN: BUJavaAxisTC50
Assert BU wsdl folder exists? = true
Assert BU wsdl file exists? = true
END: BUJavaAxisTC50

...


</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1286478</commentid>
    <comment_count>3</comment_count>
    <who name="Nitin Dahyabhai">nitind</who>
    <bug_when>2008-07-07 20:57:09 -0400</bug_when>
    <thetext>I suppose the part that still confuses me is why is this in the JSP component.  Kathy?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1287308</commentid>
    <comment_count>4</comment_count>
    <who name="Kathy Chan">kathy</who>
    <bug_when>2008-07-08 15:42:54 -0400</bug_when>
    <thetext>Seng open this defect on the JDT since the problem looks like the JDT is not picking up the copied file and building it in time to generate the class file.

I&apos;m not sure why Olivier has transferred it to jst.jsp.  It should not be transfer to that component.  May be Olivier can provide more info on the rationale for the transfer.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1644743</commentid>
    <comment_count>5</comment_count>
    <who name="Nick Sandonato">nsandona</who>
    <bug_when>2009-12-14 15:34:51 -0500</bug_when>
    <thetext>Hi, Oliver. Can you provide feedback on if this should really be in the JSP component? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1662941</commentid>
    <comment_count>6</comment_count>
    <who name="Ian Tewksbury">itewksbu</who>
    <bug_when>2010-01-25 13:50:15 -0500</bug_when>
    <thetext>No response to question for over a month, this bug should either be pushed on by us to who we think should own it or we should close it on ourselves as invalid.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1676384</commentid>
    <comment_count>7</comment_count>
    <who name="Nick Sandonato">nsandona</who>
    <bug_when>2010-02-16 08:26:44 -0500</bug_when>
    <thetext>I don&apos;t think we can do anything in source editor. Hopefully this will find a better home in JDT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1676485</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-02-16 10:07:40 -0500</bug_when>
    <thetext>I&apos;ll investigate.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>98265</attachid>
            <date>2008-04-30 16:51:00 -0400</date>
            <delta_ts>2008-04-30 16:51:30 -0400</delta_ts>
            <desc>jst.ws.test plugin</desc>
            <filename>plugins.zip</filename>
            <type>application/zip</type>
            <size>57497</size>
            <attacher name="Seng Phung Lu">sengpl</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>249449</bug_id>
          
          <creation_ts>2008-10-02 05:27:00 -0400</creation_ts>
          <short_desc>[buildpath] &quot;..&quot; not supported in variable extension</short_desc>
          <delta_ts>2011-03-29 09:08:38 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>readme</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jerome Lanneluc">jerome_lanneluc</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>daniel_megert</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1342427</commentid>
    <comment_count>0</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-10-02 05:27:10 -0400</bug_when>
    <thetext>I20080930-0921

If you add a variable classpath entry in the .classpath file with an extension that starts with &quot;..&quot;, the variable is not resolved and you get build path problem reported.

E.g. assuming that junit-4.0.jar is a sibbling of the workspace and adding the following in the .classpath:
  &lt;classpathentry kind=&quot;var&quot; path=&quot;ECLIPSE_HOME/../junit-4.0.jar&quot;/&gt;
results in a build path problem</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1342559</commentid>
    <comment_count>1</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-10-02 09:25:05 -0400</bug_when>
    <thetext>The problem comes from the fact that we use org.eclipse.core.runtime.Path to represent a classpath variable + its extension. However Path(String) is specified for valid system path. &quot;ECLIPSE_HOME/../junit-4.0.jar&quot; is not a valid system path.

Classpath variables support need to be redesigned to not rely on IPath.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1342561</commentid>
    <comment_count>2</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-10-02 09:25:50 -0400</bug_when>
    <thetext>For 3.5, we will add this limitation in the readme.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>267128</bug_id>
          
          <creation_ts>2009-03-04 18:08:00 -0500</creation_ts>
          <short_desc>JDT&apos;s way of compiling thing should be compatible with other tools</short_desc>
          <delta_ts>2010-01-29 17:42:44 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sven Köhler">sven.koehler</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>nitind</cc>
    
    <cc>vlsergey</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1443973</commentid>
    <comment_count>0</comment_count>
    <who name="Sven Köhler">sven.koehler</who>
    <bug_when>2009-03-04 18:08:13 -0500</bug_when>
    <thetext>Build ID: M20090211-1700

Steps To Reproduce:
In Eclipse, i can configure the following:

- Source Folders src1 and src
- src1 has output folder bin1
- src2 has output folder bin2
- class Test1 in src1 can depend on class Test2 in src2
- class Test2 in src2 can depend on class Test1 in src1

Note the circular dependency of the folders src1 and src2.

This is kind of &quot;unique&quot; and only available in Eclipse.
Actually I think it is impossible to write a build.xml which immitates this behaviour. And actually i think, that in most cases this is not what people want.

I had a bigger project, and we had a source folder for the regular application and a seperate source folder for unit tests. On a regular besis, I had to tell my code-developers that the regular source should not depend on the code that&apos;s in the source folder for the junit test.

My point is:
It&apos;s not possible to configure JDT in a way, such that these circular dependencies are NOT possible. IMHO, this should be possible, because it is the only way that most other build-systems (like ant) support.

AND it helps to have clean dependencies between the different parts of the project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1457517</commentid>
    <comment_count>1</comment_count>
    <who name="Sergey Vladimirov">vlsergey</who>
    <bug_when>2009-03-21 19:06:56 -0400</bug_when>
    <thetext>Sven,

You can put your code in different projects and setup dependencies between projects. The compiler (by default) doesn&apos;t allow circular dependencies between projects.

Using source folders to maintain dependencies is not the right thing. Just think about wrong &quot;possibilities&quot; - next idea will be bind some libraries to some source folders, to try use different versions of libraries for different folders... This is what projects for, not source folders.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1457522</commentid>
    <comment_count>2</comment_count>
    <who name="Sven Köhler">sven.koehler</who>
    <bug_when>2009-03-21 19:46:59 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Sven,
&gt; 
&gt; You can put your code in different projects and setup dependencies between
&gt; projects. The compiler (by default) doesn&apos;t allow circular dependencies between
&gt; projects.

I would like to see the tutorial, where they recommend to put JUnit tests into another project to avoid the circual-dependency issue between source folders.

Isn&apos;t it a common thing to have a second source folder for the JUnit tests?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1666624</commentid>
    <comment_count>3</comment_count>
    <who name="Nitin Dahyabhai">nitind</who>
    <bug_when>2010-01-29 17:06:51 -0500</bug_when>
    <thetext>Then wouldn&apos;t that require having JUnit as a dependency of your application code?  It&apos;s simpler to move the JUnit dependency and the tests into their own project and have that project establish a one-way dependency on the application code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1666649</commentid>
    <comment_count>4</comment_count>
    <who name="Sven Köhler">sven.koehler</who>
    <bug_when>2010-01-29 17:42:44 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Then wouldn&apos;t that require having JUnit as a dependency of your application
&gt; code?  It&apos;s simpler to move the JUnit dependency and the tests into their own
&gt; project and have that project establish a one-way dependency on the application
&gt; code.

The basis of my complaint is, that Eclipse allows separate output folders for source folder, even if they depend circularly on each other.
This is something, that Eclipse probably shouldn&apos;t allow, since it can never be imitated with ant or any other build tool other than Eclipse.

JUnit tests were just an example and are not the main subject here.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>275853</bug_id>
          
          <creation_ts>2009-05-12 07:37:00 -0400</creation_ts>
          <short_desc>IMethodBinding.getMethodDeclaration().getJavaElement() returns wrong IJavaElement</short_desc>
          <delta_ts>2015-11-23 14:49:16 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4.2</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ganea George">georgeganea</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>andreas.thies</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>david_audel</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="18102"
          type_id="1"
          status="+"
          setter="david_audel"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1497880</commentid>
    <comment_count>0</comment_count>
    <who name="Ganea George">georgeganea</who>
    <bug_when>2009-05-12 07:37:33 -0400</bug_when>
    <thetext>Build ID: 3.4.2

Steps To Reproduce:
1. Obtain AST for this class :

package test;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

public class Test {
	 public Point drawingToView(Point2D.Double p) {
			return null;
	    }
	 public Rectangle drawingToView(Rectangle2D.Double r) {
			return null;
	    }	    
}

2. visit with :

ast.accept(new ASTVisitor(){
					public boolean visit (MethodDeclaration method){
						IMethodBinding binding = method.resolveBinding();
						if(binding == null) 
							return false;
						IMethod iMethod = (IMethod)binding.getMethodDeclaration().getJavaElement();
						if (iMethod.toString().startsWith(&quot;Point&quot;) &amp;&amp; binding.toString().startsWith(&quot;public java.awt.Rectangle&quot;)){
							Assert.fail();
						}
						if (iMethod == null)
							return false;
						return true;
					}
				});


3. Assert.fail() line should not happen - the binding for the second method returns the IJavaElement of the first method.


More information:

attached : a plugin containing one junit Test  and a java project containg the class to be parsed</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1497882</commentid>
    <comment_count>1</comment_count>
      <attachid>135329</attachid>
    <who name="Ganea George">georgeganea</who>
    <bug_when>2009-05-12 07:39:08 -0400</bug_when>
    <thetext>Created attachment 135329
test case and test code</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1497937</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-12 09:05:41 -0400</bug_when>
    <thetext>I&apos;ll investigate on 3.5 steam.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1498981</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-12 22:17:00 -0400</bug_when>
    <thetext>Reproduced with  I20090511-2000.
The problem comes from the call toUnresolvedTypeSignature(char[]) that doesn&apos;t properly convert a resolved signature to an unresolved one.
When the parameter type is a binary type binding, the unresolved type signature is wrongly reported and this means that the IMethod is not properly retrieved.
I&apos;ll investigate a fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1500827</commentid>
    <comment_count>4</comment_count>
      <attachid>135782</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-14 10:11:38 -0400</bug_when>
    <thetext>Created attachment 135782
Proposed fix + regression tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1500927</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-14 11:14:34 -0400</bug_when>
    <thetext>David, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1501022</commentid>
    <comment_count>6</comment_count>
      <attachid>135807</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-14 12:06:34 -0400</bug_when>
    <thetext>Created attachment 135807
Proposed fix + regression tests

Small changes with previous patch + more regression tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1501034</commentid>
    <comment_count>7</comment_count>
    <who name="David Audel">david_audel</who>
    <bug_when>2009-05-14 12:10:20 -0400</bug_when>
    <thetext>+1, patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1501041</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-14 12:14:01 -0400</bug_when>
    <thetext>Released for 3.5RC1.
Regression tests in:
org.eclipse.jdt.core.tests.dom.ASTConverter15Test#test0334
org.eclipse.jdt.core.tests.dom.ASTConverter15Test#test0335
org.eclipse.jdt.core.tests.dom.ASTConverterTestAST3_2#test0710
org.eclipse.jdt.core.tests.dom.ASTConverterTestAST3_2#test0711</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1501816</commentid>
    <comment_count>9</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2009-05-15 04:07:10 -0400</bug_when>
    <thetext>Verified for 3.5RC1 using I20090514-2000.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1510506</commentid>
    <comment_count>10</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-05-26 11:50:32 -0400</bug_when>
    <thetext>I&apos;ll revert this change as it caused a regression found in bug 277669.
I&apos;ll work on a complete fix for 3.5.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1568951</commentid>
    <comment_count>11</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-08-12 11:06:41 -0400</bug_when>
    <thetext>Will move to 3.5.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1907766</commentid>
    <comment_count>12</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-02 14:39:42 -0400</bug_when>
    <thetext>*** Bug 341695 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>135329</attachid>
            <date>2009-05-12 07:39:00 -0400</date>
            <delta_ts>2009-05-12 07:39:08 -0400</delta_ts>
            <desc>test case and test code</desc>
            <filename>Archive.zip</filename>
            <type>application/zip</type>
            <size>11005</size>
            <attacher name="Ganea George">georgeganea</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>135782</attachid>
            <date>2009-05-14 10:11:00 -0400</date>
            <delta_ts>2009-05-14 12:06:34 -0400</delta_ts>
            <desc>Proposed fix + regression tests</desc>
            <filename>patch_275853.txt</filename>
            <type>text/plain</type>
            <size>24543</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>135807</attachid>
            <date>2009-05-14 12:06:00 -0400</date>
            <delta_ts>2009-05-14 12:06:34 -0400</delta_ts>
            <desc>Proposed fix + regression tests</desc>
            <filename>patch_275853.txt</filename>
            <type>text/plain</type>
            <size>26556</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>315622</bug_id>
          
          <creation_ts>2010-06-03 12:20:00 -0400</creation_ts>
          <short_desc>open a .java file of another project</short_desc>
          <delta_ts>2010-07-07 12:29:40 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ralf Hauser">hauser</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>hauser</cc>
    
    <cc>moreira</cc>
    
    <cc>remy.suen</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1754028</commentid>
    <comment_count>0</comment_count>
    <who name="Ralf Hauser">hauser</who>
    <bug_when>2010-06-03 12:20:40 -0400</bug_when>
    <thetext>Build Identifier: 20090920-1017

to avoid projects being in circular dependencies (Bug 314891) one strategy could be to add the other project&apos;s (external) class folder tree (best with a variable) and assign the sources to another (external) folder variable.

When all projects are on &quot;build automatically&quot; changes in either project are compiled immediately and e.g. hot-reloaded to a running junit test latest when F5/Refresh is done on the other projects.

This works very nicely for debugging as long as edits are only in the current project. However, if you open a class file of another project only the &quot;J0101&quot;-iconed class-source-viewer will open that does not allow to edit the .java file.

Reproducible: Always

Steps to Reproduce:
Suggestion: if the F3 command detects that a the source file of a class corresponds to the same physical file of another open project, instead of just opening the viewer, open the file editor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1754620</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-06-04 02:01:10 -0400</bug_when>
    <thetext>Ralf, since this is a suggestion and not a bug per se, it would be better if you can just mention it on bug 314891, and it&apos;ll be taken care of.
Thanks!</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>338438</bug_id>
          
          <creation_ts>2011-02-28 11:52:00 -0500</creation_ts>
          <short_desc>ImageBuilderInternalExceptions running API tools plug-in test suite</short_desc>
          <delta_ts>2011-03-16 11:34:40 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Michael Rennie">Michael_Rennie</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>ankur_sharma</cc>
    
    <cc>cwindatt</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1890505</commentid>
    <comment_count>0</comment_count>
    <who name="Michael Rennie">Michael_Rennie</who>
    <bug_when>2011-02-28 11:52:09 -0500</bug_when>
    <thetext>Version: 3.7.0
Build id: I20110224-1726
Windows 7 64bit + 64bit VM + 64bit Eclipse

Running the plug-in test suite locally I noticed a bunch of the following exception reported in the console:

!ENTRY org.eclipse.jdt.core 4 4 2011-02-28 10:43:52.362
!MESSAGE JavaBuilder handling ImageBuilderInternalException while building: bundle.a

After each of the exceptions reported above another entry would be logged:

!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:800)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.cleanOutputFolders(BatchImageBuilder.java:114)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:46)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:254)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:173)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:717)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:191)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:228)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:281)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:284)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:340)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:363)
	at org.eclipse.core.internal.resources.Workspace.buildInternal(Workspace.java:486)
	at org.eclipse.core.internal.resources.Workspace.build(Workspace.java:422)
	at org.eclipse.jdt.core.tests.builder.TestingEnvironment.fullBuild(TestingEnvironment.java:464)
	at org.eclipse.jdt.core.tests.builder.BuilderTests.fullBuild(BuilderTests.java:390)
	at org.eclipse.pde.api.tools.builder.tests.compatibility.CompatibilityTest.performCompatibilityTest(CompatibilityTest.java:213)
	at org.eclipse.pde.api.tools.builder.tests.compatibility.ClassCompatibilityFieldTests.xRemovePublicFieldNoInstantiate(ClassCompatibilityFieldTests.java:242)
	at org.eclipse.pde.api.tools.builder.tests.compatibility.ClassCompatibilityFieldTests.testRemovePublicFieldNoInstantiateF(ClassCompatibilityFieldTests.java:250)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication$1.run(UITestApplication.java:116)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4101)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3718)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2696)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2660)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2494)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:674)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:667)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.start(UITestApplication.java:47)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1890511</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-28 11:56:02 -0500</bug_when>
    <thetext>This should belong to JDT/Core.
I also saw this king of failures, but I was never able to reproduce them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1896583</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-03-10 09:54:44 -0500</bug_when>
    <thetext>Could this be related to the antivirus? I have no good explanation why the resources inside the output folder could not be removed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1899753</commentid>
    <comment_count>3</comment_count>
    <who name="Michael Rennie">Michael_Rennie</who>
    <bug_when>2011-03-16 11:34:40 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Could this be related to the antivirus? I have no good explanation why the
&gt; resources inside the output folder could not be removed.

Its possible, but I am not sure why Symantec would interfere and not prompt me about it or log it.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>354226</bug_id>
          
          <creation_ts>2011-08-09 05:29:00 -0400</creation_ts>
          <short_desc>The project was not built due to &quot;Resource already exists on disk</short_desc>
          <delta_ts>2014-05-29 18:12:17 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>anshumansharma806</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>infias</cc>
    
    <cc>jarthana</cc>
    
    <cc>jeblen</cc>
    
    <cc>mauromol</cc>
    
    <cc>palcso.balazs</cc>
    
    <cc>soltis.martin</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>vlad.shersh</cc>
          
          <votes>6</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1975915</commentid>
    <comment_count>0</comment_count>
    <who name="">anshumansharma806</who>
    <bug_when>2011-08-09 05:29:53 -0400</bug_when>
    <thetext>Build Identifier: 20100917-0705

I am getting following error:

The project was not built due to &quot;Resource already exists on disk: &apos;/source/out/com/alerts/COMIFL~1.XML&apos;.&quot;. Fix the problem, then try refreshing this project and building it since it may be inconsistent
----------------------------------------------------------------
Earlier evrythng was fine...but all of sudden...it started giving this problem...due to this I m unable to build the project.

JRE: jdk1.5.0_22

Reproducible: Always

Steps to Reproduce:
1.Clean the project or build
2.
3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1975921</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-08-09 05:41:33 -0400</bug_when>
    <thetext>Does a refresh help? What is the &quot;/source/out&quot; folder? Is it the output folder?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1975942</commentid>
    <comment_count>2</comment_count>
    <who name="">anshumansharma806</who>
    <bug_when>2011-08-09 06:09:19 -0400</bug_when>
    <thetext>refresh didnt help

/source/out..is the iutput folder...where class files are created after successfull build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1975943</commentid>
    <comment_count>3</comment_count>
    <who name="">anshumansharma806</who>
    <bug_when>2011-08-09 06:09:40 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Does a refresh help? What is the &quot;/source/out&quot; folder? Is it the output folder?

refresh didnt help

/source/out..is the iutput folder...where class files are created after
successfull build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1976466</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-08-10 00:45:33 -0400</bug_when>
    <thetext>Can you provide the .classpath file and let me know which classpath entry the particular file is coming from? Can you also check if the file gets deleted when you do a &apos;clean&apos;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169799</commentid>
    <comment_count>5</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-10 03:11:22 -0400</bug_when>
    <thetext>I&apos;m experiencing this problem with a DTD file with Eclipse 4.2, too.

I&apos;m still investingating to understand if the problem is due to some project configuration/build file or if there&apos;s a problem in Juno, since I never had such problems with Indigo.

I noticed the problem always happen with files that should just be copied to the output folder.

I&apos;m going to provide the information requested by Jayaprakash.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169801</commentid>
    <comment_count>6</comment_count>
      <attachid>222100</attachid>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-10 03:13:23 -0400</bug_when>
    <thetext>Created attachment 222100
.classpath file

Here is my .classpath file. The file for which I get the &quot;Resource already exists on disk&quot; is src/log4j.dtd, so it&apos;s coming from the first classpathentry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169805</commentid>
    <comment_count>7</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-10 03:22:48 -0400</bug_when>
    <thetext>If I do a &quot;Clean&quot; on the project, unchecking &quot;Start a build immediately after&quot; and removing the &quot;Build automatically&quot; flag, I can see that many files are NOT deleted from build/classes, which is the output dir. However, some of them are....

I don&apos;t see any error in the error log when I clean, while when I invoke &quot;Build project&quot; I get this:

eclipse.buildId=I20120608-1400
java.version=1.7.0
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=it_IT
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -debug -consoleLog

Error
Wed Oct 10 09:20:46 CEST 2012
JavaBuilder handling ImageBuilderInternalException while building: UtopicMusicServer

org.eclipse.core.internal.resources.ResourceException: Resource already exists on disk: &apos;/MyProject/build/classes/log4j.dtd&apos;.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.copy(FileSystemResourceManager.java:306)
	at org.eclipse.core.internal.resources.Resource.copy(Resource.java:566)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.copyResource(AbstractImageBuilder.java:408)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder$3.visit(BatchImageBuilder.java:240)
	at org.eclipse.core.internal.resources.Resource$1.visitElement(Resource.java:85)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:82)
	at org.eclipse.core.internal.watson.ElementTreeIterator.doIteration(ElementTreeIterator.java:86)
	at org.eclipse.core.internal.watson.ElementTreeIterator.iterate(ElementTreeIterator.java:127)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:95)
	at org.eclipse.core.internal.resources.Resource.accept(Resource.java:52)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.copyExtraResourcesBack(BatchImageBuilder.java:199)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.cleanOutputFolders(BatchImageBuilder.java:121)
	at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:48)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:254)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:173)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.resources.Workspace.buildInternal(Workspace.java:513)
	at org.eclipse.core.internal.resources.Workspace.build(Workspace.java:432)
	at org.eclipse.ui.actions.BuildAction$1.runInWorkspace(BuildAction.java:305)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:38)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

I must manually delete files on the disk in order to repair the situation.

Please note it must not be a folder permission problem, since I&apos;m using a &quot;public&quot; folder for the wprkspace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171571</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-15 00:21:28 -0400</bug_when>
    <thetext>Thanks for sharing the classpath file. Looking the stacktrace and code, the resources in the output location must have been deleted inside BatchImageBuilder#cleanOutputFolders(). But apparently the delete wasn&apos;t successful. Is there a chance that the log4j DTD was used by another process and hence couldn&apos;t be deleted?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171573</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-15 00:30:40 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; If I do a &quot;Clean&quot; on the project, unchecking &quot;Start a build immediately
&gt; after&quot; and removing the &quot;Build automatically&quot; flag, I can see that many
&gt; files are NOT deleted from build/classes, which is the output dir. However,
&gt; some of them are....

I tried it with a project with a similar classpath as given and I noticed the same behavior. When doing a clean with both the build automatically options turned off, I do see the DTD file present in the output folder. However, once I turn on the &quot;Build Automatically&quot;, the DTD and all other files are removed and they are copied over again as part of build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171588</commentid>
    <comment_count>10</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-15 02:30:12 -0400</bug_when>
    <thetext>Hi Jayaprakash,
isn&apos;t it strange that the clean operation doesn&apos;t delete files in the output folder when both the build automatically options are turned off?
Anyway, as I said, in my case I saw that only SOME of the files were not deleted.
In any case, I did that test with both the build automatically options turned off just to investigate. In the normal use case, I have the &quot;Build automatically&quot; option in Project menu turned on and sometimes it happens that I still see this problem. It doesn&apos;t happen always, but it did at least 3-4 times from when I upgraded to Juno.
The DTD and the other files that are not deleted must not be locked by another process: there&apos;s no process running on those files when I try to re-build and I can easily delete files from the outside (with a file manager application). If there were another process, I couldn&apos;t delete them even with am external file manager application.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171601</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-15 03:21:01 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; Hi Jayaprakash,
&gt; isn&apos;t it strange that the clean operation doesn&apos;t delete files in the output
&gt; folder when both the build automatically options are turned off?

My bad. The method cleanOutputFolders() does get called even during the &quot;clean&quot; operation. So, you are right. We do get two chances to delete the files in the output location. I will try to find out what&apos;s going when I do a &quot;clean&quot;.

&gt; If there were another process, I couldn&apos;t delete them even with am external 
&gt; file manager application.

That&apos;s correct. Do you see any patterns in the occurrence of errors, or the files that have this problem? Is it always the same file(s) or of the same kind ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174620</commentid>
    <comment_count>12</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-22 03:18:40 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; That&apos;s correct. Do you see any patterns in the occurrence of errors, or the
&gt; files that have this problem? Is it always the same file(s) or of the same
&gt; kind ?

That&apos;s hard to answer this question. What I see is that it happens on static resources (dtds, properties, etc.).
Today it happened again, but on a .properties file, coming from the same classpath entry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177278</commentid>
    <comment_count>13</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-30 05:15:27 -0400</bug_when>
    <thetext>Hi Jayaprakash,
I&apos;ve some more info on how this problem is produced.

I have an Ant script that I run to jar the output produced by Eclipse in build/classes output folder into an archive I place on another folder (not managed by Eclipse). Then I start Tomcat on this other folder. 
That is, this script is just READING contents in build/classes.

The workflow is usually this:
1. I change a class and hit Ctrl+S
2. build automatically is on, so this class is compiled and put in build/classes; all works fine
3. I run the Ant script to jar the contents of build/classes into a JAR file contained into a folder which is not managed by Eclipse and run Tomcat on that folder
4. I repeat steps 1-2: all works fine
5. I repeat again the steps 1-2: the build error is produced
That is, every other change after running the Ant script produces the error.

Strange thing: I&apos;m not changing static resources, however the error message says &quot;resource already exists&quot; always for static resources.
Another strange thing: the error is given after the SECOND change+save on the class file. The first one works ok.
Again: I&apos;m 100% sure files are not locked at OS level, since I can delete them manually using Explorer. Also, Tomcat is not reading/taking files from build/classes. Lastly, if at step 3 I stop Tomcat right after it has started, then proceed with steps 4 and 5, the problem happens all the same. These are three clues that it must not be a problem related to Tomcat locking files.

Is it possible that the JAR command issued by Ant &quot;touches&quot; the files in build/classes in a way that interferes with Eclipse build process? If so, why should this annoy Eclipse?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177284</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-30 05:27:55 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Hi Jayaprakash,
&gt; I&apos;ve some more info on how this problem is produced.

Thanks for that!

&gt; Is it possible that the JAR command issued by Ant &quot;touches&quot; the files in
&gt; build/classes in a way that interferes with Eclipse build process? If so,
&gt; why should this annoy Eclipse?

How is the Ant script run? From eclipse or outside eclipse?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177335</commentid>
    <comment_count>15</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-30 07:35:03 -0400</bug_when>
    <thetext>The script is run from Eclipse via External Tools configuration.

Build before launch =&gt; build the project containing the selected resource, include referenced projects.
Refresh resources upon completion =&gt; the project containing the selected resource, recursively include sub-folders.

The following targets are executed:
- stop Tomcat (if running)
- refreshServer
- wait (waits 5 seconds)
- start Tomcat

Refresh server does the following:

&lt;target name=&quot;refreshServer&quot; depends=&quot;cleanClassesDir, compile, refreshClientWebResources&quot;&gt;
  &lt;jar destfile=&quot;${warDir}/webapp/WEB-INF/lib/UtopicMusicServer.jar&quot;&gt;
	&lt;fileset dir=&quot;${classesDir}&quot; /&gt;
  &lt;/jar&gt;
  &lt;copy todir=&quot;${warDir}/webapp&quot;&gt;
	&lt;fileset dir=&quot;WebContent&quot; /&gt;
  &lt;/copy&gt;
  &lt;copy todir=&quot;${warDir}/webapp&quot; overwrite=&quot;true&quot;&gt;
	&lt;fileset dir=&quot;configs/devel-local&quot; excludes=&quot;**/*_example* **/README&quot;&gt;
	&lt;/fileset&gt;
  &lt;/copy&gt;
&lt;/target&gt;

Where:
${warDir} is a folder in my project which is filtered out from the navigation views using resource filters, hence it&apos;s not handled by Eclipse
${classesDir} is build/classes
Tomcat is then run over ${warDir}.

Please note that the dependsOn targets &quot;cleanClasses&quot; and &quot;compile&quot; are actually not executed, because they all have unless=&quot;dont.recompile.server&quot;, which is a property currently set that avoids cleaning and recompiling (I want to use the output produced by Eclipse, I don&apos;t want to recompile all from scratch; but the script is designed to be used even without Eclipse running).
I&apos;m sure that &quot;cleanClasses&quot; and &quot;compile&quot; are not executed and simply skipped.

Instead, refreshClientWebResources is a task that simply calls another Ant scripts that copies some more resources to ${warDir} coming from another project (so it doesn&apos;t even read from build/classes).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177822</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-31 02:18:26 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; The script is run from Eclipse via External Tools configuration.

Thanks for the painstaking detail. Unfortunately, despite my best effort to repeat your steps, I just can&apos;t reproduce the bug. I can recompile the class even when tomcat is running. 

At this point, the only way I can think of is to put a JDT/Core bundle with some trouble-shooting code in your environment and that will give us some idea as to what&apos;s going on with the builder, esp. when resources are being deleted from the output location. This week we are busy with the M3 testing. I will provide you the modified JDT/Core bundle next week that you can put in your environment and share the log files.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177829</commentid>
    <comment_count>17</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-31 02:50:11 -0400</bug_when>
    <thetext>Hi Jayaprakash,
thanks for your support. No problem for me to try your modified bundles. Let me know!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177831</commentid>
    <comment_count>18</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-10-31 03:09:57 -0400</bug_when>
    <thetext>Just another detail. When you reach step 5 in my previous directions, you won&apos;t get the build error (&quot;The project was not built due to...&quot;) explicitly: however, the project the edited file (let&apos;s say it&apos;s project P) and another project that depends on the first (le&apos;ts say it&apos;s project Q) both complain that some classes from project P are not found. The strange thing is that those classes were not the ones I changed, so I wouldn&apos;t expect them to be recompiled by the incremental builder.
Anyway, when I get to these weird compilation problems, I usually clean the offending project (P). If I do this, then the explicit error (&quot;The project was not built due to...&quot;) is produced and the ResourceException error is printed in the Error Log (see my stacktrace reported in comment #7).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2185928</commentid>
    <comment_count>19</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-21 02:19:10 -0500</bug_when>
    <thetext>Hi Jayaprakash, did you have a change to look at this recently?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186313</commentid>
    <comment_count>20</comment_count>
      <attachid>223820</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-11-21 12:53:26 -0500</bug_when>
    <thetext>Created attachment 223820
Plugin patch

Hi Mauro,

As I said earlier, let&apos;s try the attached JDT/Core plugin in your environment. I have added more debug statements. Try downloading the eclipse version I20121113-0800 and replace the existing jdt.core plugin with the one attached here. Also enable the following debug option in your environment:

org.eclipse.jdt.core/debug/builder=true

And please share the log file when the error happens again. If you have any question on enabling the tracing, you can refer to this page:

http://wiki.eclipse.org/FAQ_How_do_I_use_the_platform_debug_tracing_facility%3F</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186508</commentid>
    <comment_count>21</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-22 03:07:36 -0500</bug_when>
    <thetext>Hi Jayaprakash,
I did the following:
1) downloaded Eclipse Runtime Platform from http://download.eclipse.org/eclipse/downloads/drops4/I20121113-0800/
2) unzipped and started the Runtime Platform
3) installed the CVS client plugin and JDT plugin from the ZIP files downloaded from http://download.eclipse.org/eclipse/downloads/drops4/I20121113-0800/
4) installed WTP, PDT, Mylyn from the Kepler update site provided with the Runtime Platform
5) installed the other relevant plugins (like Google Plugin for Eclipse and Groovy) from the previous Eclipse installation (using Import | Install | From existing installation)
6) created a .options file in Eclipse dir with:
org.eclipse.jdt.core/debug/builder=true
7) ddded the following to Eclipse.ini:
-debug
-consoleLog
-vm
C:/Program Files/Java/jre7/bin/javaw.exe
8) opened Eclipse on the previous workspace

After a bit of cleanup I then did the following:

1) closed Eclipse
2) went with Windows Explorer to &lt;workspace&gt;\UtopicMusicServer (the project that has problems) and delete all files from build\classes (the output folder)
3) started Eclipse
4) issued a &quot;Clean...&quot; on all the projects
5) waiting for &quot;Building workspace&quot; to terminate
6) made a change to a file and saved =&gt; no problems
7) run the Ant task to copy files and run Tomcat
8) stopped Tomcat
9) made a change to the same file and saved =&gt; the UtopicMusicClient (another project that depends on UtopicMusicServer) shows a build path error, but UtopicMusicServer does not: it only shows a Groovy compilation error
10) issued a &quot;Clean...&quot; for ONLY the UtopicMusicServer project
11) BOOM =&gt; the build path error on UtopicMusicServer arises because &quot;Resource already exists...&quot;

I&apos;m attaching the produced log, although it doesn&apos;t seem to contain much information. I see a lot of &quot;!--- cannot resolve...&quot; but I&apos;m pretty sure the were printed on startup (maybe because of step 2) which deleted files without letting Eclipse know). When the problem occurs (or immediately after) there seems to be no particular logging output.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186509</commentid>
    <comment_count>22</comment_count>
      <attachid>223842</attachid>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-22 03:08:35 -0500</bug_when>
    <thetext>Created attachment 223842
Produced log on 2012-11-22</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186510</commentid>
    <comment_count>23</comment_count>
      <attachid>223843</attachid>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-22 03:18:49 -0500</bug_when>
    <thetext>Created attachment 223843
Full log of 2012-11-12 after repeating steps

I did the following:
1) WITHOUT restarting Eclipse, I deleted the contents of UtopicMusicServer\build\classes with Windows Explorer
2) issued a Clean... on the UtopicMusicServer only
3) build path errors went away
4) then, I repeated steps 5)-11) of the previous comment

The resulting log is attached (the first lines are obviously the same of the previous attached log, since I didn&apos;t restart Eclipse). As you can see, nothing more than before. Again, the &quot;!-- cannot resolve&quot; entries were printed on the first Clean operation (after I manually deleted contents in build\classes), but no additional output was printed when (or immediately before) the real problem happens.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186511</commentid>
    <comment_count>24</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-22 03:24:13 -0500</bug_when>
    <thetext>Please note that at step 9) of comment 21 the Groovy compiler complains it can&apos;t resolve a Java class file and produces a &quot;Java&quot; error on the UtopicMusicServer project, but, as I said, no build path error on UtopicMusicServer is reported by Eclipse. However, as I said, a build path error on UtopicMusicClient (which depends on UtopicMusicServer) is indeed produced: I don&apos;t see the red &quot;!&quot; icon used for build path problems on UtopicMusicClient project in Package Explorer, but rather a simple red mark; however, in the Markers view I see it as a build path error that says that &quot;the project cannot be built because its build path is incomplete - cannot resolve &lt;another Java class in UtopicMusicServer&gt;. Please correct error first etc. etc.&quot;.

So, something is broken already at step 9), but the problem is shown in its entirety only when I issue a Clean... on UtopicMusicServer project (step 10) of comment 21).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186714</commentid>
    <comment_count>25</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-11-22 11:15:35 -0500</bug_when>
    <thetext>(In reply to comment #21)
&gt; Hi Jayaprakash,
&gt; I did the following:

Did you copy the jdt/core plugin I attached in comment #20 into the eclipse installation? Did I miss something?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2186890</commentid>
    <comment_count>26</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-11-23 02:15:09 -0500</bug_when>
    <thetext>Yes, sorry, I forgot to say. Of course, after installing JDT, I replaced the org.eclipse.jdt.core_3.9.0.v20121109-093838.jar with the one attached here. I suppose the entries starting with &quot;!--&quot; in the log files are the one produced by your patched JAR, aren&apos;t they?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2187806</commentid>
    <comment_count>27</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-11-27 00:39:16 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Yes, sorry, I forgot to say. Of course, after installing JDT, I replaced the
&gt; org.eclipse.jdt.core_3.9.0.v20121109-093838.jar with the one attached here.
&gt; I suppose the entries starting with &quot;!--&quot; in the log files are the one
&gt; produced by your patched JAR, aren&apos;t they?

No, they were already there, just get printed since we enabled tracing. Interestingly, I don&apos;t see the logs I was expecting.

I see multiple src entries in the classpath. Can you try this small experiment and let me know what happens - assuming the troublesome file is in the &quot;src&quot; entry, could you remove the other source entries from the classpath and see if there is still a problem? TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2189815</commentid>
    <comment_count>28</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-12-03 02:22:48 -0500</bug_when>
    <thetext>Hi Jayaprakash,
I just tried to remove the other source entry (there are two: the one containing the troublesome file and another; I removed the latter) but I see no changes in behaviour, i.e.: I still see the &quot;Resource already exists on disk&quot; error when trying steps from comment 13 and then I clean the server project. There&apos;s only one thing to correct: it&apos;s not true that the error always shows after the second change, as I said. During my experiments (independently from the fact I Removed the second source folder from the build path or not) I saw that it can happen even after the first change. So, I&apos;m still puzzled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2197694</commentid>
    <comment_count>29</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2012-12-30 06:48:56 -0500</bug_when>
    <thetext>Hi Jayaprakash,
any idea on how to proceed on this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2199400</commentid>
    <comment_count>30</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-01-07 00:16:15 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; Hi Jayaprakash,
&gt; any idea on how to proceed on this?

Honestly, I don&apos;t know what&apos;s going on. Perhaps we should try to setup a remote debugging session if that works for you?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2200545</commentid>
    <comment_count>31</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2013-01-09 03:48:05 -0500</bug_when>
    <thetext>Hi Jayaprakash,
it&apos;s ok for me to setup a remote debugging session, but please consider I&apos;ve never done it, so please, let me know exactly what to do. I imagine that we have to fix a date/time to meet online and that I&apos;ll have to open a port on my router to my working PC. We can arrange via e-mail if it&apos;s ok for you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2352389</commentid>
    <comment_count>32</comment_count>
    <who name="Martin Soltis">soltis.martin</who>
    <bug_when>2014-01-21 07:43:43 -0500</bug_when>
    <thetext>This bug is 3 years old and still not solved. 
I have to say, this bug is also in all following versions, current one included.
We can setup workarround to exclude build for non java files, but it prevents me to run JUnit tests which needs those file. It is bothering me for years now. I really wish this bug is solved as soon as possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2352392</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-21 07:48:23 -0500</bug_when>
    <thetext>(In reply to Martin Soltis from comment #32)
&gt; This bug is 3 years old and still not solved. 
&gt; I have to say, this bug is also in all following versions, current one
&gt; included.
&gt; We can setup workarround to exclude build for non java files, but it
&gt; prevents me to run JUnit tests which needs those file. It is bothering me
&gt; for years now. I really wish this bug is solved as soon as possible.

Sorry to hear about your situation. For the last year and half, we have
been very busy with Java 8 work - Java 8 has been described as arguably
the biggest change to Java in its history by the language architects leading
the design and evolution of the language  This has complained overbooked
our resources. 

Setting the target to 4.4, so this will be on the radar.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357490</commentid>
    <comment_count>34</comment_count>
      <attachid>239545</attachid>
    <who name="Balázs Palcsó">palcso.balazs</who>
    <bug_when>2014-02-01 06:49:40 -0500</bug_when>
    <thetext>Created attachment 239545
ProcessExplorer shows that eclipse is using the file that cannot be deleted.

I uses STS built on Eclipse 3.8.2
I have attached ProcessExplorerScreenshot.png that shows that Eclipse is holding a the file open and therefore it cannot delete it. Very strange it does not happen with any other files.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357491</commentid>
    <comment_count>35</comment_count>
    <who name="Balázs Palcsó">palcso.balazs</who>
    <bug_when>2014-02-01 06:57:00 -0500</bug_when>
    <thetext>(In reply to Balázs Palcsó from comment #34)
&gt; Created attachment 239545 [details]
&gt; ProcessExplorer shows that eclipse is using the file that cannot be deleted.
&gt; 
&gt; I uses STS built on Eclipse 3.8.2
&gt; I have attached ProcessExplorerScreenshot.png that shows that Eclipse is
&gt; holding a the file open and therefore it cannot delete it. Very strange it
&gt; does not happen with any other files.

To add to the above:
- I can delete all the files in the build dir manually outside Eclipse, except persistence.xml
- Refresh and then Project -&gt; Clean does not work, unless I restart Eclipse.

And this always affects me I mean comes back after each non-incremental build or when persistence.xml is changed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2384865</commentid>
    <comment_count>36</comment_count>
    <who name="Scott Cosner">infias</who>
    <bug_when>2014-04-04 13:31:20 -0400</bug_when>
    <thetext>I&apos;ve also been having this problem for some time now. We also use a OneJAR approach that builds everything into a single jar file using an ant script, but I have an xsl file on the classpath that generates this error every other clean/save/etc. The exclusion workaround also doesn&apos;t work for me either because of JUnit tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410186</commentid>
    <comment_count>37</comment_count>
    <who name="John Eblen">jeblen</who>
    <bug_when>2014-05-29 18:12:17 -0400</bug_when>
    <thetext>We are having a similar problem - see bug 403170. The &quot;Include Only&quot; Resource filter seems to be the culprit in that case and may also be the problem here. (I don&apos;t yet know why, though.) Try removing these filters and see if the problem still occurs.

I suspect that the filter causes the other, non-included resources to be handled differently by Eclipse, which breaks certain operations.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>222100</attachid>
            <date>2012-10-10 03:13:00 -0400</date>
            <delta_ts>2012-10-10 03:13:23 -0400</delta_ts>
            <desc>.classpath file</desc>
            <filename>.classpath</filename>
            <type>text/plain</type>
            <size>1276</size>
            <attacher name="Mauro Molinari">mauromol</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>223820</attachid>
            <date>2012-11-21 12:53:00 -0500</date>
            <delta_ts>2012-11-21 12:53:26 -0500</delta_ts>
            <desc>Plugin patch</desc>
            <filename>plugins.zip</filename>
            <type>application/x-zip-compressed</type>
            <size>4466531</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>223842</attachid>
            <date>2012-11-22 03:08:00 -0500</date>
            <delta_ts>2012-11-22 03:08:35 -0500</delta_ts>
            <desc>Produced log on 2012-11-22</desc>
            <filename>eclipse_jdt_output.txt</filename>
            <type>text/plain</type>
            <size>308294</size>
            <attacher name="Mauro Molinari">mauromol</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>223843</attachid>
            <date>2012-11-22 03:18:00 -0500</date>
            <delta_ts>2012-11-22 03:18:49 -0500</delta_ts>
            <desc>Full log of 2012-11-12 after repeating steps</desc>
            <filename>eclipse_jdt_output.txt</filename>
            <type>text/plain</type>
            <size>615311</size>
            <attacher name="Mauro Molinari">mauromol</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>239545</attachid>
            <date>2014-02-01 06:49:00 -0500</date>
            <delta_ts>2014-02-01 06:49:40 -0500</delta_ts>
            <desc>ProcessExplorer shows that eclipse is using the file that cannot be deleted.</desc>
            <filename>ProcessExplorerScreenshot.png</filename>
            <type>image/png</type>
            <size>64293</size>
            <attacher name="Balázs Palcsó">palcso.balazs</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>356450</bug_id>
          
          <creation_ts>2011-09-01 07:06:00 -0400</creation_ts>
          <short_desc>Fine-grained compile dependencies on workspace projects</short_desc>
          <delta_ts>2015-12-09 04:56:49 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=224708</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=105372</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=336376</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>376616</blocked>
    
    <blocked>398537</blocked>
    
    <blocked>414645</blocked>
    
    <blocked>423998</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Glase">stefan.glase</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>eclipse.org</cc>
    
    <cc>eclipse</cc>
    
    <cc>eclipse</cc>
    
    <cc>igor</cc>
    
    <cc>jarthana</cc>
    
    <cc>Joerg.Thoennes</cc>
    
    <cc>manderse</cc>
    
    <cc>markward.schubert</cc>
    
    <cc>nikop</cc>
    
    <cc>riendeau</cc>
    
    <cc>snowtoad2</cc>
    
    <cc>sslavic</cc>
    
    <cc>stanio</cc>
    
    <cc>stefan.glase</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>22</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1987655</commentid>
    <comment_count>0</comment_count>
    <who name="Stefan Glase">stefan.glase</who>
    <bug_when>2011-09-01 07:06:37 -0400</bug_when>
    <thetext>Build Identifier: 201107091000

Dependent projects can access classes and resources from their dependencies as long as these are picked up from projects that are resolved by the m2eclipse feature to resolve dependencies from Workspace.

Find an example multi module project below that shows the problem:
https://github.com/codescape/sandbox/tree/master/m2eclipse-resolve-workspace


Reproducible: Always

Steps to Reproduce:
0. See https://github.com/codescape/sandbox/tree/master/m2eclipse-resolve-workspace
1. Import all three projects into Eclipse as Maven projects
2. See no compilation errors
3. Open &quot;ConsumerTest&quot; in consumer project
4. See the conflicting &quot;extends ProviderTest&quot;
5. Run &quot;mvn test&quot; on console or run &quot;ConsumerTest&quot; as a JUnit run inside eclipse to produce a java.lang.NoClassDefFoundError: de/stefanglase/ProviderTest</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1987699</commentid>
    <comment_count>1</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2011-09-01 08:19:47 -0400</bug_when>
    <thetext>JDT treats each workspace project as single compile classpath entry. There is nothing m2e can do for finer-grained dependencies on projects until this is supported by JDT. Moving to JDT for consideration.

Do note that runtime classpath is setup correctly already, so even though the test class in the provided example compiles, running the test using standard JDT &quot;JUnit Test&quot; launch configuration type fails with CNFE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988792</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-09-04 18:01:22 -0400</bug_when>
    <thetext>Igor, can you confirm that this is the same as bug 224708?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988793</commentid>
    <comment_count>3</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2011-09-04 18:36:19 -0400</bug_when>
    <thetext>I believe this is a separate issue compared to bug 224708. This bug talks specifically about compile classpath dependencies among workspace projects and nothing else (see below for an example), while 224708 seems to concentrate on dealing with distinction between main and test sources, which is a problem already solved in m2e.

For example, consider two typical Maven projects, A and B

A/
  src/main/java       &lt;- source folder
  src/test/java       &lt;- source folder
  target/classes      &lt;- output folder for src/main/java
  target/test-classes &lt;- output folder for src/test/java

B/
  src/main/java       &lt;- source folder
  src/test/java       &lt;- source folder
  target/classes      &lt;- output folder for src/main/java
  target/test-classes &lt;- output folder for src/test/java

In Maven, dependency on project main and test outputs are treated separately, so A can depend on B&apos;s main output only or B&apos;s test output only or both main and test outputs. JDT, on the other hand, does not allow such fine-grained dependencies, and A can either depends on all B&apos;s outputs or none at all.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988799</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-09-04 18:58:25 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; ... 224708 seems to concentrate on
&gt; dealing with distinction between main and test sources, which is a problem
&gt; already solved in m2e.

That&apos;s interesting. How does m2e solve it?

&gt; For example, consider two typical Maven projects, A and B ...

Thanks, that explanation helps.
How would the dependency be expressed? By explicitly mentioning the 
output folder to depend on, or by qualifying the project dependency
with &quot;test&quot;, or &quot;main&quot;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988819</commentid>
    <comment_count>5</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2011-09-04 22:34:42 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; (In reply to comment #3)
&gt; &gt; ... 224708 seems to concentrate on
&gt; &gt; dealing with distinction between main and test sources, which is a problem
&gt; &gt; already solved in m2e.
&gt; 
&gt; That&apos;s interesting. How does m2e solve it?

Maven project metadata has information about main and test source and output folders. There are few key usecases when m2e uses this information directly, like, for example, when launching tests, but otherwise it simply makes this info available to m2e extensions that integrate m2e with other tools. For example, m2e-wtp integration deals with filtering test-only dependencies from WebApp classpath (disclaimer: I have not looked at m2e-wtp code for very long time now, so my information may be couple of years out of date).

&gt; &gt; For example, consider two typical Maven projects, A and B ...
&gt; 
&gt; Thanks, that explanation helps.
&gt; How would the dependency be expressed? By explicitly mentioning the 
&gt; output folder to depend on, or by qualifying the project dependency
&gt; with &quot;test&quot;, or &quot;main&quot;?

I am not sure what the implications are going one way or another. Maven model of what goes into main and test output folders is somewhat loose, it simply delegates to either maven itself or to thirdparty extensions and then picks the results in either main or test output folders. So for m2e it will be easier to express dependencies on output folders, assuming JDT will treat this as true in-workspace dependency.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988860</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-09-05 03:08:34 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; (In reply to comment #4)
&gt; &gt; (In reply to comment #3)
&gt; &gt; &gt; ... 224708 seems to concentrate on
&gt; &gt; &gt; dealing with distinction between main and test sources, which is a problem
&gt; &gt; &gt; already solved in m2e.
&gt; &gt; 
&gt; &gt; That&apos;s interesting. How does m2e solve it?
&gt; 
&gt; Maven project metadata has information about main and test source and output
&gt; folders. There are few key usecases when m2e uses this information directly,
&gt; like, for example, when launching tests, but otherwise it simply makes this
&gt; info available to m2e extensions that integrate m2e with other tools. For
&gt; example, m2e-wtp integration deals with filtering test-only dependencies from
&gt; WebApp classpath (disclaimer: I have not looked at m2e-wtp code for very long
&gt; time now, so my information may be couple of years out of date).

As you don&apos;t mention JDT here, doesn&apos;t this mean that in an m2e-configured 
Java project the incremental compiler will still compile with everything on 
one classpath and only when performing a full build via maven will errors
about illegal access from regular classes to test classes be reported?

Also content assist will propose test classes where it shouldn&apos;t, right?
Or does m2e have a solution for that, too?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988862</commentid>
    <comment_count>7</comment_count>
    <who name="Stefan Glase">stefan.glase</who>
    <bug_when>2011-09-05 03:12:51 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; (In reply to comment #4)
&gt; &gt; &gt; (In reply to comment #3)
&gt; &gt; &gt; &gt; ... 224708 seems to concentrate on
&gt; &gt; &gt; &gt; dealing with distinction between main and test sources, which is a problem
&gt; &gt; &gt; &gt; already solved in m2e.
&gt; &gt; &gt; 
&gt; &gt; &gt; That&apos;s interesting. How does m2e solve it?
&gt; &gt; 
&gt; &gt; Maven project metadata has information about main and test source and output
&gt; &gt; folders. There are few key usecases when m2e uses this information directly,
&gt; &gt; like, for example, when launching tests, but otherwise it simply makes this
&gt; &gt; info available to m2e extensions that integrate m2e with other tools. For
&gt; &gt; example, m2e-wtp integration deals with filtering test-only dependencies from
&gt; &gt; WebApp classpath (disclaimer: I have not looked at m2e-wtp code for very long
&gt; &gt; time now, so my information may be couple of years out of date).
&gt; 
&gt; As you don&apos;t mention JDT here, doesn&apos;t this mean that in an m2e-configured 
&gt; Java project the incremental compiler will still compile with everything on 
&gt; one classpath and only when performing a full build via maven will errors
&gt; about illegal access from regular classes to test classes be reported?
&gt; 
&gt; Also content assist will propose test classes where it shouldn&apos;t, right?
&gt; Or does m2e have a solution for that, too?

From the user experience I see that there is no solution in m2e for the content assist because I can see the test classes from regular classes. And that should not be the case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988951</commentid>
    <comment_count>8</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2011-09-05 06:55:17 -0400</bug_when>
    <thetext>&gt; 
&gt; As you don&apos;t mention JDT here, doesn&apos;t this mean that in an m2e-configured 
&gt; Java project the incremental compiler will still compile with everything on 
&gt; one classpath and only when performing a full build via maven will errors
&gt; about illegal access from regular classes to test classes be reported?
&gt; 
&gt; Also content assist will propose test classes where it shouldn&apos;t, right?
&gt; Or does m2e have a solution for that, too?

I knew I was forgetting something important! Yes, you are absolutely correct. Per-source-folder classpath is required to prevent &quot;leaking&quot; of test-only dependencies into main sources and there is not solution for this problem in m2e.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988984</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-09-05 09:04:09 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; I knew I was forgetting something important! Yes, you are absolutely correct.
&gt; Per-source-folder classpath is required to prevent &quot;leaking&quot; of test-only
&gt; dependencies into main sources and there is not solution for this problem in
&gt; m2e.

OK, so that part is bug 224708 and it is unresolved also with m2e.
Just wanted to be sure.

What&apos;s new in this bug is the inter-project aspect.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345876</commentid>
    <comment_count>10</comment_count>
      <attachid>238672</attachid>
    <who name="Stefan Glase">stefan.glase</who>
    <bug_when>2014-01-04 14:37:39 -0500</bug_when>
    <thetext>Created attachment 238672
demo project</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404094</commentid>
    <comment_count>11</comment_count>
    <who name="Daniel Huss">eclipse</who>
    <bug_when>2014-05-20 07:48:44 -0400</bug_when>
    <thetext>Does anyone have a rough estimate of the difficulty and/or hours required to implement this? And will those in charge review and possibly accept patches for this bug?

---
I think this one is rather insidious, since it silently corrupts the classpath of maven projects whenever a test scoped dependency is introduced. For simple projects this might even work because few will want to use JUnit and other testing frameworks in their non-test code.

However, we have many maven projects where general-purpose libraries such as guava are allowed in unit tests, but must not be a compile time dependency due to conflicting library versions at deployment time (aka Maven dependency hell).
Unsuspecting developers are using those libraries in non-test code because the classes show up in code assist, resulting in NoClassDefFoundErrors when the project is finally deployed :-/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404118</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 08:11:49 -0400</bug_when>
    <thetext>(In reply to Daniel Huss from comment #11)
I understand your situation and appreciate your interest.

IIRC, the one-classpath-per-project rule was a deliberate design decision. Thus, before investing time in a patch we need agreement that s.t. like per-source-folder classpaths (or an alternative solution) are feasible and will be accepted by the JDT leads.

Dani, can you say more?

As to difficulty: it cuts deep into the innards of JDT and I&apos;m not aware of a simple strategy to solve this. Some directions that I&apos;ve been pondering about in the past:

- indeed use two classpaths -&gt; requires s.t. like working with two LookupEnvironments instead of one. No stone in the compiler would remain unturned.

- multiple compiler invocations per project (isn&apos;t m2e already doing s.t. like this? sorry my memory fades ...)

- use s.t. similar to access restrictions to mark test-only dependencies, but then we still need to know which source files are test vs. main (currently, the compiler doesn&apos;t care what source folder a source file comes from ...). Attaching some qualifier to dependencies found on some part of the class path and using matching qualifiers also for source files from different source folders might be the most promising direction. Still needs to be checked if type lookup always has the required context to know the qualifier of the source file.

I&apos;d be happy to participate in a discussion about possible directions, but only after Luna has sailed :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404231</commentid>
    <comment_count>13</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2014-05-20 09:59:31 -0400</bug_when>
    <thetext>What I need for m2e is ability to associate IJavaProject with any IContainer, not just IProjects, and have arbitrary many of these new IJavaProjects for each IProject. I actually prototyped this some time ago. Not a small or simple change by any means, but I think it is doable and will probably be pure extension to the existing API, i.e. won&apos;t break existing clients provided they are not exposed to this new type of IJavaProjects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404470</commentid>
    <comment_count>14</comment_count>
    <who name="Tyler Van Gorder">snowtoad2</who>
    <bug_when>2014-05-20 14:32:01 -0400</bug_when>
    <thetext>The Gradle plug-in will have a similar requirement of having a separate classpath for test and one for source. I have a build system that is still reliant on Ant and I would like to move to Gradle.

My options are either to modify where Gradle looks for my test classes (I have to host these in different eclipse projects to get around this limitation), move to a different IDE (which is NOT my preference), or wait until this is fixed in Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433173</commentid>
    <comment_count>15</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-07-29 11:21:34 -0400</bug_when>
    <thetext>(In reply to Igor Fedorenko from comment #13)
&gt; What I need for m2e is ability to associate IJavaProject with any
&gt; IContainer, not just IProjects, and have arbitrary many of these new
&gt; IJavaProjects for each IProject. I actually prototyped this some time ago.
&gt; Not a small or simple change by any means, but I think it is doable and will
&gt; probably be pure extension to the existing API, i.e. won&apos;t break existing
&gt; clients provided they are not exposed to this new type of IJavaProjects.

This goes into similar direction as bug 245412. If test and source could be expressed as nested projects, we would be able to define the dependencies. Such an approach might be more realistic than changing the design decision that each Java project lands on the classpath. As Stephan already pointed out, to change this we would have to touch a lot of places and it&apos;s definitely out of scope for the JDT team.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>238672</attachid>
            <date>2014-01-04 14:37:00 -0500</date>
            <delta_ts>2014-01-04 14:37:39 -0500</delta_ts>
            <desc>demo project</desc>
            <filename>m2eclipse-resolve-workspace.zip</filename>
            <type>application/zip</type>
            <size>6517</size>
            <attacher name="Stefan Glase">stefan.glase</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>362693</bug_id>
          
          <creation_ts>2011-11-02 11:52:00 -0400</creation_ts>
          <short_desc>ClassCastException when running tests which use javassist generated proxies</short_desc>
          <delta_ts>2011-11-03 07:51:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jaroslaw Palka">jpalka</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2020231</commentid>
    <comment_count>0</comment_count>
    <who name="Jaroslaw Palka">jpalka</who>
    <bug_when>2011-11-02 11:52:15 -0400</bug_when>
    <thetext>Build Identifier: M20110909-1335

I am working on opensource projects which uses javassist to generate proxies. When I clean project and run tests under Eclipse I get following exception:
java.lang.ClassCastException: org.javassist.tmp.java.lang.Object_$$_javassist_4 cannot be cast to java.lang.String
	at net.primitive.beemap.BeanToMapTest$1.configure(BeanToMapTest.java:38)
	at net.primitive.beemap.MappingDef.configure(MappingDef.java:59)
	at net.primitive.beemap.BeanMappingBuilder.with(BeanMappingBuilder.java:53)
	at net.primitive.beemap.BeanToMapTest.should_map_entry_to_bean_property(BeanToMapTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

When I run mvn clean test, all tests pass.

It looks like an issue with Eclipse compiler.


Reproducible: Always

Steps to Reproduce:
1. Checkout project from https://bitbucket.org/kcrimson/beemap
2. From code run mvn clean test, all tests pass
3. Go to Eclipse-&gt;Clean and clean the project
4. Select src/test/java and Run tests (Alt+Shift+X T), some of the tests fail
5. When you go to command line and run mvn clean test and later on run same tests from Eclipse without cleaning your project) all test pass.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>368444</bug_id>
          
          <creation_ts>2012-01-12 07:29:00 -0500</creation_ts>
          <short_desc>Invisible &quot;indirectly referenced&quot; compilation error causes runtime problems</short_desc>
          <delta_ts>2013-01-29 09:34:26 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ville Oikarinen">ville</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>ville</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2049449</commentid>
    <comment_count>0</comment_count>
    <who name="Ville Oikarinen">ville</who>
    <bug_when>2012-01-12 07:29:29 -0500</bug_when>
    <thetext>Build Identifier: 20110916-0149

This is a combination of several serious errors. Compiler fails without reason. The failure is not properly reported. Junit runner does not find all tests so some (or all) tests are silently excluded from test run.

Reproducible: Always

Steps to Reproduce:
Please import the attached collection of projects into Eclipse Indigo.

The problems tab shows lots of red. Touch CodeGenerator.java to trigger code generation. Then a series of cleaning and touching uncompilable files is needed to get rid of all red. (Btw, why is it so difficult? Why doesn&apos;t eclipse just run all builders and be happy?)

Now, try to run the tests project as junit test. Sometimes eclipse will complain that no tests are found, and sometimes it runs only part of them. (Why is this nondeterministic? Different eclipse instances behave in a different way.)

There are three tests in the project, so the junit runner is wrong.

Open BrokenTest.java. The java editor now shows a compilation error.

So, the first serious bug in the chain of problems is this compilation error. There is nothing wrong in the code or in the classpaths.

The second serious bug is that this compilation error can only be seen in the editor. Not in the problems tab nor in the Package explorer.

The third serious bug is that the junit test finder silently fails when it stumbles upon this problem file. Either it tells there are no tests (which was how I found this bug) or, which is worse, pretends all is well and just runs some of the tests. The test finder should clearly report the compilation error instead.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049451</commentid>
    <comment_count>1</comment_count>
      <attachid>209369</attachid>
    <who name="Ville Oikarinen">ville</who>
    <bug_when>2012-01-12 07:32:45 -0500</bug_when>
    <thetext>Created attachment 209369
Set of projects to reproduce

Here is the set of projects to reproduce the bugs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049452</commentid>
    <comment_count>2</comment_count>
    <who name="Ville Oikarinen">ville</who>
    <bug_when>2012-01-12 07:33:40 -0500</bug_when>
    <thetext>Then some more detailed analysis:

I&apos;m not sure if all aspects are absolutely needed, but the compilation problems are caused when we have:
- code generation (ant builder)
- exporting generated classes that are outside the project that does the exporting (inside a project dedicated to building)
- inner classes and interfaces
- referring to outside inner interface from generated code
- overloaded method using generated interfaces

For example, applying &quot;Move Type to New File&quot; refactoring to Library.LibraryInterface solves all problems (our current workaround). On the other hand, inner interfaces are not a problem in other contexts that miss some other aspects of this scenario.

Another interesting fact is that the compilation actually seems to succeed under hood!

Open HandWrittenImplForInnerInterfaceTwo.java. Again, the editor complains about not finding an indirectly referenced class. But the class works when running GenProviderMain.java as an application!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049459</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 07:45:07 -0500</bug_when>
    <thetext>The compiler reports two missing types:
eclipsebug.generated.Generated.InnerClass.InnerInterfaceOne;
eclipsebug.generated.Generated.InnerClass.InnerInterfaceTwo;

And indeed these types are missing in the set of projects. So, I don&apos;t see the problem here</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049463</commentid>
    <comment_count>4</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 07:59:06 -0500</bug_when>
    <thetext>In both HandWrittenImplForInnerInterfaceTwo.java and BrokenTest.java the error is about the missing interfaces.
But it looks like what you see is different from what I see. Can you tell me the exact steps to follow after importing all these projects into Eclipse? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049466</commentid>
    <comment_count>5</comment_count>
    <who name="Ville Oikarinen">ville</who>
    <bug_when>2012-01-12 08:05:16 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; In both HandWrittenImplForInnerInterfaceTwo.java and BrokenTest.java the error
&gt; is about the missing interfaces.
&gt; But it looks like what you see is different from what I see. Can you tell me
&gt; the exact steps to follow after importing all these projects into Eclipse?
&gt; Thanks!

Yes, like I described in the steps, _initially_ eclipse complains. Those interfaces are code-generated, and it takes some cleaning and source-touching to make eclipse find those classes. Oh, and refreshing is needed, too.

But once you get the files generated and their location properly refreshed for all needers, then you&apos;ll see what I see.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049467</commentid>
    <comment_count>6</comment_count>
    <who name="Ville Oikarinen">ville</who>
    <bug_when>2012-01-12 08:07:21 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; But it looks like what you see is different from what I see. Can you tell me
&gt; the exact steps to follow after importing all these projects into Eclipse?

And I&apos;d very much like to give you the _exact_ steps, but I don&apos;t have them. Maybe I&apos;ll file that as another bug some day :) Anyway, I&apos;m sure you can clear the problems tab by hitting clean, refresh and touching files, eventually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049495</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 08:52:38 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Yes, like I described in the steps, _initially_ eclipse complains. Those
&gt; interfaces are code-generated, and it takes some cleaning and source-touching
&gt; to make eclipse find those classes. Oh, and refreshing is needed, too.
&gt; 
&gt; But once you get the files generated and their location properly refreshed for
&gt; all needers, then you&apos;ll see what I see.

That&apos;s the problem in my workspace. I am unable to generate these classes. The build itself fails with the message &quot;build.xml:22: Unable to find a javac compiler&quot;. Do I need to have javac in some specified directory?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049618</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 11:38:33 -0500</bug_when>
    <thetext>I&apos;ll take a look at this for M6 along with
a couple of other indirect reference issues
already in my plate. (bug 328057, bug 320965)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2071325</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-26 23:45:21 -0500</bug_when>
    <thetext>Don&apos;t expect to get to this in M6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082666</commentid>
    <comment_count>10</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-19 12:11:21 -0400</bug_when>
    <thetext>I think this got fixed through bug 372418. Can you please verify with 3.8M6?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2097356</commentid>
    <comment_count>11</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-24 00:09:10 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; I think this got fixed through bug 372418. Can you please verify with 3.8M6?
I am mistaken. This shouldn&apos;t be to do with 372418. 

I am able to reproduce this issue partially:).
Before I explain the problems, the solution for your problem is to change the following preference. Under Preferences-&gt;Java-&gt;Compiler-&gt;Building-&gt;Build Path Problems, deselect &apos;Abort build when build path errors occur&apos;. After doing this refresh the project &apos;build&apos;. I see that you are refreshing the folders through the builder. I will investigate that issue.

&gt;So, the first serious bug in the chain of problems is this compilation error.
&gt;There is nothing wrong in the code or in the classpaths.

As you would seen from my solution, we have a preference to stop building if they are build errors causing this issue. 

&gt;The second serious bug is that this compilation error can only be seen in the
&gt;editor. Not in the problems tab nor in the Package explorer.

I am not able to see this problem. I do see &apos;build path errors&apos; on the package explorer and problems tab. 


&gt; The third serious bug is that the junit test finder silently fails when it
&gt;stumbles upon this problem file. Either it tells there are no tests (which was
&gt;how I found this bug) or, which is worse, pretends all is well and just runs
&gt;some of the tests. The test finder should clearly report the compilation error
&gt;instead.

This is just like the second serious bug you have mentioned. I am seeing the &apos;build path&apos; errors in the package explorer.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2097357</commentid>
    <comment_count>12</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-24 00:10:31 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #5)
&gt; &gt; Yes, like I described in the steps, _initially_ eclipse complains. Those
&gt; &gt; interfaces are code-generated, and it takes some cleaning and source-touching
&gt; &gt; to make eclipse find those classes. Oh, and refreshing is needed, too.
&gt; &gt; 
&gt; &gt; But once you get the files generated and their location properly refreshed for
&gt; &gt; all needers, then you&apos;ll see what I see.
&gt; 
&gt; That&apos;s the problem in my workspace. I am unable to generate these classes. The
&gt; build itself fails with the message &quot;build.xml:22: Unable to find a javac
&gt; compiler&quot;. Do I need to have javac in some specified directory?
Ayush, you need to use the jdk to launch Eclipse as the build.xml uses javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2098317</commentid>
    <comment_count>13</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-25 12:00:46 -0400</bug_when>
    <thetext>We will not be able to do anything for M7.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>209369</attachid>
            <date>2012-01-12 07:32:00 -0500</date>
            <delta_ts>2012-01-12 07:32:45 -0500</delta_ts>
            <desc>Set of projects to reproduce</desc>
            <filename>projects-to-reproduce-bug.tar.bz2</filename>
            <type>application/x-bz2</type>
            <size>3319</size>
            <attacher name="Ville Oikarinen">ville</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>389488</bug_id>
          
          <creation_ts>2012-09-13 06:10:00 -0400</creation_ts>
          <short_desc>JDT update totally destroys your Eclipse installation.</short_desc>
          <delta_ts>2013-11-21 14:31:09 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Redsandro  ">redsandro</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2159497</commentid>
    <comment_count>0</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2012-09-13 06:10:04 -0400</bug_when>
    <thetext>Today I installed updates. After restarting Eclipse, my project opened totally broken. A quick overview taught me that any installed plugins or customizations had been completely ignored. It&apos;s as if ~/.eclipse/ doesn&apos;t even exist.

Luckily, I had a 2-month-old backup of my home including ~/.eclipse/ and I could retry installing all updates one by one.

Turns out THIS is the update that somehow breaks EVERYTHING ELSE too:
Eclipse Java Development Tools	3.7.2.v20120120-1414-7z8gFcuFMP7BW5XTz0jLTnz0l9B1

I have selected JDT Core to report this bug in, I&apos;m not sure it&apos;s correct.
But JDT is the cause, and the fact that it breaks everything else seems pretty core&apos;y to me.

In my particular case, I was working on a Javascript Project, and all the open editor-windows said: 
&quot;Could not open the editor: No editor descriptor for id org.eclipse.wst.jsdt.ui.CompilationUnitEditor&quot;

Also, all plugin-icons were gone from the about-window.

Just in case it&apos;s relevant, these are the plugins I have installed to make this scenario possible:

(incoming bulk of text alert)

  Android DDMS	20.0.3.v201208082019-427395	com.android.ide.eclipse.ddms.feature.group	The Android Open Source Project
  Android Development Tools	20.0.3.v201208082019-427395	com.android.ide.eclipse.adt.feature.group	The Android Open Source Project
  Android Hierarchy Viewer	20.0.3.v201208082019-427395	com.android.ide.eclipse.hierarchyviewer.feature.group	The Android Open Source Project
  Android Native Development Tools	20.0.3.v201208082019-427395	com.android.ide.eclipse.ndk.feature.group	The Android Open Source Project
  Android Traceview	20.0.3.v201208082019-427395	com.android.ide.eclipse.traceview.feature.group	The Android Open Source Project
  ChromeDevTools SDK WIP Backends	0.1.8.201207090606	org.chromium.sdk.wipbackends.feature.group	The Chromium Authors
  Chromium JavaScript Debugger Bridge to JSDT	0.3.6.201207090605	org.chromium.debug.jsdtbridge.feature.group	The Chromium Authors
  Chromium JavaScript Remote Debugger	0.3.6.201207090605	org.chromium.debug.feature.group	The Chromium Authors
  Eclipse CVS Client	1.3.100.dist-7B78FHl9exZ_	org.eclipse.cvs.feature.group	Eclipse.org
  Eclipse CVS Client Resources	1.3.100.v20110520-0800-7B78FHl9VF7BD7KBM4GP9C	org.eclipse.cvs.source.feature.group	Eclipse.org
  Eclipse Help Developer Resources	1.3.0.v20110530-0844-7i7uFFmFFl8nvqbDpEqTvx	org.eclipse.help.source.feature.group	Eclipse.org
  Eclipse Java Development Tools	3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B	org.eclipse.jdt.feature.group	Eclipse.org
  Eclipse Java Web Developer Tools	3.3.2.v201112072049-7F7AFO7C25ToiIbpoiuW12GT78Mciy6W7iwuxaco	org.eclipse.jst.web_ui.feature.feature.group	Eclipse Web Tools Platform
  Eclipse PDE Plug-in Developer Resources	3.7.2.v20120120-1420-7b7rFUOFEx2Xnqafnpz0E--0	org.eclipse.pde.source.feature.group	Eclipse.org
  Eclipse Platform	3.7.0.I20110613-1736	org.eclipse.platform.ide	null
  Eclipse Plug-in Development Environment	3.7.2.dist-7b7rFUPF9fnFH	org.eclipse.pde.feature.group	Eclipse.org
  Eclipse Web Developer Tools	3.3.2.v201111030500-7O7IFj6EMjB7yO1Xs_G1kMtQeOye6HTXFWve95_R	org.eclipse.wst.web_ui.feature.feature.group	Eclipse Web Tools Platform
  Eclipse XML Editors and Tools	3.3.2.v201112072049-7H7EFZ7DxumTmce4khcSkIiqoD8eDMKlT8Oz011P	org.eclipse.wst.xml_ui.feature.feature.group	Eclipse Web Tools Platform
  Eclipse XSL Developer Tools	1.3.1.v201109012200-7T7YFRTFIqUoIrvbEtBlSIJXGZNg	org.eclipse.wst.xsl.feature.feature.group	Eclipse Web Tools Platform
  Equinox p2 RCP Management Facilities Source	1.0.1.dist-782EqAUkcWGYdGMiW9DK982713B5	org.eclipse.equinox.p2.rcp.feature.source.feature.group	Eclipse.org - Equinox
  JavaScript Development Tools	1.3.2.v201201112313-7G78FZvFC7sRekSz-g-nAlz	org.eclipse.wst.jsdt.feature.feature.group	Eclipse Web Tools Platform
  PHP Development Tools (PDT) SDK Feature	3.0.0.v201201110400-77-184_2BEICRgM_fMVcz0M4Va9O	org.eclipse.php.sdk.feature.group	Eclipse.org
  Spket IDE	1.6.23	com.spket.ui.feature.group	spket.com
  Spket Text Editor	1.6.23	com.spket.sted.feature.group	spket.com
  Tracer for OpenGL ES	20.0.0.v201206242043-391819	com.android.ide.eclipse.gldebugger.feature.group	The Android Open Source Project
  Web Page Editor	2.3.6.v201201181342-46AB9oB5885D6R5D86	org.eclipse.jst.webpageeditor.feature.feature.group	Eclipse.org
  Xerces for Spket IDE	2.8.0	com.spket.xml.external.feature.group	spket.com</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2159865</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-13 16:56:18 -0400</bug_when>
    <thetext>Disclaimer: most of my own experiments with an eclipse installed as admin and installed software going into ~/.eclipse ended in some kind of trouble. I will always recommend to install Eclipse as a regular user so updates go directly into the install.

That said, we should still try to find out what exactly went awry in your case.

Are those 3.7.2 versions what you previously had (before the update) or the result of the update?

If installing JDT broke the system, which exact plugin versions where involved (plugins/org.eclipse.jdt.*)?

Versions like &quot;3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B&quot; seem broken, the unexpected part is: &quot;dist&quot;. Any idea where those come from?

When you launched the broken Eclipse, were any errors logged to &lt;workspace&gt;/.metadata/.log ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160120</commentid>
    <comment_count>2</comment_count>
      <attachid>221085</attachid>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2012-09-14 09:55:56 -0400</bug_when>
    <thetext>Created attachment 221085
Eclipse error log

Well, Ubuntu and derivatives, a reasonably popular distro branch, works this way when you install Eclipse from the software manager. Eclipse is installed as system app, and any fooling around users do get&apos;s stored in their homes.

&gt; Are those 3.7.2 versions what you previously had (before the update) or the 
&gt; result of the update?

The list was copied right before I installed the problematic JDT. I updated half of them one by one first though, the crash also &apos;works&apos; without updating them first.

&gt; If installing JDT broke the system, which exact plugin versions where involved 
&gt; (plugins/org.eclipse.jdt.*)?

This is interesting, I find nothing with jdt in the name? Not in ~/.eclipse/(..)/plugins/ or /usr/share/eclipse/plugins/.

Oh wait let me try to locate:

$ locate org.eclipse.jdt
/usr/lib/eclipse/dropins/jdt/features/org.eclipse.jdt_3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.apt.core_3.3.500.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.apt.pluggable.core_1.0.400.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.apt.ui_3.3.300.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.compiler.apt_1.0.400.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.compiler.tool_1.0.100.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.core.manipulation_1.4.0.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.debug.ui_3.6.1.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.debug_3.7.1.dist
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.doc.user_3.7.1.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.junit.core_3.7.0.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.junit.runtime_3.4.300.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.junit4.runtime_1.1.200.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.junit_3.7.0.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.launching_3.6.1.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.ui_3.7.2.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt_3.7.2.dist.jar
/usr/lib/eclipse/dropins/jdt/plugins/org.eclipse.jdt.debug_3.7.1.dist
/usr/lib/eclipse/dropins/sdk/features/org.eclipse.jdt.source_3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B
/usr/lib/eclipse/plugins/org.eclipse.jdt.core_3.7.3.dist.jar
/usr/share/eclipse/dropins/jdt/features/org.eclipse.jdt_3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B
/usr/share/eclipse/dropins/sdk/features/org.eclipse.jdt.source_3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B


&gt; Versions like &quot;3.7.2.dist-7z8gFcuFFZOlyA8Br73543A7B15B&quot; seem broken, the 
&gt; unexpected part is: &quot;dist&quot;. Any idea where those come from?

I don&apos;t know if Ubuntu releases a special Eclipse? Nah that&apos;s probably irrelevant, the update URL is normal. Here&apos;s the full list of update URLs that are enabled:

https://dl-ssl.google.com/android/eclipse/
http://download.eclipse.org/releases/indigo
http://chromedevtools.googlecode.com/svn/update/dev/
http://www.agpad.com/update/ (SPKET, don&apos;t really use it anymore)
http://downloads.zend.com/studio-eclipse/updates/9_0

&gt; When you launched the broken Eclipse, were any errors logged to 
&gt; &lt;workspace&gt;/.metadata/.log ?

Let&apos;s try it out. First I install:

Eclipse Java Development Tools version 3.7.2.v20120120-1414-7z8gFcuFMP7BW5XTz0jLTnz0l9B1 with ID org.eclipse.jdt.feature.group

Then I close Eclipse, remove .log, open Eclipse, see that nothing works, and see a new .log. I&apos;ve attached the log. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160130</commentid>
    <comment_count>3</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2012-09-14 10:10:32 -0400</bug_when>
    <thetext>The update seems to install org.eclipse.jdt.* in ~/.eclipse/org.eclipse.platform(...)/plugins though. But removing them all doesn&apos;t fix Eclipse. The update must be doing something else too.

I&apos;m not entirely sure, but it looks like the update also removed some of the org.eclipse.wst.* files, there used to be more, but maybe that&apos;s normal pruning. I don&apos;t know.

And it also installed org.junit4_4.8.1.v20100525 and org.hamcrest.core_1.1.0.v20090501071000.jar. (?)

But that&apos;s probably irrelevant, most changes after the update are in /configuration/ anyway.

In case of relevance, these are the org.eclipse.jdt.* files present in /plugins/ after the JDT installation:

org.eclipse.jdt.debug_3.7.1.v20111006_r372
org.eclipse.jdt.apt.core_3.3.500.v20110420-1015.jar
org.eclipse.jdt.apt.pluggable.core_1.0.400.v20110305-1450.jar
org.eclipse.jdt.apt.ui_3.3.300.v20110305-1450.jar
org.eclipse.jdt.compiler.apt_1.0.400.v0110816-0800.jar
org.eclipse.jdt.compiler.tool_1.0.100.v_B79_R37x.jar
org.eclipse.jdt.core.manipulation_1.4.0.v20110928-1453.jar
org.eclipse.jdt.core_3.7.3.v20120119-1537.jar
org.eclipse.jdt.debug.ui_3.6.1.v20111006_r372.jar
org.eclipse.jdt.doc.user_3.7.1.r372_v20111103.jar
org.eclipse.jdt.junit.core_3.7.0.v20110928-1453.jar
org.eclipse.jdt.junit.runtime_3.4.300.v20110928-1453.jar
org.eclipse.jdt.junit4.runtime_1.1.200.v20110928-1453.jar
org.eclipse.jdt.junit_3.7.0.v20110928-1453.jar
org.eclipse.jdt.launching_3.6.1.v20111006_r372.jar
org.eclipse.jdt.ui_3.7.2.v20120109-1427.jar
org.eclipse.jdt_3.7.2.v201202080800.jar</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2332996</commentid>
    <comment_count>4</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2013-11-21 10:32:59 -0500</bug_when>
    <thetext>Oh shoot, today I stepped into the exact same pile of poo. I forgot never to update. Eclipse: 3.8.1 in Ubuntu 13.10.

Let me go look for that backup from 2012.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333101</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-21 13:03:41 -0500</bug_when>
    <thetext>Large numbers of users regularly update Eclipse incl. JDT.

However, when you installed Eclipse as an Ubuntu package, they may expect you to use the normal Ubuntu procedure for updating, since one way of updating may confuse the other one.

Personally, I find installing from http://www.eclipse.org/downloads/ much more convenient than what any linux distro can package into their system.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333109</commentid>
    <comment_count>6</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2013-11-21 13:19:12 -0500</bug_when>
    <thetext>I see. I thought Ubuntu only installs the main IDE (for all users), and plugins/plugin-updates were always to be installed manually (in home) from within Eclipse.

After all, in-Eclipse updates always worked until that one day in 2012.

I should throw away all that stuff in home and start over. But it&apos;s so convenient that my entire workflow just works without figuring out what I am actually using, finding sources, install, re-setup preferences, etc.

I&apos;m gonna have to make a choice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333127</commentid>
    <comment_count>7</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2013-11-21 14:00:24 -0500</bug_when>
    <thetext>You are right. Ubuntu keeps a bunch of plugins in /usr/share/eclipse/plugins.
Any update a user does goes into ~/.eclipse/org.eclipse.platform_3.8_155965261/plugins.

This is usually not a problem, since ~ overrules the share/ plugins, but in this single case it does cause problems.

Whether or not this method is preferable, in my opinion the JDT plugin is supposed to play nice just like everyone else. This breaking behavior should be considered unwanted.

If a car crash gives you injury, you can say &quot;You shouldn&apos;t crash&quot; or you can add seat belts.

PS - Similar bug, different version: Eclipse Java Development Tools	3.8.2.v20130116-090414-8-8nFu3FNOfwKLRttdWQJ-2z-_83</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333132</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-21 14:09:50 -0500</bug_when>
    <thetext>(In reply to Redsandro   from comment #7)
&gt; Whether or not this method is preferable, in my opinion the JDT plugin is
&gt; supposed to play nice just like everyone else. This breaking behavior should
&gt; be considered unwanted.

We&apos;d be happy to fix a bug, if you say in which way JDT in particular misbehaved. So far all this looks more like a general packaging / installation issue, but feel free to convince us otherwise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333134</commentid>
    <comment_count>9</comment_count>
      <attachid>237629</attachid>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2013-11-21 14:29:38 -0500</bug_when>
    <thetext>Created attachment 237629
2013 error log

New error log</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333137</commentid>
    <comment_count>10</comment_count>
    <who name="Redsandro  ">redsandro</who>
    <bug_when>2013-11-21 14:31:09 -0500</bug_when>
    <thetext>Well in 2012 I thought the javascript editor was broken, but now I notice it just isn&apos;t there anymore after the update. Maybe this means the plugin fails to load entirely? Any editor still open in a previous session will stop with the error mentioned in the initial bugreport. There is also an error log attached to the initial bugreport, and here is a new one (see above).


1) Install latest Ubuntu (13.10)
2) Install latest Eclipse from repo (Version: 3.8.1)
3) Help -&gt; Check for updates
4) Select latest Eclipse Java Development Tools (3.8.2.v20130116-090414-8-8nFu3FNOfwKLRttdWQJ-2z-_83)
5) Update and restart Eclipse when prompted
6) The javascript editor doesn&apos;t exist anymore. (Cannot choose it when editing .js files)
7) Any previous sessions where javascript editors were open will fail to load with the message: &quot;Could not open the editor: No editor descriptor for id org.eclipse.wst.jsdt.ui.CompilationUnitEditor&quot;




Details &gt;

org.eclipse.ui.PartInitException: No editor descriptor for id org.eclipse.wst.jsdt.ui.CompilationUnitEditor
	at org.eclipse.ui.internal.EditorReference.createPartHelper(EditorReference.java:601)
	at org.eclipse.ui.internal.EditorReference.createPart(EditorReference.java:465)
	at org.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:595)
	at org.eclipse.ui.internal.EditorAreaHelper.setVisibleEditor(EditorAreaHelper.java:271)
	at org.eclipse.ui.internal.EditorManager.setVisibleEditor(EditorManager.java:1459)
	at org.eclipse.ui.internal.EditorManager$5.runWithException(EditorManager.java:972)
	at org.eclipse.ui.internal.StartupThreading$StartupRunnable.run(StartupThreading.java:31)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3537)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3189)
	at org.eclipse.ui.application.WorkbenchAdvisor.openWindows(WorkbenchAdvisor.java:803)
	at org.eclipse.ui.internal.Workbench$33.runWithException(Workbench.java:1600)
	at org.eclipse.ui.internal.StartupThreading$StartupRunnable.run(StartupThreading.java:31)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3537)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3189)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2609)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>221085</attachid>
            <date>2012-09-14 09:55:00 -0400</date>
            <delta_ts>2012-09-14 09:55:56 -0400</delta_ts>
            <desc>Eclipse error log</desc>
            <filename>eclipse.2012-09-14.log</filename>
            <type>text/x-log</type>
            <size>7429</size>
            <attacher name="Redsandro  ">redsandro</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>237629</attachid>
            <date>2013-11-21 14:29:00 -0500</date>
            <delta_ts>2013-11-21 14:29:38 -0500</delta_ts>
            <desc>2013 error log</desc>
            <filename>.log</filename>
            <type>text/x-log</type>
            <size>7329</size>
            <attacher name="Redsandro  ">redsandro</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>389835</bug_id>
          
          <creation_ts>2012-09-18 14:34:00 -0400</creation_ts>
          <short_desc>java.lang.NullPointerException to run auto tests on solaris-gtk</short_desc>
          <delta_ts>2012-12-10 11:26:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.2</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Solaris-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ludmila Shikhvarg">ludmila.shikhvarg</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2161463</commentid>
    <comment_count>0</comment_count>
    <who name="Ludmila Shikhvarg">ludmila.shikhvarg</who>
    <bug_when>2012-09-18 14:34:30 -0400</bug_when>
    <thetext>Build Identifier: Version: 3.7.2 Build id: M20120208-0800
The problem seen on solaris-gtk against Oracle jdk7 and jdk8:
bash-3.00$ ./runtests
Buildfile: /home1/dtftest/eclipse_3.7.2/eclipse-testing/test.xml

all:

setJVMfromUserSpecified:

setJVMProperties:

jdtcorebuilder:

junit:

setRuntimeArchive:
     [echo] setRuntimeArchive os solaris ws gtk arch x86
     [echo] runtimeArchive eclipse-SDK-3.7.2-solaris-gtk-x86.zip !!!

init:

setup:

setupRepo:

setup-zip:
   [delete] Deleting directory /home1/dtftest/eclipse_3.7.2/eclipse-testing/test-eclipse
    [mkdir] Created dir: /home1/dtftest/eclipse_3.7.2/eclipse-testing/test-eclipse

installExtraPlugins:

installTestPlugins:

setupPlatform:
     [echo] os.arch x86
     [echo] platformTarget platform-zip platformArchive /home1/dtftest/eclipse_3.7.2/eclipse-testing/eclipse-platform-3.7.1-solaris-gtk-x86.zip

platform-zip:
   [delete] Deleting directory /home1/dtftest/eclipse_3.7.2/eclipse-testing/platformLocation
    [mkdir] Created dir: /home1/dtftest/eclipse_3.7.2/eclipse-testing/platformLocation
     [echo] -installIU org.eclipse.jdt.core.tests.builder +

configureTeamTest:

unzipderby:

configureDeltaPack:
     [echo] trying to find org.eclipse.jdt.core.tests.builder_*
     [echo] trying to find org.eclipse.jdt.core.tests.builder_3.7.3.v20111214-0627/test.xml

runSuite:

init:

suite:

init:
     [echo] basedir = /home1/dtftest/eclipse_3.7.2/eclipse-testing/test-eclipse/eclipse

core-test:

java-test:
     [echo] Running org.eclipse.jdt.core.tests.builder.BuilderTests. Result file: /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/solaris.gtk.x86/org.eclipse.jdt.core.tests.builder.BuilderTests.xml.
     [java] An exception occurred while writing to the platform log:
     [java] java.lang.NullPointerException
     [java]     at org.eclipse.equinox.launcher.Main.openLogFile(Main.java:2467)
     [java]     at org.eclipse.equinox.launcher.Main.log(Main.java:2300)
     [java]     at org.eclipse.equinox.launcher.Main.run(Main.java:1421)
     [java]     at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
     [java]     at org.eclipse.core.launcher.Main.main(Main.java:34)
     [java] Logging to the console instead.
     [java] !ENTRY org.eclipse.equinox.launcher 4 0 2012-09-18 11:01:28.901
     [java] !MESSAGE Exception launching the Eclipse Platform:
     [java] An exception occurred while writing to the platform log:
     [java] java.lang.NullPointerException
     [java]     at org.eclipse.equinox.launcher.Main.openLogFile(Main.java:2467)
     [java]     at org.eclipse.equinox.launcher.Main.log(Main.java:2300)
     [java]     at org.eclipse.equinox.launcher.Main.run(Main.java:1422)
     [java]     at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
     [java]     at org.eclipse.core.launcher.Main.main(Main.java:34)
     [java] Logging to the console instead.
     [java] !STACK
     [java] java.lang.VerifyError: Expecting a stackmap frame at branch target 26
     [java] Exception Details:
     [java]   Location:
     [java]     com/oracle/security/ucrypto/UcryptoProvider.&lt;init&gt;()V @16: ifnonnull
     [java]   Reason:
     [java]     Expected stackmap frame at this location.
     [java]   Bytecode:
     [java]     0000000: b801 004c 2a12 090f 120a b700 0bb2 000c
     [java]     0000010: c700 0a2b 0604 54a7 0016 bb00 0d59 2ab2
     [java]     0000020: 000c b700 0eb8 000f 572b 0704 54b2 0010
     [java]     0000030: c600 0a2b 0804 54a7 000c 2ab3 0010 2b10
     [java]     0000040: 0604 542b 1007 0454 b1
     [java]   Stackmap Table:
     [java]     full_frame(@45,{Object[#82],Object[#121]},{})
     [java]     same_frame(@67)
     [java]
     [java]     at java.lang.Class.getDeclaredConstructors0(Native Method)
     [java]     at java.lang.Class.privateGetDeclaredConstructors(Class.java:2403)
     [java]     at java.lang.Class.getConstructor0(Class.java:2713)
     [java]     at java.lang.Class.getConstructor(Class.java:1672)
     [java]     at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:223)
     [java]     at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:206)
     [java]     at java.security.AccessController.doPrivileged(Native Method)
     [java]     at sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:206)
     [java]     at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:187)
     [java]     at sun.security.jca.ProviderList.getProvider(ProviderList.java:233)
     [java]     at sun.security.jca.ProviderList$3.get(ProviderList.java:148)
     [java]     at sun.security.jca.ProviderList$3.get(ProviderList.java:143)
     [java]     at java.util.AbstractList$Itr.next(AbstractList.java:358)
     [java]     at java.security.SecureRandom.getPrngAlgorithm(SecureRandom.java:542)
     [java]     at java.security.SecureRandom.getDefaultPRNG(SecureRandom.java:187)
     [java]     at java.security.SecureRandom.&lt;init&gt;(SecureRandom.java:155)
     [java]     at java.io.File$TempDirectory.&lt;clinit&gt;(File.java:1797)
     [java]     at java.io.File.createTempFile(File.java:1891)
     [java]     at org.eclipse.equinox.launcher.Main.canWrite(Main.java:1290)
     [java]     at org.eclipse.equinox.launcher.Main.computeDefaultConfigurationLocation(Main.java:1272)
     [java]     at org.eclipse.equinox.launcher.Main.getConfigurationLocation(Main.java:1698)
     [java]     at org.eclipse.equinox.launcher.Main.processConfiguration(Main.java:1754)
     [java]     at org.eclipse.equinox.launcher.Main.basicRun(Main.java:549)
     [java]     at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
     [java]     at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
     [java]     at org.eclipse.core.launcher.Main.main(Main.java:34)
     [java]
     [java] Java Result: 13

collect-results:
     [xslt] Transforming into /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/solaris.gtk.x86

cleanup:

run:

collect:

genResults:
     [copy] Copying 1 file to /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/xml
     [xslt] Transforming into /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/html
     [xslt] Processing /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/xml/org.eclipse.jdt.core.tests.builder_solaris.gtk.x86.xml to /home1/dtftest/eclipse_3.7.2/eclipse-testing/results/html/org.eclipse.jdt.core.tests.builder_solaris.gtk.x86.html
     [xslt] Loading stylesheet /home1/dtftest/eclipse_3.7.2/eclipse-testing/test-eclipse/eclipse/plugins/org.eclipse.test_3.3.100/JUNIT.XSL
BUILD SUCCESSFUL

BUILD SUCCESSFUL
Total time: 25 seconds

It says &quot;BUILD SUCCESSFUL&quot;, but none of the tests are executed (/results/html files are empty)

Steps to Reproduce:
1. Use eclipse-Automated-Tests-3.7.2 to run automated tests with jdk7 or jdk8.
2. Install jdk from:
http://jdk8.java.net/download.html
http://jdk7.java.net/download.html
3. ./runtests 

All tests are run fine with jdk6 only.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2192480</commentid>
    <comment_count>1</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2012-12-10 09:44:13 -0500</bug_when>
    <thetext>Moving to JDT/Core for comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2192544</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-12-10 11:03:02 -0500</bug_when>
    <thetext>Looks like the VerifyError is a bigger problem. 

Olivier, do you have any idea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2192554</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-12-10 11:19:48 -0500</bug_when>
    <thetext>I don&apos;t have a solaris machine on which I could try to run the tests. The VerifyError seems to come from the class:
com/oracle/security/ucrypto/UcryptoProvider

It would be good to try another VM. Looks suspicious. I don&apos;t have the .class file to check the validity of the VerifyError.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2192557</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-12-10 11:26:13 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; I don&apos;t have a solaris machine on which I could try to run the tests. The
&gt; VerifyError seems to come from the class:
&gt; com/oracle/security/ucrypto/UcryptoProvider

I will see if I can get hold of one.

&gt; It would be good to try another VM. Looks suspicious. I don&apos;t have the
&gt; .class file to check the validity of the VerifyError.

Ludmila, are you in a position to try other VMs, let&apos;s say another JRE 7?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>406170</bug_id>
          
          <creation_ts>2013-04-21 09:04:00 -0400</creation_ts>
          <short_desc>JDT causes JAR locking on Windows systems, must exit eclipse to force file handle close, to allow deletion of files.</short_desc>
          <delta_ts>2015-04-28 08:35:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Darryl Miles">darryl</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>rov63rus</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
          
          <votes>2</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2246450</commentid>
    <comment_count>0</comment_count>
    <who name="Darryl Miles">darryl</who>
    <bug_when>2013-04-21 09:04:55 -0400</bug_when>
    <thetext>JDT appears to be causing JAR locking on Windows.

&quot;JAR locking&quot; is where a file on a window file system has one or more file handles open.  This stops Windows from allowing the file to be deleted.  This does not occur on Unix systems as those systems allow a file unlink() when if a file handle is open to it.
JDT causes JAR locking on Windows systems, must exit eclipse to force file handle close, to allow deletion of files.



JDT need to have a button in preferences to force it to close all possible file handles.  My guess is that file handles are being cached in some misguided attempt to be efficient.  Where as it would be more useful for eclipse to open a JAR index the data it needs into some other location and then immediately close the JAR.


The scenario is that the m2e-wtp plugin is installed, during project reconfiguration and project build operatation it modifies ClassPath objects to point at JAR files that are copied into target/** subdirectory.

It appears that JDT randomly opens some of these JARs.  I have no idea why.

This means that any &quot;mvn clean&quot; operation on the project will always fail from this point on.

Even closing the project in Eclipse does not force the open file handles to be closed by Eclipse, even though those files are inside that projects target/** folder.

The only way to be able to remove these files is to Exit Eclipse.

Once Eclipse is shutdown you can either manually delete the JARs with your operating system UI or command-line.  Or if you disabled auto-build before Exiting eclipse 80% of the time you can use Eclipse UI to delete the JAR files or run &quot;mvn clean&quot; successfully.

Obviously having to Exit Eclipse in order to continue working is a major productivity destroyer.


An example is a WAR project where often 5 JARs out of 40 JARs get locked.  These 5 JARs often have the Jar File icon next to them when shown in project explorer, while the rest of the standard file icon (no idea what this means).  Sometimes if you randomly change the Build Path (like adding JUnit 4) you can get it to release another 3 or 4 handles.  But for me is never releases all handles to allow the &quot;target&quot; subdir to be deleted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246745</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-22 10:13:12 -0400</bug_when>
    <thetext>Are you sure it&apos;s JDT and not WTP or it&apos;s components? Do you see this happening with plain Java projects too?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251250</commentid>
    <comment_count>2</comment_count>
    <who name="Darryl Miles">darryl</who>
    <bug_when>2013-05-01 16:59:13 -0400</bug_when>
    <thetext>This issue is related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=406173

Something in eclipse (that is not M2E-WTP) is causing JAR locking to occur on entries in the Build ClassPath.

If you take a look at this code:

https://github.com/dlmiles/m2e.wtp/blob/916077b6debefaa2c864c556c71a0c485ec7df0b/org.eclipse.m2e.wtp/src/org/eclipse/m2e/wtp/WebProjectConfiguratorDelegate.java

Notice how the IClasspathEntryDescriptor are setup, this causes something outside of M2E-WTP module to JAR lock the file.  Why does this file need to be opened and kept open ?  Not even a &quot;Close Project&quot; can fix it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251259</commentid>
    <comment_count>3</comment_count>
    <who name="Darryl Miles">darryl</who>
    <bug_when>2013-05-01 17:16:48 -0400</bug_when>
    <thetext>I&apos;ve had a quick scan through the m2e-core project and the org.eclipse.m2e.jdt.* code and can not find anything in there that directly opens a JAR filehandle.

If you know of any JDT API calls to look at in this code base that would be helpful.

Or if you can provide the details of an open source Java agent that can perform diagnostic on windows by providing stack traces for every open/closed file handle.  It would be possible to get the stack trace of the problem code that is holding file handles open (even after &quot;Close Project&quot;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2252496</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-05-06 01:22:00 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; If you know of any JDT API calls to look at in this code base that would be
&gt; helpful.

JDT/Core internally uses JavaModelManager#getZipFile(path) and #closeZipFile(path) to handle zip and jar files. The call to the former must always have a corresponding closeZipFile(). I just verified that all getZip calls have the closeZipFile. May be you can look for calls to this method and see if the zip is left open somehow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253365</commentid>
    <comment_count>5</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2013-05-07 09:33:16 -0400</bug_when>
    <thetext>FWIW, a JAR file can be &quot;locked&quot; on Windows if the JAR was loaded by a JRE process and the process is still running. Similar case is described here: http://www-01.ibm.com/support/docview.wss?uid=swg21496444

Making long story short: if the JAR was loaded by Eclipse process, you cannot delete the JAR on Windows without closing the process first. In that case JDT has nothing to do with it.

I think you should check what is &quot;locking&quot; the JAR in your case instead of making any assumptions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253372</commentid>
    <comment_count>6</comment_count>
    <who name="Darryl Miles">darryl</who>
    <bug_when>2013-05-07 09:41:30 -0400</bug_when>
    <thetext>A grep over the GIT trees for m2e-core and m2e-wtp does not indicate this API #getZipFile() is used (directly).


* We still have not confirmed the stack trace (the caller) that opens the problematic file handles.

* The m2e code maybe indirectly causing the locking by using other API that calls getZipFile().  What APIs might be used to allow the file to be opened in one time frame and then closed at another timeframe.

* It is also not ruled out that maybe some other plugin that is installed listens for Build classpath changes and is reacting to this.



* I believe that marking the classpath entires as derived and hidden reduces this problem substantially.  A recent patch to m2e-wtp cause the derived/hidden flags to be set and that did appear to fix the problem, except for some cases where I believe information was being obtained Java indexing.

* I believe some element of the Java indexing maybe at work because it is possible to get the JARs locked before any build has chance to run after a restart of Eclipse (with Automatic Build disabled).  Some parts of m2e/m2e-wtp do get to run, even through no Workspace/Project build should have occurred yet.
The reason for this thought is that in the cases where JAR locking still occurred I had deleted the JAR file from the target/**/*.jar directory (while Eclipse was shutdown) yet upon restarting eclipse the IDE still thinks the JAR file is there as it is displayed in a node under the Project Explorer tree.  In a scenario where I did not delete the JAR while Eclipse was shutdown, being indexed in this was was enough to cause the JAR locking to re-occur because the first build had a chance to run on restart (again as Automatic Build was disabled).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253397</commentid>
    <comment_count>7</comment_count>
    <who name="Darryl Miles">darryl</who>
    <bug_when>2013-05-07 10:05:36 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; FWIW, a JAR file can be &quot;locked&quot; on Windows if the JAR was loaded by a JRE
&gt; process and the process is still running. Similar case is described here:
&gt; http://www-01.ibm.com/support/docview.wss?uid=swg21496444
&gt; 
&gt; Making long story short: if the JAR was loaded by Eclipse process, you
&gt; cannot delete the JAR on Windows without closing the process first. In that
&gt; case JDT has nothing to do with it.
&gt; 
&gt; I think you should check what is &quot;locking&quot; the JAR in your case instead of
&gt; making any assumptions.

One has to assume some aspects of unknown information in order to try to test an angle on the problem when trying to find a solution.

Yes hence why my previous comments on a debug agent to provide evidence via a full stack trace of all APIs that open all files while the process is loaded.  Maybe someone can cite an open-source project or maybe someone has access to a close-source solution to provide stack traces.  If this information was available then we can remove a number of assumptions that have to be made in light of difficult to obtain information that would be helpful to understanding the cause of the problem.


Re use of ANT.

I am not aware of any ANT use inside the projects I am testing with, nor any other projects in the workspace at the time.

FWIW I am also using Oracle Java7 and some issues like JarURLConnection may have been improved.

From my point of view, there is no reason to &quot;assume&quot; the article you reference has any bearing on the problem reported here.  It reads as a known issue for certain versions of Eclipse/JRE when using ANT.  The problem of JAR locking itself is known and understood from the point of view of Windows operating system calls.  May I suggest to users of the ANT JAR locking problem, try to use ANT out-of-process from Eclipse.  Maybe selecting some other JRE still do the trick.  This way the JRE that is caching will be torn down after every ANT use and its cache destroyed in the process as the process no longer exists.


Now to come back to this bug report.  Yes Maven can also use an alternative JRE and implementation of Maven, however I have not found any aspect of the problem that connects Maven itself to be the cause of the JAR locking problem described in this ticket.

The problem appears to be triggered by Build Classpath changes and Eclipse project configuration performed by m2e-wtp/m2e-core and this is a purely Eclipse Java language matter.  I did cite in a previous comment the code to be looking at what I see is code that configured things JDT operates on.  This doesn&apos;t necessarily mean JDT itself is a fault.


Maybe I can add some kind of logging to the JavaModelManager#getZipFile(path) and #closeZipFile(path)  ???

Get information dumped to Eclipse logfile ?

This will at least prove those APIs calls are implicated.  Then the next task is to narrow down the callers/users of those API calls.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253817</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-05-08 02:38:17 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Maybe I can add some kind of logging to the
&gt; JavaModelManager#getZipFile(path) and #closeZipFile(path)  ???
&gt; 
&gt; Get information dumped to Eclipse logfile ?
&gt; 
&gt; This will at least prove those APIs calls are implicated.  Then the next
&gt; task is to narrow down the callers/users of those API calls.

I would say, it&apos;s worth a try. If the JAR is opened during the classpath resolution of a project in the workspace, we don&apos;t expect the handle to be kept open and if it does occurs, possibly one of the callers of getZipFile() is not following the protocol, which would be a bug. But we also have to rule out that the JAR is not opened by the class loader or any other process.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2552941</commentid>
    <comment_count>9</comment_count>
    <who name="Oleg Rachaev">rov63rus</who>
    <bug_when>2015-04-28 08:32:52 -0400</bug_when>
    <thetext>I have the same issue on last Eclipse Luna with webAppProject. My lib *.jars all are in WEB-INF/lib/

My workaround to use ant build (updateRefLibs.xml in my case) to update referenced libs in WEB-INF/lib/.

Ant somehow removing lock from jar and updates it.

May be this helps.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2552946</commentid>
    <comment_count>10</comment_count>
    <who name="Oleg Rachaev">rov63rus</who>
    <bug_when>2015-04-28 08:35:48 -0400</bug_when>
    <thetext>to previous comment:

updateRefLibs.xml: (as example)

&lt;project name=&quot;updateRefLibs&quot; default=&quot;all&quot; basedir=&quot;.&quot;&gt;

    &lt;property name=&quot;project.path&quot; value=&quot;${basedir}&quot; /&gt;
    &lt;property name=&quot;libs.dir&quot; value=&quot;${project.path}/WebContent/WEB-INF/lib/&quot; /&gt;
    &lt;property name=&quot;refProj1&quot; value=&quot;rov-gwt-utils&quot; /&gt;

    &lt;property name=&quot;refProj1.jar&quot; value=&quot;${refProj1}-gwt.jar&quot; /&gt;

    &lt;property name=&quot;refProj1.jar.path&quot; value=&quot;../${refProj1}/dist/${refProj1.jar}&quot; /&gt;

    &lt;target name=&quot;checkBuildAll&quot;&gt;
        &lt;available file=&quot;../${refProj1}/buildAll.xml&quot; property=&quot;refProj1.buildAll.xml.exists&quot; /&gt;
    &lt;/target&gt;

    &lt;target name=&quot;execBuildAll1&quot; depends=&quot;checkBuildAll&quot; if=&quot;refProj1.buildAll.xml.exists&quot;&gt;
        &lt;echo message=&quot;processing ../${refProj1}/buildAll.xml&quot; /&gt;
        &lt;ant antfile=&quot;../${refProj1}/buildAll.xml&quot; useNativeBasedir = &quot;true&quot;/&gt;
    &lt;/target&gt;
            
    &lt;target name=&quot;buildAllRefLibs&quot; depends=&quot;execBuildAll1&quot; /&gt;

    &lt;echo message=&quot;processing ref libs:&quot; /&gt;
    &lt;echo message=&quot;${refProj1.jar.path}&quot; /&gt;

    &lt;path id=&quot;refLibs&quot;&gt;
        &lt;pathelement location=&quot;${refProj1.jar.path}&quot; /&gt;
    &lt;/path&gt;

    &lt;target name=&quot;copyRefLibs&quot; depends=&quot;&quot;&gt;
        &lt;copy toDir=&quot;${libs.dir}&quot; flatten=&quot;true&quot; verbose=&quot;true&quot; overwrite=&quot;true&quot;&gt;
            &lt;path refid=&quot;refLibs&quot; /&gt;
        &lt;/copy&gt;
    &lt;/target&gt;

    &lt;target name=&quot;all&quot; depends=&quot;buildAllRefLibs,copyRefLibs&quot; /&gt;

&lt;/project&gt;</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>411015</bug_id>
          
          <creation_ts>2013-06-18 09:04:00 -0400</creation_ts>
          <short_desc>[code assist] Provide completion for org.foo.Bar.* when import static org.foo.Bar.X; is present</short_desc>
          <delta_ts>2014-07-23 11:00:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Max Rydahl Andersen">manderse</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>reckord</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2273853</commentid>
    <comment_count>0</comment_count>
    <who name="Max Rydahl Andersen">manderse</who>
    <bug_when>2013-06-18 09:04:24 -0400</bug_when>
    <thetext>When you have:

package org.foo;

public class Bar {

	  public static final int X = 1;
	  public static final int THING = 2;
	  public static final int OTHER = 3;
}


package org.xyz;

import static org.foo.Bar.X;

public class Foo {

   int t = |
   
}

At | code completion will give me X (as expected) but would be nice in addition to see THING and OTHER as low priority items but easy to code complete on.

Once code completed it would add the proper import and be updated to:

package org.xyz;

import static org.foo.Bar.X;
import static org.foo.Bar.THING;


public class Foo {

   int t = THING;
   
}

and of course if you go beyond your import threshold it will turn into org.foo.Bar.*; eventually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275513</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-06-21 09:20:23 -0400</bug_when>
    <thetext>Good idea. Should be doable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275584</commentid>
    <comment_count>2</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-06-21 10:45:21 -0400</bug_when>
    <thetext>Currently I handle code assist. So, I&apos;ll take this one. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275916</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-22 08:16:39 -0400</bug_when>
    <thetext>If you address this please also consider static methods, not only fields,
typical use case: import static org.junit.Assert.assertNotNull and then
you want to use other assert methods from the same class. 
Getting such proposals would be cool indeed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275949</commentid>
    <comment_count>4</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-06-22 23:44:22 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; If you address this please also consider static methods, not only fields,
&gt; typical use case: import static org.junit.Assert.assertNotNull and then
&gt; you want to use other assert methods from the same class. 
&gt; Getting such proposals would be cool indeed.

Sure Stephan. Thanks.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>411363</bug_id>
          
          <creation_ts>2013-06-21 09:00:00 -0400</creation_ts>
          <short_desc>Eclipse suggests declaring JUnit test method as static</short_desc>
          <delta_ts>2015-01-09 11:28:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Es9yP2UBIjQn7ocZXSDA 7TJSncDND6j6UuzLwEQz">headcrabextra</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>dbrosius</cc>
    
    <cc>jarthana</cc>
    
    <cc>nathanila</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2275500</commentid>
    <comment_count>0</comment_count>
      <attachid>232640</attachid>
    <who name="Es9yP2UBIjQn7ocZXSDA 7TJSncDND6j6UuzLwEQz">headcrabextra</who>
    <bug_when>2013-06-21 09:00:00 -0400</bug_when>
    <thetext>Created attachment 232640
picture

If you have a JUnit class with @test non-static method, eclipse will show a warning that it should be static, however if you make it static, JUnit will fail:
java.lang.Exception: Method test() should not be static</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275915</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-22 08:11:12 -0400</bug_when>
    <thetext>The warning actually doesn&apos;t say &quot;should&quot;, only &quot;can&quot;, but I get your point.

For JUnit3 I&apos;d say, it&apos;s just one of the situations were a framework using
reflection invalidates the results of static analysis, but we can&apos;t help.

For JUnit4 I could see us adding special treatment that respects the @Test annotation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502574</commentid>
    <comment_count>2</comment_count>
    <who name="Dave Brosius">dbrosius</who>
    <bug_when>2015-01-06 16:31:06 -0500</bug_when>
    <thetext>It&apos;s likely that any method that has _any_ annotation with a RetentionPolicy of something other than SOURCE, should not produce this warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502597</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 18:58:12 -0500</bug_when>
    <thetext>(In reply to Dave Brosius from comment #2)
&gt; It&apos;s likely that any method that has _any_ annotation with a RetentionPolicy
&gt; of something other than SOURCE, should not produce this warning.

That sounds like jumping to conclusions for me. Maybe you&apos;ve seen 3 or 5 annotations that follow your rule, but I don&apos;t see any causality between having an annotation and requiring to remain non-static. At 1.7- even this would be captured by your rule:

   public @NonNull String getID() { return &quot;XYZ&quot;; }

or this:
   @Deprecated public String getID() { return &quot;XYZ&quot;; }

etc.

If the compiler should include annotations in the reasoning, we need to know about the semantics of the annotation, which requires to handle annotations individually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503458</commentid>
    <comment_count>4</comment_count>
    <who name="Dave Brosius">dbrosius</who>
    <bug_when>2015-01-08 11:50:42 -0500</bug_when>
    <thetext>Agreed, but the current rule makes the same jumping to conclusions. I submit my arbitrary rule is orders of magnitude more correct than your arbitrary rule.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503481</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-08 12:16:41 -0500</bug_when>
    <thetext>(In reply to Dave Brosius from comment #4)
&gt; Agreed, but the current rule makes the same jumping to conclusions. I submit
&gt; my arbitrary rule is orders of magnitude more correct than your arbitrary
&gt; rule.

My rule is only: since we don&apos;t know anything about the semantics of all annotations in general (can&apos;t know, in fact), we shouldn&apos;t consider annotations during this analysis. I don&apos;t see what&apos;s arbitrary about this.

Your turn to demonstrate (not just claim) how your rule is &quot;more correct&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503916</commentid>
    <comment_count>6</comment_count>
    <who name="Dave Brosius">dbrosius</who>
    <bug_when>2015-01-09 10:46:13 -0500</bug_when>
    <thetext>An annotation (especially with Retention policies of Runtime) are really only of value if there is some &apos;processor&apos; that scans for and acts on those annotations.

These processors usually act in 1 of 2 ways.

Either that do byte code manipulation, such as eclipselink, in which case the fact that the methods instance/static characteristic isn&apos;t changed is likely very important, or

They use the annotations for wiring, ala jersey, which is also important that the instance/static characteristic doesn&apos;t change.

In your example, Deprecated has no processor (that i know of) and therefore has no real reason to have a runtime retention policy. But even in this case, one could argue that the only reasonable change one should make to a deprecated method is to delete it. Modifying it goes against the concept of @Deprecated.


But i agree there are outlier annotations that have runtime retention policies but no processor. I&apos;d argue this is a flawed definition (the runtime part, but whatever.

Certainly you could argue i&apos;ve hand picked a few examples, as you did, but i believe a grand majority of runtime retentioned annotations have processors who require that the static/instance characteristic doesn&apos;t change.

And then there&apos;s the argument that you&apos;d rather have false negatives over then false positives.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503939</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-09 11:28:38 -0500</bug_when>
    <thetext>First, let&apos;s update your statement:

(In reply to Dave Brosius from comment #2)
&gt; It&apos;s likely that any method that has _any_ annotation with a RetentionPolicy
&gt; of something other than SOURCE, should not produce this warning.

should be: &quot;annotation with a RetentionPolicy of RUNTIME&quot;.

This excludes at least @NonNull and friends (which have policy CLASS).

Down at the plain facts, RUNTIME doesn&apos;t speak of any intention to apply a &quot;processor&quot;, all it says is: this piece of information is available for runtime reflection. And then uses of runtime reflection are unbounded in style and semantics.

I&apos;m not saying I prefer false X over false Y, I&apos;m just against pretending to know more than we do know.


Actually, I should admit, that I&apos;d rather advise to disable this particular warning, rather than trying to put lots of intelligence into it. Reason being: what is signaled here is never a danger, only a hint at a possible restructuring, which could (a) make the method more widely applicable and (b) avoid dynamic dispatch thus contributing a micro optimization. O-O fundamentalists might even want the opposite: &quot;WARNING: Methods is static&quot; (because this precludes the option to override). There is nor &quot;right&quot; or &quot;wrong&quot; in this question, so unless you have a specific interest in (a) or (b) above, simplest solution is &quot;Ignore&quot;.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>232640</attachid>
            <date>2013-06-21 09:00:00 -0400</date>
            <delta_ts>2013-06-21 09:00:00 -0400</delta_ts>
            <desc>picture</desc>
            <filename>ss (2013-06-21 at 04.58.06).png</filename>
            <type>image/png</type>
            <size>90035</size>
            <attacher name="Es9yP2UBIjQn7ocZXSDA 7TJSncDND6j6UuzLwEQz">headcrabextra</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>414656</bug_id>
          
          <creation_ts>2013-08-08 07:08:00 -0400</creation_ts>
          <short_desc>&quot;TestCase.TESTS_NAMES = null&quot; etc. as suggested in buildTestsList(..) won&apos;t work with 1.5</short_desc>
          <delta_ts>2013-08-08 07:08:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2292695</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-08-08 07:08:48 -0400</bug_when>
    <thetext>Javadoc of org.eclipse.jdt.core.tests.junit.extension.TestCase#buildTestsList(Class) suggests a brittle pattern to reset TestCase.TESTS_NAMES and similar fields while executing &quot;global&quot; test suites.

I don&apos;t think the suggested pattern would work at all, since the MyTest.class literal only forces MyTest to be loaded *after* the fields have been reset. In practice, JDT Core test suites first create a list of Class objects, then they set the TESTS_* fields to null, and only then they create the suites.

But also that strategy won&apos;t work any more as soon as the test projects are compiled to 1.5-level class files, see
http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>417553</bug_id>
          
          <creation_ts>2013-09-18 23:09:00 -0400</creation_ts>
          <short_desc>unit test failure : testUserLibraryIndex</short_desc>
          <delta_ts>2013-11-14 04:42:57 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Manoj Palat">manpalat</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2308616</commentid>
    <comment_count>0</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2013-09-18 23:09:37 -0400</bug_when>
    <thetext>http://download.eclipse.org/eclipse/downloads/drops4/I20130918-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308622</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-18 23:29:35 -0400</bug_when>
    <thetext>This is the stack from the failure:

Specified index file is not being used. ----------- Expected ------------ C:\hb\workspace\ep4-unit-win32\workarea\I20130918-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\Test.index ------------ but was ------------ C:\hb\workspace\ep4-unit-win32\workarea\I20130918-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\data\.metadata\.plugins\org.eclipse.jdt.core\487016305.index --------- Difference is ---------- expected:&lt;...se\jdt_model_folder\[Test].index&gt; but was:&lt;...se\jdt_model_folder\[data\.metadata\.plugins\org.eclipse.jdt.core\487016305].index&gt;

junit.framework.ComparisonFailure: Specified index file is not being used.
----------- Expected ------------
C:\hb\workspace\ep4-unit-win32\workarea\I20130918-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\Test.index
------------ but was ------------
C:\hb\workspace\ep4-unit-win32\workarea\I20130918-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\data\.metadata\.plugins\org.eclipse.jdt.core\487016305.index
--------- Difference is ----------
expected:&lt;...se\jdt_model_folder\[Test].index&gt; but was:&lt;...se\jdt_model_folder\[data\.metadata\.plugins\org.eclipse.jdt.core\487016305].index&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:238)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:214)
at org.eclipse.jdt.core.tests.model.JavaIndexTests.testUserLibraryIndex(JavaIndexTests.java:756)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330034</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-11-14 03:24:59 -0500</bug_when>
    <thetext>Failed again in our M-build (also Windows):

http://download.eclipse.org/eclipse/downloads/drops4/M20131113-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

I suspect it has to do with some disk IO on that machine: similar/related JDT Text tests also failed:

http://download.eclipse.org/eclipse/downloads/drops4/M20131113-0800/testresults/html/org.eclipse.jdt.text.tests_win32.win32.x86_7.0.html


Also note the errors in the log:
http://download.eclipse.org/eclipse/downloads/drops4/M20131113-0800/testresults/win32.win32.x86_7.0/org.eclipse.jdt.core.tests.model.AllJavaModelTests.txt</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330074</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-11-14 04:42:57 -0500</bug_when>
    <thetext>Build: M20131113-0800

Build Location: http://download.eclipse.org/eclipse/downloads/drops4/M20131113-0800/

Test Results: http://download.eclipse.org/eclipse/downloads/drops4/M20131113-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Platform: Windows

Specified index file is not being used. ----------- Expected ------------ C:\hb\workspace\ep4-unit-win32\workarea\M20131113-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\Test.index ------------ but was ------------ C:\hb\workspace\ep4-unit-win32\workarea\M20131113-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\data\.metadata\.plugins\org.eclipse.jdt.core\3754488426.index --------- Difference is ---------- expected:&lt;...se\jdt_model_folder\[Test].index&gt; but was:&lt;...se\jdt_model_folder\[data\.metadata\.plugins\org.eclipse.jdt.core\3754488426].index&gt;

junit.framework.ComparisonFailure: Specified index file is not being used.
----------- Expected ------------
C:\hb\workspace\ep4-unit-win32\workarea\M20131113-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\Test.index
------------ but was ------------
C:\hb\workspace\ep4-unit-win32\workarea\M20131113-0800\eclipse-testing\test-eclipse\eclipse\jdt_model_folder\data\.metadata\.plugins\org.eclipse.jdt.core\3754488426.index
--------- Difference is ----------
expected:&lt;...se\jdt_model_folder\[Test].index&gt; but was:&lt;...se\jdt_model_folder\[data\.metadata\.plugins\org.eclipse.jdt.core\3754488426].index&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:238)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:214)
at org.eclipse.jdt.core.tests.model.JavaIndexTests.testUserLibraryIndex(JavaIndexTests.java:756)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:655)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)

Thanks</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>422760</bug_id>
          
          <creation_ts>2013-11-28 08:15:00 -0500</creation_ts>
          <short_desc>Certain escaped digits in string literals cause InvalidArgumentException</short_desc>
          <delta_ts>2013-12-08 02:49:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="TipTop Labs">office</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2335487</commentid>
    <comment_count>0</comment_count>
    <who name="TipTop Labs">office</who>
    <bug_when>2013-11-28 08:15:15 -0500</bug_when>
    <thetext>Certain rare escape characters in strings cause InvalidArgumentExceptions in Scanner.scanEscapeCharacter. For instance &quot;&quot;\1\u0660&quot; does so. The scanner gets confused because the Java runtime tells it &apos;\u0660&apos; (ARABIC-INDIC DIGIT ZERO) is a digit, but JDT itself does not recognize it as such.) 

Other Java compilers (such as Java 1.6 on OS X 10.9) accept such strings, and the Java specification seems to allow them.

I&apos;ve seen real-world examples in (long) string literals that were produced by JFlex (The Fast Scanner Generator for Java). The problem also surfaced with J2ObjC (Google&apos;s Java to iOS Objective-C translation tool) in the version that ships with org.eclipse.jdt.core-3.8.1.v20120531-0637.jar.

I have confirmed that this affects both the master branch and the older 3.8 branch of JDT core and I have both a unit test to highlight the problem and a suggested fix available. I would like to contribute those if the bug can be assigned to me, for this would also be good practice (not a committer, but just signed the Eclipse Foundation Contributor License Agreement.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335545</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2013-11-28 09:48:51 -0500</bug_when>
    <thetext>I just tried to compile:
public class X {
    String s = &quot;\1\u0660&quot;;
}
and it worked.
Could you please provide a complete example that fails?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335601</commentid>
    <comment_count>2</comment_count>
      <attachid>237812</attachid>
    <who name="TipTop Labs">office</who>
    <bug_when>2013-11-28 11:07:33 -0500</bug_when>
    <thetext>Created attachment 237812
PossibleABug.java

I just tried the following:

* start Eclipse 4.3.1 on OS X, JRE is Java SE 6
* create a Plug-in Project test
* add org.eclipse.jdt.core (3.9.1) and org.junit (4.11.0) as dependencies
* add PossiblyABug.java (attached) to package test
* it contains X
* its invocation of JDT (compilation and some post-processing) is modeled after what I found in J2ObjC
* run as JUnit Plug-in Test
* this results in IllegalArgumentException (in my setup)

Yes, the compilation itself works (as you also observed). The scanner throws the exception during the post-processing step.

BTW, maybe this test could be abbreviated to just passing &quot;\1\u0660&quot; into a newly created StringLiteral, but I haven&apos;t found a suitable public initializer or factory.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335673</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2013-11-28 12:57:54 -0500</bug_when>
    <thetext>I think the problem is that the unicode sequence is preprocessed before being given to the String literal.
If you want the String literal to contain &quot;\1\u0660&quot;, you need to pass in &quot;\1\\u0660&quot;. This means that the source in your test case should be:
&quot;\\\\1\\\\u0660\&quot;.
So isn&apos;t it a problem with the escaping sequence given to the AST parser ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335749</commentid>
    <comment_count>4</comment_count>
    <who name="TipTop Labs">office</who>
    <bug_when>2013-11-28 18:12:11 -0500</bug_when>
    <thetext>But the way it works out in the example is that StringLiteral#setLiteralValue (not #setEscapedValue) is called with the string consisting of 2 Unicode code points (length 2): The 1st is 0x1, the second is 0x660, i.e. “\1\u0660” with the Unicode escapes already translated. 

This is a different source code representation from &quot;\1\\u0660” (length 7), isn’t it? Only the 1st representation causes the exception, and it happens to be what JObjC uses internally in the cases I am looking at.

Using the 1st representation in calls to StringLiteral#setLiteralValue seems legitimate, for Java programs could very well include these verbatim Unicode characters (without Unicode escaping) e.g. inside string literals, so why tolerate such exceptions?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335777</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-11-29 00:28:46 -0500</bug_when>
    <thetext>	StringLiteral literal = AST.newAST(AST.JLS4).newStringLiteral();
	String s = &quot;\1\u0660&quot;;
	s=&quot;\1٠&quot;;
	s=&quot;\123&quot;;
	literal.setLiteralValue(s);
	System.out.println(s + &apos;\n&apos;+literal.getEscapedValue()+&apos;\n&apos;+literal.getLiteralValue());

The first one compiles, likewise the third one, but the second one fails with error &quot;Invalid digit (valid ones are 0..9)&quot;. This seems like a bug, because the Unicode escaped characters should be equivalent to the real ones.

The Arabic character in the second one was copy-pasted from console log back into source code using UTF-8, hopefully it stayed intact.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335788</commentid>
    <comment_count>6</comment_count>
    <who name="TipTop Labs">office</who>
    <bug_when>2013-11-29 02:46:55 -0500</bug_when>
    <thetext>Yes, this is a better formulation of the original problem:

StringLiteral literal = AST.newAST(AST.JLS4).newStringLiteral();
String s = &quot;\1\u0660&quot;;
literal.setLiteralValue(s);

I see that this compiles but produces IllegalArgumentException at runtime with the recipe given above.

I also see that &quot;&quot;\1٠&quot; does not even compile, which may be another (presumably related) issue if the character stayed indeed intact. Perhaps this should be filed separately?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2339075</commentid>
    <comment_count>7</comment_count>
    <who name="TipTop Labs">office</who>
    <bug_when>2013-12-08 02:49:32 -0500</bug_when>
    <thetext>The root cause is apparently in org.eclipse.jdt.internal.compiler.parser.ScannerHelper.isDigit(). It relies on a table of MAX_OBVIOUS (i.e. 128) entries to recognize digits. For digits whose code point is larger than MAX_OBVIOUS (as is the case e.g. with 0x660), it throws an InvalidInputException (why?), which org.eclipse.jdt.internal.compiler.parser.Scanner.getNextToken() rethrows and which org.eclipse.jdt.core.dom.StringLiteral.setEscapedValue() then turns into the observed InvalidArgumentException. 

I&apos;ve also changed the bug&apos;s title, which should refer to escaped digits (was: spaces).</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>237812</attachid>
            <date>2013-11-28 11:07:00 -0500</date>
            <delta_ts>2013-11-28 11:07:33 -0500</delta_ts>
            <desc>PossibleABug.java</desc>
            <filename>PossiblyABug.java</filename>
            <type>application/octet-stream</type>
            <size>2611</size>
            <attacher name="TipTop Labs">office</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>422913</bug_id>
          
          <creation_ts>2013-12-01 17:05:00 -0500</creation_ts>
          <short_desc>JUnit View not showing unit test results</short_desc>
          <delta_ts>2013-12-01 17:11:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Lusk">john-eclipse</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>john-eclipse</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2336341</commentid>
    <comment_count>0</comment_count>
      <attachid>237887</attachid>
    <who name="John Lusk">john-eclipse</who>
    <bug_when>2013-12-01 17:05:25 -0500</bug_when>
    <thetext>Created attachment 237887
Eclipse configuration

When I run unit tests, the JUnit View shows neither success nor failure nor results of any kind.  It simply shows the name of running configuration and then &quot;Terminated&quot;.  Console output (System.out) generated during the test appears in the console window, and I can debug to failures (but the debugger also stops at the last executable statement, so simply having the debugger perspective pop up is not all that helpful).

This is on my home PC.  I installed this on my work PC (with no extra plugins/features) and it works fine.  I tried reverting my Kepler install to its earliest version (via installation history), but it didn&apos;t help.

I am attaching my eclipse config.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2336342</commentid>
    <comment_count>1</comment_count>
      <attachid>237888</attachid>
    <who name="John Lusk">john-eclipse</who>
    <bug_when>2013-12-01 17:08:57 -0500</bug_when>
    <thetext>Created attachment 237888
Error log</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2336343</commentid>
    <comment_count>2</comment_count>
    <who name="John Lusk">john-eclipse</who>
    <bug_when>2013-12-01 17:10:20 -0500</bug_when>
    <thetext>This is a new Maven project using the quickstart archetype.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>237887</attachid>
            <date>2013-12-01 17:05:00 -0500</date>
            <delta_ts>2013-12-01 17:05:25 -0500</delta_ts>
            <desc>Eclipse configuration</desc>
            <filename>eclipse-config.txt</filename>
            <type>text/plain</type>
            <size>767179</size>
            <attacher name="John Lusk">john-eclipse</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>237888</attachid>
            <date>2013-12-01 17:08:00 -0500</date>
            <delta_ts>2013-12-01 17:08:57 -0500</delta_ts>
            <desc>Error log</desc>
            <filename>eclipse-error-log.txt</filename>
            <type>text/plain</type>
            <size>31988</size>
            <attacher name="John Lusk">john-eclipse</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>423310</bug_id>
          
          <creation_ts>2013-12-05 08:40:00 -0500</creation_ts>
          <short_desc>[test] Several tests read and/or write to parent directory of the workspace i.e. user.home in default configuration</short_desc>
          <delta_ts>2013-12-06 18:35:47 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2338079</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-05 08:40:35 -0500</bug_when>
    <thetext>After following the instructions in the wiki and seeing a lot of junk appear in my home directory while running org.eclipse.jdt.core.tests.RunJDTCoreTests, I added a security manager to try to detect and prevent this. The manager is configured like this:

  ... INFO: Write access allowed to C:\Users\Timo\AppData\Local\Temp ... 
  ... INFO: Write access allowed to C:\Users\Timo\junit-workspace ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.apt.pluggable.tests ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.apt.tests ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.compiler.apt.tests ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.compiler.tool.tests ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.core.tests.builder ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.core.tests.compiler ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.core.tests.model ... 
  ... INFO: Write access allowed to C:\Users\Timo\git\r-eclipse.jdt.core\org.eclipse.jdt.core.tests.performance ... 
  ... INFO: Write access allowed to C:\Users\Timo\AppData\Local\Temp\comptest\run.1386243486200 ... 
  ... INFO: Write access allowed to C:\Users\Timo\workspace\.metadata\.plugins\org.eclipse.pde.core\pde-junit ... 
  ... INFO: System.exit() calls prevented: true ... 
  ... INFO: Read access denied to C:\Users\Timo ...

These seem reasonable to me. After correcting some of the methods that create temporary directories to conform to those, console log still shows some tests which are doing something custom and not using them. Here are the condensed stacktraces of each:

  !!! ERROR: Read access is not allowed to C:\Users\Timo !!!
    at java.io.File.getCanonicalFile(File.java:643)
    at org.eclipse.jdt.core.tests.model.JavaProjectTests.testAddExternalLibFolder6(JavaProjectTests.java:193)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:156)
    at org.eclipse.jdt.core.tests.util.Util.writeToFile(Util.java:1298)
    at org.eclipse.jdt.core.tests.model.JavaProjectTests.testPackageFragmentRootRawEntry4(JavaProjectTests.java:1725)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:156)
    at org.eclipse.jdt.core.tests.util.Util.writeToFile(Util.java:1298)
    at org.eclipse.jdt.core.tests.model.JavaProjectTests.testPackageFragmentRootRawEntry4(JavaProjectTests.java:1725)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.File.delete(File.java:1036)
    at org.eclipse.jdt.core.tests.util.Util.delete(Util.java:422)
    at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.deleteResource(AbstractJavaModelTests.java:1727)
    at org.eclipse.jdt.core.tests.model.JavaProjectTests.testPackageFragmentRootRawEntry4(JavaProjectTests.java:1731)
    
  !!! ERROR: Read access is not allowed to C:\Users\Timo !!!
    at java.io.File.getCanonicalFile(File.java:643)
    at org.eclipse.jdt.core.tests.model.JavaSearchTests.testSearchScope05(JavaSearchTests.java:2400)
    
  !!! ERROR: Read access is not allowed to C:\Users\Timo !!!
    at java.io.File.exists(File.java:814)
    at java.io.File.mkdirs(File.java:1340)
    at org.eclipse.jdt.core.tests.util.Util.zip(Util.java:1325)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:376)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:385)
    at org.eclipse.jdt.core.tests.util.Util.createEmptyJar(Util.java:349)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotContainerEntry1(ClasspathTests.java:2870)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.File.delete(File.java:1036)
    at org.eclipse.jdt.core.tests.util.Util.delete(Util.java:422)
    at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.deleteResource(AbstractJavaModelTests.java:1727)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotContainerEntry1(ClasspathTests.java:2883)
    
  !!! ERROR: Read access is not allowed to C:\Users\Timo !!!
    at java.io.File.exists(File.java:814)
    at java.io.File.mkdirs(File.java:1340)
    at org.eclipse.jdt.core.tests.util.Util.zip(Util.java:1325)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:376)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:385)
    at org.eclipse.jdt.core.tests.util.Util.createEmptyJar(Util.java:349)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotLibraryEntry2(ClasspathTests.java:2938)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.File.delete(File.java:1036)
    at org.eclipse.jdt.core.tests.util.Util.delete(Util.java:422)
    at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.deleteResource(AbstractJavaModelTests.java:1727)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotLibraryEntry2(ClasspathTests.java:2950)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.File.delete(File.java:1036)
    at org.eclipse.jdt.core.tests.util.Util.delete(Util.java:422)
    at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.deleteResource(AbstractJavaModelTests.java:1727)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotLibraryEntry3(ClasspathTests.java:2974)
    
  !!! ERROR: Read access is not allowed to C:\Users\Timo !!!
    at java.io.File.exists(File.java:814)
    at java.io.File.mkdirs(File.java:1340)
    at org.eclipse.jdt.core.tests.util.Util.zip(Util.java:1325)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:376)
    at org.eclipse.jdt.core.tests.util.Util.createJar(Util.java:385)
    at org.eclipse.jdt.core.tests.util.Util.createEmptyJar(Util.java:349)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotVariableEntry1(ClasspathTests.java:3107)
    
  !!! ERROR: Write access is not allowed to C:\Users\Timo\external.jar !!!
    at java.io.File.delete(File.java:1036)
    at org.eclipse.jdt.core.tests.util.Util.delete(Util.java:422)
    at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.deleteResource(AbstractJavaModelTests.java:1727)
    at org.eclipse.jdt.core.tests.model.ClasspathTests.testDotDotVariableEntry1(ClasspathTests.java:3119)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338553</commentid>
    <comment_count>1</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-06 05:37:42 -0500</bug_when>
    <thetext>Further investigation reveals that many of those tests take having full read and write access to workspace parent directory for granted and some even require it. Alternative fix: 

Changing the suggested default workspace location of RunJDTCoreTests launch configuration from ${workspace_loc:/../junit-workspace} to ${system_property:java.io.tmpdir}/users/user/junit-workspace</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338609</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-06 08:11:00 -0500</bug_when>
    <thetext>After rewinding most of the changes to tests itself, 6 failures each in 1.4, 1.5 and 1.6 compiler tests remained, 18 total. The 5 failures from tests MethodVerifyTest.test091, test092, test093, VarargsTest.test066, GenericTypeTest.test0809 were from an extra warning about a missing @Override annotation. These were caused by running the tests using a Java 8 early access VM and thus its runtime library. Overridden default methods looking like they&apos;re overridden superclass methods, I&apos;d say.

The last failure in test BatchCompilerTest.test405225_extdirs was an NPE. This was caused by the compiler not detecting a 1.8 JDK-interface-using runtime and defaulting to the earliest known version. The way this NPE is triggered seems like a real bug:

junit.framework.AssertionFailedError: Unexpected problems [out: ][err: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.concatFiles(EclipseFileManager.java:204)
	at org.eclipse.jdt.internal.compiler.apt.util.EclipseFileManager.handleOption(EclipseFileManager.java:674)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl.&lt;init&gt;(BatchProcessingEnvImpl.java:88)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager.configure(BatchAnnotationProcessorManager.java:69)
	at org.eclipse.jdt.internal.compiler.batch.Main.initializeAnnotationProcessorManager(Main.java:3969)
	at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:4087)
	at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1692)
	at org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest.invokeCompiler(BatchCompilerTest.java:646)
	at org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest.runTest(BatchCompilerTest.java:570)
	at org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest.runConformTest(BatchCompilerTest.java:435)
	at org.eclipse.jdt.core.tests.compiler.regression.BatchCompilerTest.test405225_extdirs(BatchCompilerTest.java:13788)

After fixing these 18 failures RunJDTCoreTests now passes. This is with file access restrictions and all required projects switched to 1.6 still in place.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338890</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-06 15:53:59 -0500</bug_when>
    <thetext>Patch in Gerrit: https://git.eclipse.org/r/19462 

Resulted in a quick build failure, reason connection failure? What does that mean?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338901</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-06 16:14:45 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #2)
&gt; After rewinding most of the changes to tests itself, 6 failures each in 1.4,
&gt; 1.5 and 1.6 compiler tests remained, 18 total. The 5 failures from tests
&gt; MethodVerifyTest.test091, test092, test093, VarargsTest.test066,
&gt; GenericTypeTest.test0809 were from an extra warning about a missing
&gt; @Override annotation. These were caused by running the tests using a Java 8
&gt; early access VM and thus its runtime library. Overridden default methods
&gt; looking like they&apos;re overridden superclass methods, I&apos;d say.

Timo, trouble using master on a Java 8 VM is expected (read: unavoidable). Have you checked the content of branch BETA_JAVA8 against your findings? If changes particular for 1.8 will be made, that branch is where it happens.

For work on master please use a Java 7 VM, thanks! This will also help to focus on the problems at hand :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338919</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-06 16:57:10 -0500</bug_when>
    <thetext>It is an interesting failure mode though? In that the compiler tests are not completely hermetically sealed and can pick up class files from their runtime environment. This shouldn&apos;t be possible, right!

The version detection one where a Java 8 JRE is interpreted as a 1.3 Java JRE I&apos;ve seen in the IDE itself. I had to turn on project specific compliance settings one project at a time as each project unblocked the next when I started running Eclipse on Java8 EA.

Next steps, trying to run the tests under a Java 7 IDE and with maven from the command-line to see if something turns up, then.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338941</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-06 18:24:10 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #5)
&gt; It is an interesting failure mode though? In that the compiler tests are not
&gt; completely hermetically sealed and can pick up class files from their
&gt; runtime environment. This shouldn&apos;t be possible, right!

When we test compiling some Java programs (the test data), we need to compile these programs against some JRE. If you run on a JRE 8 the tests that challenge the Java 7- compiler do not find a compatible JRE to link against. In that sense the JRE is part of the test data. Without a JRE 7 these tests cannot succeed. This may sound surprising, because you might think that a JRE 8 is a compatible replacement for a JRE 7, but this is not the case, as you just experienced.

Other test suites work with a &quot;JCL_MIN&quot;, a stub library replacing the JRE as part of the test data. This makes those specific test suites self-contained as you request. The compiler.regression tests are not constructed this way, because we&apos;re not only compiling against that JRE but we also execute the compiled program to verify correct behavior, which we could not do with a stub JRE. 

&gt; The version detection one where a Java 8 JRE is interpreted as a 1.3 Java
&gt; JRE I&apos;ve seen in the IDE itself. I had to turn on project specific
&gt; compliance settings one project at a time as each project unblocked the next
&gt; when I started running Eclipse on Java8 EA.

The problem is: we are not allowed (legally) to let JDT (master) recognize a JRE 8. It might be possible to guess that any version greater than the greatest known version be mapped to that greatest known version, which would let JDT (master) recognize the JRE 8 as version 7. I don&apos;t recall if this has been discussed.

OTOH, by fixing corresponding issues in BETA_JAVA8 we expect to be clean in this regard after the Java 8 GA, so I don&apos;t see the 7/8 story as s.t. we&apos;d need to fix in master (if we could).
 
&gt; Next steps, trying to run the tests under a Java 7 IDE and with maven from
&gt; the command-line to see if something turns up, then.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338944</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-06 18:35:47 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; (In reply to Timo Kinnunen from comment #5)
&gt; &gt; It is an interesting failure mode though? In that the compiler tests are not
&gt; &gt; completely hermetically sealed and can pick up class files from their
&gt; &gt; runtime environment. This shouldn&apos;t be possible, right!

&gt; When we test compiling some Java programs (the test data), we need to
&gt; compile these programs against some JRE. If you run on a JRE 8 the tests
&gt; that challenge the Java 7- compiler do not find a compatible JRE to link
&gt; against. In that sense the JRE is part of the test data. Without a JRE 7

Yep. In fact if the tests are sealed - it would inject a dose of artificiality
to the testing process. User code runs against a JRE and we need to test against
a JRE.


&gt; Other test suites work with a &quot;JCL_MIN&quot;, a stub library replacing the JRE as
&gt; part of the test data. This makes those specific test suites self-contained
&gt; as you request. 

My understanding is that this is done more for the reasons of having to avoid
reindexing JREs over and over against different &quot;workspaces&quot; and &quot;projects&quot; used 
by the tens of thousands of tests - less so for testing in a sealed environment.
AFAICT, that is not a factor.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>424684</bug_id>
          
          <creation_ts>2013-12-27 04:39:00 -0500</creation_ts>
          <short_desc>testEmptyContainer: ComparisonFailure</short_desc>
          <delta_ts>2015-05-13 06:17:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc>http://download.eclipse.org/eclipse/downloads/drops4/N20131226-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_5.0.html</bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          <qa_contact name="Jay Arthanareeswaran">jarthana</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2344975</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-12-27 04:39:07 -0500</bug_when>
    <thetext>Build ID: N20131226-2000
Test Results: http://download.eclipse.org/eclipse/downloads/drops4/N20131226-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_5.0.html

testEmptyContainer

Unexpected delta. ----------- Expected ------------ P[*]: {CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n ResourceDelta(/P/.classpath)[*] ------------ but was ------------ P[+]: {}\n \n P[*]: {CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n ResourceDelta(/P/.classpath)[*] --------- Difference is ---------- expected:&lt;P[[]*]: {CONTENT | RAW C...&gt; but was:&lt;P[[+]: {}\n \n P[]*]: {CONTENT | RAW C...&gt;

junit.framework.ComparisonFailure: Unexpected delta.
----------- Expected ------------
P[*]: {CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
ResourceDelta(/P/.classpath)[*]
------------ but was ------------
P[+]: {}\n
\n
P[*]: {CONTENT | RAW CLASSPATH CHANGED | RESOLVED CLASSPATH CHANGED}\n
ResourceDelta(/P/.classpath)[*]
--------- Difference is ----------
expected:&lt;P[[]*]: {CONTENT | RAW C...&gt; but was:&lt;P[[+]: {}\n
\n
P[]*]: {CONTENT | RAW C...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:238)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:214)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1013)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.assertDeltas(AbstractJavaModelTests.java:1003)
at org.eclipse.jdt.core.tests.model.ClasspathTests.testEmptyContainer(ClasspathTests.java:3327)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344976</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2013-12-27 04:51:28 -0500</bug_when>
    <thetext>Shankha, can you take a look? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370440</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-03 07:01:02 -0500</bug_when>
    <thetext>Moving to 4.4 M7 as we ran out of time.

From the trace it looks to be a infrastructure issue and the test case has not failed for over two months now.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391789</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-23 06:58:58 -0400</bug_when>
    <thetext>Moving the target to 4.5.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>424771</bug_id>
          
          <creation_ts>2013-12-31 02:30:00 -0500</creation_ts>
          <short_desc>Bug reading .classpath</short_desc>
          <delta_ts>2013-12-31 02:30:28 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Winterstein">daniel.winterstein</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2345277</commentid>
    <comment_count>0</comment_count>
    <who name="Daniel Winterstein">daniel.winterstein</who>
    <bug_when>2013-12-31 02:30:28 -0500</bug_when>
    <thetext>Eclipse won&apos;t build a project, saying:

Project &apos;winterwell.web&apos; is missing required library: &apos;/middleware/solrj/httpcore-4.2.5.jar&apos;	winterwell.web		Build path	Build Path Problem
Project &apos;winterwell.web&apos; is missing required library: &apos;/middleware/solrj/httpclient-4.2.6.jar&apos;	winterwell.web		Build path	Build Path Problem
Project &apos;winterwell.web&apos; is missing required library: &apos;/middleware/solrj/httpmime-4.2.6.jar&apos;	winterwell.web		Build path	Build Path Problem
The project cannot be built until build path errors are resolved	winterwell.web		Unknown	Java Problem

However none of these jars are used by that project!

Making any edit to the build-path and saving it fixes the problem. But it re-occurs the next time I start Eclipse.

Here is the .classpath:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;classpath&gt;
	&lt;classpathentry kind=&quot;src&quot; path=&quot;src&quot;/&gt;
	&lt;classpathentry kind=&quot;src&quot; path=&quot;test.dodgy&quot;/&gt;
	&lt;classpathentry kind=&quot;src&quot; path=&quot;test.utils&quot;/&gt;
	&lt;classpathentry kind=&quot;src&quot; output=&quot;bin.test&quot; path=&quot;test&quot;/&gt;
	&lt;classpathentry exported=&quot;true&quot; kind=&quot;con&quot; path=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-fileupload-1.2.1.jar&quot; sourcepath=&quot;/middleware/jakarta/commons-fileupload-1.2.1-sources.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/MimeUtil/dist/mime-util.jar&quot; sourcepath=&quot;/middleware/MimeUtil/src.zip&quot;/&gt;
	&lt;classpathentry exported=&quot;true&quot; kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-lang.jar&quot; sourcepath=&quot;/middleware/jakarta/commons-lang3-3.1-sources.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/java2html/java2html.jar&quot; sourcepath=&quot;/middleware/java2html/java2html_src.zip&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/javamail/lib/dsn.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/javamail/lib/imap.jar&quot; sourcepath=&quot;/middleware/javamail/src.zip&quot;&gt;
		&lt;attributes&gt;
			&lt;attribute name=&quot;javadoc_location&quot; value=&quot;file:/home/miles/code/middleware/javamail/docs/javadocs/&quot;/&gt;
		&lt;/attributes&gt;
	&lt;/classpathentry&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/javamail/lib/mailapi.jar&quot; sourcepath=&quot;/middleware/javamail/src.zip&quot;&gt;
		&lt;attributes&gt;
			&lt;attribute name=&quot;javadoc_location&quot; value=&quot;jar:platform:/resource/middleware/javamail/docs.zip!/docs/javadocs&quot;/&gt;
		&lt;/attributes&gt;
	&lt;/classpathentry&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/javamail/lib/pop3.jar&quot;/&gt;
	&lt;classpathentry exported=&quot;true&quot; kind=&quot;lib&quot; path=&quot;/middleware/javamail/mail.jar&quot; sourcepath=&quot;/middleware/javamail/src.zip&quot;&gt;
		&lt;attributes&gt;
			&lt;attribute name=&quot;javadoc_location&quot; value=&quot;jar:platform:/resource/middleware/javamail/docs.zip!/docs/javadocs&quot;/&gt;
		&lt;/attributes&gt;
	&lt;/classpathentry&gt;
	&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.junit.JUNIT_CONTAINER/4&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/dumbster/dumbster1.6.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-codec-1.4.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/httpclient-cache-4.X.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/apache-mime4j-0.6.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/cssparser-0.9.5.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/htmlunit-2.8.jar&quot; sourcepath=&quot;/middleware/htmlunit/src-main.zip&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/htmlunit-core-js-2.8.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/nekohtml-1.9.14.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/sac-1.3.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/serializer-2.7.1.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/xalan-2.7.1.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/xercesImpl-2.9.1.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/htmlunit/lib/xml-apis-1.3.04.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/log4j/log4j-1.2.15.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-io-2.X.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-collections-3.2.1.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-continuation.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-http.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-io.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-security.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-server.jar&quot; sourcepath=&quot;/middleware/jetty/jetty-server-7.5.4.v20111024-sources.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-servlet.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-util.jar&quot; sourcepath=&quot;/middleware/jetty/jetty-http-7.5.4.v20111024-sources.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jetty/jetty-websocket.jar&quot;/&gt;
	&lt;classpathentry combineaccessrules=&quot;false&quot; kind=&quot;src&quot; path=&quot;/winterwell.utils&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/tagsoup/tagsoup.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/commons-logging.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/servlet/servlet-api-3.0.jar&quot; sourcepath=&quot;/middleware/servlet/servlet-api-3.0.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/httpclient-4.X.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/httpcore-4.X.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/jakarta/httpmime-4.X.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;lib&quot; path=&quot;/middleware/javamail/lib/smtp.jar&quot;/&gt;
	&lt;classpathentry kind=&quot;output&quot; path=&quot;bin&quot;/&gt;
&lt;/classpath&gt;




-- Configuration Details --
Product: Eclipse 2.0.0.20130613-0530 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.9.0.v20130605-2000</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>443921</bug_id>
          
          <creation_ts>2014-09-12 05:40:00 -0400</creation_ts>
          <short_desc>[test][model] testSuggestConstantFieldName001 Failed</short_desc>
          <delta_ts>2014-09-12 05:41:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2450805</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-12 05:40:51 -0400</bug_when>
    <thetext>Build: N20140911-2000
Results: http://download.eclipse.org/eclipse/downloads/drops4/N20140911-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

---
Did not fail in local testing with latest code.
---

----------- Expected ------------ __ ------------ but was ------------ ___SUF __ --------- Difference is ---------- expected:&lt;__[]&gt; but was:&lt;__[_SUF __]&gt; 

junit.framework.ComparisonFailure: 
----------- Expected ------------
__
------------ but was ------------
___SUF
__
--------- Difference is ----------
expected:&lt;__[]&gt; but was:&lt;__[_SUF
__]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:267)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assumeEquals(TestCase.java:287)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assumeEquals(TestCase.java:277)
at org.eclipse.jdt.core.tests.model.NamingConventionTests.testSuggestConstantFieldName001(NamingConventionTests.java:1369)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>451103</bug_id>
          
          <creation_ts>2014-11-12 04:38:00 -0500</creation_ts>
          <short_desc>[test][builder]PackageTests.testNoPackageProblem failed</short_desc>
          <delta_ts>2014-12-19 04:19:42 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>test</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">sasikanth.bharadwaj</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2481110</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-11-12 04:38:07 -0500</bug_when>
    <thetext>N20141111-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20141111-2000/testresults/html/org.eclipse.jdt.core.tests.builder_linux.gtk.x86_64_8.0.html

Error Build path contains duplicate entry: &apos;opt/public/common/jdk1.8.0_x64/jre/lib/resources.jar&apos; for project &apos;Project&apos;

Java Model Exception: Java Model Status [Build path contains duplicate entry: &apos;opt/public/common/jdk1.8.0_x64/jre/lib/resources.jar&apos; for project &apos;Project&apos;]
at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:785)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.setClasspath(TestingEnvironment.java:1047)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addEntry(TestingEnvironment.java:284)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:264)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:252)
at org.eclipse.jdt.core.tests.builder.PackageTests.testNoPackageProblem(PackageTests.java:93)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2499012</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2014-12-19 04:19:42 -0500</bug_when>
    <thetext>org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle2 failed
platform - mac
build N20141218-2000
http://download.eclipse.org/eclipse/downloads/drops4/N20141218-2000/testresults/html/org.eclipse.jdt.core.tests.builder_macosx.cocoa.x86_64_7.0.html

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle2(MultiProjectTests.java:483)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>451677</bug_id>
          
          <creation_ts>2014-11-15 09:25:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] missing type inference</short_desc>
          <delta_ts>2015-04-19 23:59:10 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marco Trudel">marco</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>lukas.eder</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2483391</commentid>
    <comment_count>0</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-11-15 09:25:09 -0500</bug_when>
    <thetext>This works in javac but not in Eclipse:

import java.util.ArrayList;
import java.util.function.Function;

public class Test
{
	public static void test()
	{
		operationOnCreated(
				create(123, size -&gt; new ArrayList&lt;Integer&gt;(size)),
				l -&gt; l.size() // works with: (ArrayList&lt;Integer&gt; l) -&gt; l.size()
			);
	}

	public static &lt;R, A&gt; R create(A arg, Function&lt;A, R&gt; factory)
	{
		return factory.apply(arg);
	}

	public static &lt;R, A&gt; R operationOnCreated(A created, Function&lt;A, R&gt; function)
	{
		return function.apply(created);
	}
}

The type for &quot;l&quot; should be inferred to be &quot;ArrayList&lt;Integer&gt;&quot;, but it&apos;s &quot;Object&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483400</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-15 10:15:04 -0500</bug_when>
    <thetext>It is also accepted by ecj if you change the first lambda to

  (Integer size) -&gt; new ArrayList&lt;Integer&gt;(size))

whereas this variant:

  (int size) -&gt; new ArrayList&lt;Integer&gt;(size))

causes both compilers to reject.


Similarly, changing the second lambda to

  l -&gt; (Integer)l.size()

allows ecj to find an inference solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483496</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-15 20:28:22 -0500</bug_when>
    <thetext>I&apos;ll take a look -</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483500</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-16 02:07:20 -0500</bug_when>
    <thetext>I released a disabled junit here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=43390194b204e2f99c26a50ecdeca6392ca62b37.

At M2, we complain: 


The method size() is undefined for the type Object	

while post the new integration between F &amp; G, we report:

Type mismatch: cannot convert from Object to &lt;unknown&gt;
The method size() is undefined for the type Object</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484574</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-17 22:48:30 -0500</bug_when>
    <thetext>Given this is not a recent regression, I&apos;ll let someone else take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2548381</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-04-19 23:59:10 -0400</bug_when>
    <thetext>Moving out of 4.5</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>462636</bug_id>
          
          <creation_ts>2015-03-20 04:51:00 -0400</creation_ts>
          <short_desc>[test][model]JavaIndexTests.testPlatformJarIndexFile failed</short_desc>
          <delta_ts>2015-10-27 00:06:04 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">sasikanth.bharadwaj</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
          <qa_contact name="Manoj Palat">manpalat</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2534817</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-03-20 04:51:06 -0400</bug_when>
    <thetext>build Id : I20150319-1640
platform: win32

details: ----------- Expected ------------ platform:/resource/ForIndex/Test.index.zip!/Test.index ------------ but was ------------ file:/C:/hb/workspace/ep45I-unit-win32/workarea/I20150319-1640/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/data/.metadata/.plugins/org.eclipse.jdt.core/3770488089.index --------- Difference is ---------- expected:&lt;[platform:/resource/ForIndex/Test.index.zip!/Test].index&gt; but was:&lt;[file:/C:/hb/workspace/ep45I-unit-win32/workarea/I20150319-1640/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/data/.metadata/.plugins/org.eclipse.jdt.core/3770488089].index&gt;

stacktrace: junit.framework.ComparisonFailure: 
----------- Expected ------------
platform:/resource/ForIndex/Test.index.zip!/Test.index
------------ but was ------------
file:/C:/hb/workspace/ep45I-unit-win32/workarea/I20150319-1640/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/data/.metadata/.plugins/org.eclipse.jdt.core/3770488089.index
--------- Difference is ----------
 expected:&lt;[platform:/resource/ForIndex/Test.index.zip!/Test].index&gt; but was:&lt;[file:/C:/hb/workspace/ep45I-unit-win32/workarea/I20150319-1640/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/data/.metadata/.plugins/org.eclipse.jdt.core/3770488089].index&gt;
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
	at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:232)
	at org.eclipse.jdt.core.tests.model.JavaIndexTests.testPlatformJarIndexFile(JavaIndexTests.java:855)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:105)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:89)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite$1.protect(SuiteOfTestCases.java:77)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:86)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
	at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
	at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
	at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
	at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2535672</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-23 04:47:43 -0400</bug_when>
    <thetext>Could this be a stale data issue from other tests run before? Manoj, please take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2535678</commentid>
    <comment_count>2</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-03-23 04:58:30 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #1)
&gt; Could this be a stale data issue from other tests run before? Manoj, please
&gt; take a look.

Jay: I checked that sequence of run - prima facie this issue is not related to stale data of old tests. Most probable hypothesis at this point of time is that IClasspathAttribute.INDEX_LOCATION_ATTRIBUTE_NAME usage at some point of time returns null and computes the default index. Will update once I have more info.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632047</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-10-27 00:06:04 -0400</bug_when>
    <thetext>JavaIndexTests.testIndexInJar failed in the latest build and the symptom appears same.

http://download.eclipse.org/eclipse/downloads/drops4/I20151026-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_8.0.html</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>468093</bug_id>
          
          <creation_ts>2015-05-22 18:16:00 -0400</creation_ts>
          <short_desc>static imports are removed on &quot;organize imports&quot; save action if annotations can&apos;t be found on the classpath</short_desc>
          <delta_ts>2015-05-26 00:08:26 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David Green">david.green</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>andrew.eisenberg</cc>
    
    <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2567337</commentid>
    <comment_count>0</comment_count>
    <who name="David Green">david.green</who>
    <bug_when>2015-05-22 18:16:13 -0400</bug_when>
    <thetext>When writing a JUnit test, the static import for JUnit&apos;s Assert.assertEquals is removed every time I save the file.  The problem appeared to occur because a transitive dependency to an annotation on some other class was not resolved.  I have on-save &quot;organize imports&quot; enabled.

Note that the unresolved annotation is not referenced directly in the the editor&apos;s compilation unit.

The problem goes away when the transitive dependency is added under &quot;Require-Bundle&quot; in the plug-in project manifest of the compilation unit being edited.

I&apos;m running the Ecilpse SDK:

Version: Mars (4.5)
Build id: I20150430-1445

The following was in the error log:

org.eclipse.jdt.internal.compiler.problem.AbortCompilation: Pb(324) The type com.tasktop.api.annotations.SomeAnnotationClass cannot be resolved. It is indirectly referenced from required .class files
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:157)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:222)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(ProblemReporter.java:2382)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.isClassPathCorrect(ProblemReporter.java:4704)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:104)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:187)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:186)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findImport(CompilationUnitScope.java:463)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleImport(CompilationUnitScope.java:517)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInImports(CompilationUnitScope.java:394)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getBinding(Scope.java:2095)
	at org.eclipse.jdt.internal.compiler.lookup.BlockScope.getBinding(BlockScope.java:485)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.resolveType(QualifiedNameReference.java:999)
	at org.eclipse.jdt.internal.compiler.ast.MemberValuePair.resolveTypeExpecting(MemberValuePair.java:89)
	at org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:830)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:829)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:697)
	at org.eclipse.jdt.internal.compiler.lookup.MethodBinding.getAnnotationTagBits(MethodBinding.java:636)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1793)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1480)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.availableMethods(ReferenceBinding.java:238)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredMethods(TypeBinding.java:302)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.hasFieldWithName(UnresolvedElementsSubProcessor.java:561)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addSimilarVariableProposals(UnresolvedElementsSubProcessor.java:499)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getVariableProposals(UnresolvedElementsSubProcessor.java:290)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:316)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:378)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:339)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:335)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:468)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectProposals(JavaCorrectionProcessor.java:280)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.computeQuickAssistProposals(JavaCorrectionProcessor.java:242)
	at org.eclipse.jface.text.quickassist.QuickAssistAssistant$ContentAssistProcessor.computeCompletionProposals(QuickAssistAssistant.java:75)
	at org.eclipse.jface.text.contentassist.ContentAssistant$5.run(ContentAssistant.java:1904)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1902)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:573)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:570)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:505)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:499)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1720)
	at org.eclipse.jface.text.quickassist.QuickAssistAssistant.showPossibleQuickAssists(QuickAssistAssistant.java:128)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionAssistant.showPossibleQuickAssists(JavaCorrectionAssistant.java:200)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:192)
	at org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:128)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:126)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:122)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:252)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:234)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:152)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:493)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:486)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:210)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:286)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:507)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:558)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:378)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:324)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:86)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1105)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4225)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1481)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1504)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1518)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5784)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5694)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2120)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2337)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5756)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5193)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5342)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3695)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1499)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2567341</commentid>
    <comment_count>1</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2015-05-22 18:37:27 -0400</bug_when>
    <thetext>Unfortunately, we can&apos;t share the code, but I can give a more detailed description of what is happenig.

The project where this occurs in is a PDE project. There is a class in that project that is trying to load a type from another dependent project. This type is annotated by an annotation from a third project. This annotation has runtime retention.  The set up looks roughly like this:

Test bundle (requires main bundle)

class AClassTest {
  private AClass aClass;
}

Main bundle (requires annotation bundle)
 
@SomeAnnotation
class AClass {}


Annotation bundle

@Retention(RetentionPolicy.RUNTIME)
@interface SomeAnnotation{}


Now with this setup it seems like the compiler should be happy and indeed it is, but it seems like the resolver is not.  And the exceptions being thrown are happening during resolve time.

Hope this helps a bit with reproducibility.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2567342</commentid>
    <comment_count>2</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2015-05-22 18:38:05 -0400</bug_when>
    <thetext>Moving to JDT core since this is not a UI bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2567350</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-05-22 20:00:13 -0400</bug_when>
    <thetext>Hi Andrew, thanks for explanations.

(In reply to Andrew Eisenberg from comment #1)
&gt; Now with this setup it seems like the compiler should be happy and indeed it
&gt; is, but it seems like the resolver is not.  And the exceptions being thrown
&gt; are happening during resolve time.

By resolver you mean call paths following org.eclipse.jdt.core.dom.TypeBinding.getDeclaredMethods() like above above? (which is a &quot;side-entry&quot; into the compiler).

BTW: the stack trace above is triggered from quick assist, do you see similar exceptions also during organize imports?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2568067</commentid>
    <comment_count>4</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2015-05-25 22:38:04 -0400</bug_when>
    <thetext>&gt; By resolver you mean call paths following
&gt; org.eclipse.jdt.core.dom.TypeBinding.getDeclaredMethods() like above above?
&gt; (which is a &quot;side-entry&quot; into the compiler).

Yes.


&gt; BTW: the stack trace above is triggered from quick assist, do you see
&gt; similar exceptions also during organize imports?

I can&apos;t seem to elicit exceptions in any other way, but I have the following behavior:

1. No code hovers
2. Organize imports removes static imports, but leaves all others
3. Semantic highlighting (eg- italicizing static field references) is not working
4. Mark occurrences not working
5. Extract method fails with the following exception:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1770)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1464)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.availableMethods(ReferenceBinding.java:229)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredMethods(TypeBinding.java:289)
	at org.eclipse.jdt.internal.corext.dom.Bindings.findMethodInType(Bindings.java:360)
	at org.eclipse.jdt.internal.corext.refactoring.Checks.checkMethodInType(Checks.java:313)
	at org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodAnalyzer.checkInput(ExtractMethodAnalyzer.java:351)
	at org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring.checkFinalConditions(ExtractMethodRefactoring.java:476)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
	at org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:121)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:122)



Oddly however, rename refactoring on a method of the class works correctly. It finds references both inside the file and outside.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>473177</bug_id>
          
          <creation_ts>2015-07-21 07:51:00 -0400</creation_ts>
          <short_desc>[1.8] [content assist] lambda content assist not working</short_desc>
          <delta_ts>2015-07-21 07:54:03 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Caleb Rabe">caleb.rabe</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2592725</commentid>
    <comment_count>0</comment_count>
    <who name="Caleb Rabe">caleb.rabe</who>
    <bug_when>2015-07-21 07:51:58 -0400</bug_when>
    <thetext>Below is an example of a very simple junit test case where the content assist doesn&apos;t work on one particular line. Specifically expected methods do not show up in the list of available methods.

        @Test
	public void testJava8StringsUnderstandingWithMaps2() {
		
		Map&lt;Integer, String&gt; testMap = new HashMap&lt;&gt;();
		testMap.put(1, &quot;one&quot;);
		testMap.put(2, &quot;two&quot;);
		testMap.put(3, &quot;three&quot;);
		
		Map&lt;Integer, String&gt; map = testMap.entrySet()
			.stream()
			.filter( p -&gt; p.getValue().length() == 3 )
			
			// this is the line where .getKey and .getValue are NOT suggested 
			.collect(Collectors.toMap(p -&gt; p.getKey(), p -&gt; p.getValue()));
		
		System.out.println(&quot;map result: &quot; + map);
		// output: map result: {1=one, 2=two}
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2592727</commentid>
    <comment_count>1</comment_count>
      <attachid>255329</attachid>
    <who name="Caleb Rabe">caleb.rabe</who>
    <bug_when>2015-07-21 07:54:03 -0400</bug_when>
    <thetext>Created attachment 255329
screenshot showcasing the problem</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>255329</attachid>
            <date>2015-07-21 07:54:00 -0400</date>
            <delta_ts>2015-07-21 07:54:03 -0400</delta_ts>
            <desc>screenshot showcasing the problem</desc>
            <filename>Screen Shot 2015-07-21 at 13.32.27.png</filename>
            <type>image/png</type>
            <size>70678</size>
            <attacher name="Caleb Rabe">caleb.rabe</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>475227</bug_id>
          
          <creation_ts>2015-08-18 01:38:00 -0400</creation_ts>
          <short_desc>Data race on org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.preferences</short_desc>
          <delta_ts>2015-08-20 23:17:21 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Yilong Li">yilong.li</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2603321</commentid>
    <comment_count>0</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-18 01:38:44 -0400</bug_when>
    <thetext>Here is the race report given by a dynamic race detector:
Data race on field org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.preferences: {{{
    Concurrent write in thread T1 (locks held: {Monitor@40866d39})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaProject.getEclipsePreferences(JavaProject.java:1492)
        at org.eclipse.jdt.internal.core.JavaProject.getOption(JavaProject.java:1657)
        at org.eclipse.jdt.internal.core.ClasspathEntry.validateClasspath(ClasspathEntry.java:1747)
        at org.eclipse.jdt.internal.core.SetClasspathOperation.verify(SetClasspathOperation.java:118)
        at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:783)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
        at org.eclipse.jdt.testplugin.JavaProjectHelper.createJavaProject(JavaProjectHelper.java:166)
        at org.eclipse.jdt.text.tests.CompilationUnitDocumentProviderTest.setupProject(CompilationUnitDocumentProviderTest.java:54)
        at org.eclipse.jdt.text.tests.CompilationUnitDocumentProviderTest.test2(CompilationUnitDocumentProviderTest.java:86)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.UITestApplication$2.run(UITestApplication.java:197)
        at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
        at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
        - locked Monitor@40866d39 at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:131) 
        at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3794)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3433)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
        at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:157)
        at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
        at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
        at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
        at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
        at org.eclipse.test.UITestApplication.runApplication(UITestApplication.java:140)
        at org.eclipse.test.UITestApplication.run(UITestApplication.java:62)
        at org.eclipse.test.UITestApplication.start(UITestApplication.java:212)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread

    Concurrent write in thread T30 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaProject.getEclipsePreferences(JavaProject.java:1492)
        at org.eclipse.jdt.internal.core.JavaProject.getOption(JavaProject.java:1657)
        at org.eclipse.jdt.internal.core.JavaModelManager.determineIfOnClasspath(JavaModelManager.java:1041)
        at org.eclipse.jdt.internal.core.JavaModelManager.createCompilationUnitFrom(JavaModelManager.java:979)
        at org.eclipse.jdt.internal.core.JavaModelManager.create(JavaModelManager.java:898)
        at org.eclipse.jdt.internal.core.JavaModelManager.create(JavaModelManager.java:862)
        at org.eclipse.jdt.core.JavaCore.create(JavaCore.java:3208)
        at org.eclipse.jdt.internal.ui.BuildpathIndicatorLabelDecorator.getOverlay(BuildpathIndicatorLabelDecorator.java:46)
        at org.eclipse.jdt.internal.ui.BuildpathIndicatorLabelDecorator.decorate(BuildpathIndicatorLabelDecorator.java:32)
        at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:260)
        at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:83)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:367)
        at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:349)
        at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:367)
        at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:327)
        at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
    T30 is created by T29
        at org.eclipse.core.internal.jobs.WorkerPool.jobQueued(WorkerPool.java:148)
}}}

Two threads are writing to this field concurrently.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2604953</commentid>
    <comment_count>1</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-20 23:17:21 -0400</bug_when>
    <thetext>There are races on outputLocation and rawClasspath as well:

Data race on field org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.outputLocation: {{{
    Concurrent write in thread T1 (locks held: {Monitor@473e4597})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setClasspath(JavaModelManager.java:1222)
        at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setResolvedClasspath(JavaModelManager.java:1256)
        - locked Monitor@473e4597 at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setResolvedClasspath(JavaModelManager.java:n/a) 
        at org.eclipse.jdt.internal.core.JavaProject.resolveClasspath(JavaProject.java:2863)
        at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1962)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.getRootInfos(DeltaProcessingState.java:311)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.initializeRoots(DeltaProcessingState.java:256)
        at org.eclipse.jdt.internal.core.DeltaProcessor.processResourceDelta(DeltaProcessor.java:1858)
        at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2059)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:477)
        at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:299)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:289)
        at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:152)
        at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:374)
        at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1471)
        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2251)
        at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:794)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.setClasspath(TestingEnvironment.java:1048)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addEntry(TestingEnvironment.java:285)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:265)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:253)
        at org.eclipse.jdt.core.tests.builder.BasicBuildTests.testTags(BasicBuildTests.java:177)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread

    Concurrent read in thread T29 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaProject.getOutputLocation(JavaProject.java:1737)
        at org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute(IndexAllProject.java:125)
        at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:405)
    T29 is created by T1
        at org.eclipse.jdt.internal.core.search.processing.JobManager.reset(JobManager.java:331)
}}}

Data race on field org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.rawClasspath: {{{
    Concurrent write in thread T1 (locks held: {Monitor@72e70c3d})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setClasspath(JavaModelManager.java:1221)
        at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setResolvedClasspath(JavaModelManager.java:1256)
        - locked Monitor@72e70c3d at org.eclipse.jdt.internal.core.JavaModelManager$PerProjectInfo.setResolvedClasspath(JavaModelManager.java:n/a) 
        at org.eclipse.jdt.internal.core.JavaProject.resolveClasspath(JavaProject.java:2863)
        at org.eclipse.jdt.internal.core.JavaProject.getResolvedClasspath(JavaProject.java:1962)
        at org.eclipse.jdt.internal.core.ProjectReferenceChange.updateProjectReferencesIfNecessary(ProjectReferenceChange.java:47)
        at org.eclipse.jdt.internal.core.ChangeClasspathOperation.classpathChanged(ChangeClasspathOperation.java:59)
        at org.eclipse.jdt.internal.core.SetClasspathOperation.executeOperation(SetClasspathOperation.java:74)
        at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2242)
        at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:794)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.setClasspath(TestingEnvironment.java:1048)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addEntry(TestingEnvironment.java:285)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:265)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:253)
        at org.eclipse.jdt.core.tests.builder.BasicBuildTests.testUnusedImport(BasicBuildTests.java:318)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread

    Concurrent read in thread T29 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaProject.getRawClasspath(JavaProject.java:1932)
        at org.eclipse.jdt.internal.core.search.indexing.IndexAllProject.execute(IndexAllProject.java:65)
        at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:405)
    T29 is created by T1
        at org.eclipse.jdt.internal.core.search.processing.JobManager.reset(JobManager.java:331)
}}}</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>475510</bug_id>
          
          <creation_ts>2015-08-20 12:16:00 -0400</creation_ts>
          <short_desc>Data race on org.eclipse.jdt.internal.core.JavaProjectElementInfo.projectCache</short_desc>
          <delta_ts>2015-09-15 17:26:59 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://git.eclipse.org/r/56034</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Yilong Li">yilong.li</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2604827</commentid>
    <comment_count>0</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-20 12:16:51 -0400</bug_when>
    <thetext>Here is the race report given by a dynamic race detector:
Data race on field org.eclipse.jdt.internal.core.JavaProjectElementInfo.projectCache: {{{
    Concurrent read in thread T29 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaModelManager.determineIfOnClasspath(JavaModelManager.java:1033)
        at org.eclipse.jdt.internal.core.JavaModelManager.createCompilationUnitFrom(JavaModelManager.java:979)
        at org.eclipse.jdt.internal.core.JavaModelManager.secondaryTypeAdding(JavaModelManager.java:4480)
        at org.eclipse.jdt.internal.core.search.indexing.AbstractIndexer.addTypeDeclaration(AbstractIndexer.java:186)
        at org.eclipse.jdt.internal.core.search.indexing.AbstractIndexer.addClassDeclaration(AbstractIndexer.java:47)
        at org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor.enterClass(SourceIndexerRequestor.java:215)
        at org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor.enterType(SourceIndexerRequestor.java:314)
        at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:635)
        at org.eclipse.jdt.internal.compiler.SourceElementNotifier.notifySourceElementRequestor(SourceElementNotifier.java:457)
        at org.eclipse.jdt.internal.compiler.SourceElementParser.parseCompilationUnit(SourceElementParser.java:967)
        at org.eclipse.jdt.internal.core.search.indexing.SourceIndexer.indexDocument(SourceIndexer.java:108)
        at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.indexDocument(JavaSearchParticipant.java:76)
        at org.eclipse.jdt.internal.core.search.indexing.IndexManager.indexDocument(IndexManager.java:504)
        at org.eclipse.jdt.internal.core.search.indexing.IndexManager$1.execute(IndexManager.java:984)
        at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:405)
    T29 is created by T1
        at org.eclipse.jdt.internal.core.search.processing.JobManager.reset(JobManager.java:331)

    Concurrent write in thread T1 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.JavaProjectElementInfo.getProjectCache(JavaProjectElementInfo.java:232)
        at org.eclipse.jdt.internal.core.JavaProjectElementInfo.newNameLookup(JavaProjectElementInfo.java:291)
        at org.eclipse.jdt.internal.core.JavaProject.newNameLookup(JavaProject.java:2329)
        at org.eclipse.jdt.internal.core.JavaProject.newNameLookup(JavaProject.java:2339)
        at org.eclipse.jdt.internal.core.JavaProject.findType(JavaProject.java:1357)
        at org.eclipse.jdt.internal.core.JavaProject.findType(JavaProject.java:1264)
        at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:170)
        at org.eclipse.jdt.internal.compiler.Compiler$1.acceptResult(Compiler.java:280)
        at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:589)
        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:458)
        at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:367)
        at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:330)
        at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:304)
        at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:135)
        at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:267)
        at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:195)
        at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:735)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)
        at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)
        at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:301)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:304)
        at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
        at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:403)
        at org.eclipse.core.internal.resources.Project$1.run(Project.java:557)
        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2242)
        at org.eclipse.core.internal.resources.Project.internalBuild(Project.java:535)
        at org.eclipse.core.internal.resources.Project.build(Project.java:112)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.incrementalBuild(TestingEnvironment.java:793)
        at org.eclipse.jdt.core.tests.builder.BuilderTests.incrementalBuild(BuilderTests.java:416)
        at org.eclipse.jdt.core.tests.builder.IncrementalTests.testMoveSecondaryType(IncrementalTests.java:389)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread
}}}

Looks like JavaModelManager.java#L1033 should have accessed this field by calling JavaProjectElementInfo.getProjectCache. Perhaps JavaProjectElementInfo.projectCache should be made private to eliminate such problem?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2615317</commentid>
    <comment_count>1</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-09-15 17:26:59 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/56034</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>475511</bug_id>
          
          <creation_ts>2015-08-20 12:24:00 -0400</creation_ts>
          <short_desc>Data race on org.eclipse.jdt.internal.core.search.processing.JobManager.jobStart</short_desc>
          <delta_ts>2015-08-20 12:24:57 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Yilong Li">yilong.li</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2604829</commentid>
    <comment_count>0</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-20 12:24:57 -0400</bug_when>
    <thetext>Here is the race report given by a dynamic race detector:
Data race on field org.eclipse.jdt.internal.core.search.processing.JobManager.jobStart: {{{
    Concurrent read in thread T1 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.search.indexing.IndexManager.indexSourceFolder(IndexManager.java:614)
        at org.eclipse.jdt.internal.core.ClasspathChange.requestIndexing(ClasspathChange.java:566)
        at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2039)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:477)
        at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:299)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:289)
        at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:152)
        at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:374)
        at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1471)
        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2251)
        at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:794)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.setClasspath(TestingEnvironment.java:1048)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addEntry(TestingEnvironment.java:285)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addPackageFragmentRoot(TestingEnvironment.java:167)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addPackageFragmentRoot(TestingEnvironment.java:145)
        at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addPackageFragmentRoot(TestingEnvironment.java:136)
        at org.eclipse.jdt.core.tests.builder.IncrementalTests.testMemberTypeOfOtherProject(IncrementalTests.java:607)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread

    Concurrent write in thread T29 (locks held: {Monitor@e919628})
 ----&gt;  at org.eclipse.jdt.internal.core.search.processing.JobManager.moveToNextJob(JobManager.java:142)
        at org.eclipse.jdt.internal.core.search.indexing.IndexManager.moveToNextJob(IndexManager.java:638)
        - locked Monitor@e919628 at org.eclipse.jdt.internal.core.search.indexing.IndexManager.moveToNextJob(IndexManager.java:n/a) 
        at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:411)
    T29 is created by T1
        at org.eclipse.jdt.internal.core.search.processing.JobManager.reset(JobManager.java:331)
}}}

I think this class really needs some rework given its importance.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>475547</bug_id>
          
          <creation_ts>2015-08-21 00:14:00 -0400</creation_ts>
          <short_desc>Data race on org.eclipse.jdt.core.tests.util.TestVerifier.outputBuffer &amp; errorBuffer</short_desc>
          <delta_ts>2015-08-21 00:14:54 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Yilong Li">yilong.li</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2604962</commentid>
    <comment_count>0</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-21 00:14:54 -0400</bug_when>
    <thetext>Here is the race report given by a dynamic race detector:

Data race on field org.eclipse.jdt.core.tests.util.TestVerifier.errorBuffer: {{{
    Concurrent read in thread T30 (locks held: {})
 ----&gt;  at org.eclipse.jdt.core.tests.util.TestVerifier$4.run(TestVerifier.java:522)
    T30 is created by T1
        at org.eclipse.jdt.core.tests.util.TestVerifier.launchVerifyTestsIfNeeded(TestVerifier.java:530)

    Concurrent write in thread T1 (locks held: {})
 ----&gt;  at org.eclipse.jdt.core.tests.util.TestVerifier.verifyClassFiles(TestVerifier.java:624)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2533)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2298)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runConformTest(AbstractRegressionTest.java:1220)
        at org.eclipse.jdt.core.tests.compiler.regression.ArrayTest.test001(ArrayTest.java:45)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:56)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread
}}}

Data race on field org.eclipse.jdt.core.tests.util.TestVerifier.outputBuffer: {{{
    Concurrent read in thread T29 (locks held: {})
 ----&gt;  at org.eclipse.jdt.core.tests.util.TestVerifier$3.run(TestVerifier.java:509)
    T29 is created by T1
        at org.eclipse.jdt.core.tests.util.TestVerifier.launchVerifyTestsIfNeeded(TestVerifier.java:529)

    Concurrent write in thread T1 (locks held: {})
 ----&gt;  at org.eclipse.jdt.core.tests.util.TestVerifier.verifyClassFiles(TestVerifier.java:623)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2533)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2298)
        at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runConformTest(AbstractRegressionTest.java:1220)
        at org.eclipse.jdt.core.tests.compiler.regression.ArrayTest.test001(ArrayTest.java:45)
        at junit.framework.TestCase.runTest(TestCase.java:176)
        at junit.framework.TestCase.runBare(TestCase.java:141)
        at junit.framework.TestResult$1.protect(TestResult.java:122)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.framework.TestResult.run(TestResult.java:125)
        at junit.framework.TestCase.run(TestCase.java:129)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.jdt.core.tests.util.CompilerTestSetup.run(CompilerTestSetup.java:56)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
        at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
        at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread
}}}</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>479483</bug_id>
          
          <creation_ts>2015-10-10 04:23:00 -0400</creation_ts>
          <short_desc>[1.9][model] Define what is Module in Eclipse</short_desc>
          <delta_ts>2016-02-23 08:21:56 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=105372</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J9</target_milestone>
          
          <blocked>482582</blocked>
    
    <blocked>486011</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>benjamin</cc>
    
    <cc>brodao</cc>
    
    <cc>caniszczyk</cc>
    
    <cc>cdtdoug</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>Ed.Merks</cc>
    
    <cc>gautier.desaintmartinlacaze</cc>
    
    <cc>gregory.amerson</cc>
    
    <cc>gunnar</cc>
    
    <cc>Lars.Vogel</cc>
    
    <cc>manderse</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>mike.milinkovich</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>pbenedict</cc>
    
    <cc>psuzzi</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>sasikanth.bharadwaj</cc>
    
    <cc>slewis</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tjwatson</cc>
    
    <cc>Vikas.Chandra</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2625666</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-10-10 04:23:55 -0400</bug_when>
    <thetext>Brought forward from bug 473901, comment #6:

My initial thought is that module
  - is a package fragment root (source/binary)
  - can be added to a Java project as a source folder (1x1)
  - can be added to a Java project as a JAR (1x1)
  - (s) can be added through Jimage files (many x 1)
  - Plain old src folders and Jars to be unnamed modules?

Questions:
 - What is the scope of the module system?
 - If we allow multiple modules in a project, and if there are dependent modules in another project, how does a depending module in another project read this module?
  - How does other components, notably PDE, see the modules (if at all)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2626546</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-10-13 06:58:39 -0400</bug_when>
    <thetext>We may also want to spare a thought for what will likely be a module in the J2EE world and how WTP will consume what we offer for module support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2631927</commentid>
    <comment_count>2</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2015-10-26 14:30:01 -0400</bug_when>
    <thetext>Regarding comment #1:
- Why would a developer add a module as a source folder? A module is a type of dependency. If you&apos;re thinking about project references, you (1) add the dependency or (2) add an existing project that is a module... but #2 still seems superfluous since Eclipse is project based not module based. 

- Is multiple modules in a project feasible? I haven&apos;t read anything on modules being nested or allowing multiple module-info.java in a project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632659</commentid>
    <comment_count>3</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2015-10-27 19:03:58 -0400</bug_when>
    <thetext>Jay, I started a document that captures my notes from JavaOne and thoughts. It&apos;s available for public comment. Once finalized, I can upload a PDF or some other document to this bug if you like.

https://docs.google.com/a/wagenknecht.org/document/d/1YHx26OJFSn0qPvBKmq9_RfHn7SJ2PBRg39svC6AjZe4/edit?usp=sharing</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632660</commentid>
    <comment_count>4</comment_count>
      <attachid>257571</attachid>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2015-10-27 19:10:43 -0400</bug_when>
    <thetext>Created attachment 257571
Thoughts and notes on Jigsaw from JavaOne 2015</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2632688</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2015-10-28 00:01:33 -0400</bug_when>
    <thetext>Extending Platform Resources so that jar-file or module contents can be mounted inside the workspace as special folders providing read and write access to individual files would provide a lot of flexibility for working with them. Then, having multiple folders combine into one logical folder such that the contents of one of the folders are available as read-only in the other folders seems like what layers are supposed to be.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2633342</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-10-29 02:09:41 -0400</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #3)
&gt; Jay, I started a document that captures my notes from JavaOne and thoughts.
&gt; It&apos;s available for public comment. Once finalized, I can upload a PDF or
&gt; some other document to this bug if you like.
&gt; 
&gt; https://docs.google.com/a/wagenknecht.org/document/d/
&gt; 1YHx26OJFSn0qPvBKmq9_RfHn7SJ2PBRg39svC6AjZe4/edit?usp=sharing

Thanks Gunnar, this looks nice.

One clarification I seek is this: You have written

&quot;The “unnamed” model can ready every other module (imports everything)
No other module can ever ready something from the “unnamed” module&quot;

But I see this in The State of the Module:

&quot;An unnamed module reads every other module, and it exports all of its packages to every other module.&quot;

which seems to conflict with what you said. Can you please clarify?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2633560</commentid>
    <comment_count>7</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2015-10-29 08:46:34 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #6)
&gt; One clarification I seek is this: You have written
&gt; 
&gt; &quot;The “unnamed” model can ready every other module (imports everything)
&gt; No other module can ever ready something from the “unnamed” module&quot;
&gt; 
&gt; But I see this in The State of the Module:
&gt; 
&gt; &quot;An unnamed module reads every other module, and it exports all of its
&gt; packages to every other module.&quot;
&gt; 
&gt; which seems to conflict with what you said. Can you please clarify?

Hmm ... what I meant to say is that no other module can depend on the unnamed module. The unnamed module exports all of its packages. I can see that the exports are required for not breaking reflection. But in reality, no module should be able to depend on the unnamed module, i.e. you can&apos;t declare a require &quot;unnamed&quot; in the module info.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2643311</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-11-23 22:29:06 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #0)
&gt;   - can be added to a Java project as a source folder (1x1)

In the current setup, this would require separate output folders for each source folder that is a module.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2643727</commentid>
    <comment_count>9</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2015-11-24 11:44:26 -0500</bug_when>
    <thetext>So the intention here to allow one project to have multiple module source folders which means producing multiple module jars? If so, I am a critic of that choice. Each module, to me, seems like a new project with its own Java compiler configuration, etc. I don&apos;t understand the use case this multiplicity (complexity, really) is trying to support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644075</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-11-25 06:44:38 -0500</bug_when>
    <thetext>(In reply to Paul Benedict from comment #9)
&gt; So the intention here to allow one project to have multiple module source
&gt; folders which means producing multiple module jars? If so, I am a critic of
&gt; that choice. Each module, to me, seems like a new project with its own Java
&gt; compiler configuration, etc. I don&apos;t understand the use case this
&gt; multiplicity (complexity, really) is trying to support.

It&apos;s not something we want to specifically support for modules, but something that comes along with Java projects - multiple source folders per project. I.e., assuming we decide on source folders being the equivalent of modules. I personally haven&apos;t thought about coming up with new java element for modules yet, which could mean more effort. But we will think about it if we have enough reasons.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644166</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-11-25 10:11:17 -0500</bug_when>
    <thetext>Bug 105372 discusses the &quot;multiple classpaths per project&quot; request. I just explained in bug 105372 comment 19 why that&apos;s a no-go.

We should allow a Java project to become a module, but I don&apos;t think it makes sense to have multiple modules in one Java project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644727</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-11-26 22:37:02 -0500</bug_when>
    <thetext>Talking about modules in Eclipse Java projects, we should also keep in mind how we want the transition from regular Java projects with possibly multiple source folders into a project with module(s).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2647391</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-12-03 04:55:53 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #11)
&gt; Bug 105372 discusses the &quot;multiple classpaths per project&quot; request. I just
&gt; explained in bug 105372 comment 19 why that&apos;s a no-go.

Whether we support multiple modules in a project or not, this particular problem you stated remains.

Let&apos;s say a Java project becomes a module. As a project it has the JRE in its build path. But as a module, for example, it only &quot;requires&quot; java.base. Now what should be the scope of the search etc. you mentioned?

As we already discussed, a IPackageFragmentRoot can naturally transform into a module, which means multiple modules inside a project will come free.

My recommendation is to let everything else (except the compiler i.e.) to have access to all that are in the project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2647884</commentid>
    <comment_count>14</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2015-12-03 16:56:07 -0500</bug_when>
    <thetext>Each module is just a JAR at packaging time. If you were to have a theoretical Eclipse project with N source modules, you&apos;re going to get N jars. Jay, is that the kind of output you&apos;re wanting to support? And why is that more preferable than setting up N Java Projects?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2647914</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-12-03 22:14:37 -0500</bug_when>
    <thetext>(In reply to Paul Benedict from comment #14)
&gt; Each module is just a JAR at packaging time. If you were to have a
&gt; theoretical Eclipse project with N source modules, you&apos;re going to get N
&gt; jars. Jay, is that the kind of output you&apos;re wanting to support? And why is
&gt; that more preferable than setting up N Java Projects?

I am not saying I prefer one over another. I was just saying it&apos;s possible to have both. People can choose to keep just one module in a project. Some of the existing APIs, such as IJavaProject#getPackageFragmentRoots() already have provision for such a multi-module/multi-classpath setup.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2647918</commentid>
    <comment_count>16</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-12-03 23:38:56 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; Each module is just a JAR at packaging time. If you were to have a theoretical
&gt; Eclipse project with N source modules, you&apos;re going to get N jars. Jay, is that
&gt; the kind of output you&apos;re wanting to support? And why is that more preferable
&gt; than setting up N Java Projects?
I don&apos;t think it&apos;s a question of one versus another. It&apos;s not that supporting multiple modules per project would preclude the users from having one module per project if that is the way they want it. And there probably will be a way of packaging multiple modules into a single archive. I feel that there&apos;s no need to impose such a restriction on projects since such support, quoting from Jay&apos;s comment, &quot;will come free&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2648034</commentid>
    <comment_count>17</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2015-12-04 04:58:24 -0500</bug_when>
    <thetext>I think another limit of the &quot;one-module-per-project&quot; approach is JUnit tests. Although this isn&apos;t baked fully yet, Oracle expects tools to create test modules under the cover and patch modules under test for running such tests. It&apos;s very common for people to have tests within the same project.

Jay, what is your thinking around layers?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2649697</commentid>
    <comment_count>18</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2015-12-08 13:29:51 -0500</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #17)
&gt; It&apos;s very common for people to have tests within the same project.

Gunnar, that is true. Regarding how to solve that problem, I have in mind one possible solution. For example, modules can be created dynamically via the Java API. So the JUnit tooling could be enhanced to create an in-memory module for all classes in src/test/java and use patching (-Xpatch option) to replace those in src/main/java.

(In reply to Sasikanth Bharadwaj from comment #16)
&gt; I don&apos;t think it&apos;s a question of one versus another. It&apos;s not that
&gt; supporting multiple modules per project would preclude the users from having
&gt; one module per project if that is the way they want it. And there probably
&gt; will be a way of packaging multiple modules into a single archive. 

Sasikanth, are you possibly referring to the JMOD format? That does allow multiple modules -- including configuration files and native code -- all to be packaged together in a ZIP. However, I still remain unconvinced an IDE should still support projects to output multiple modules; I feel it confuses concerns. Although a JMOD can contain multiple modules, it is not itself a module.

As I see it, developing multiple modules seems to be already appropriately supported by multiple IDE projects. Bundling them, one the other hand, seems more like a &quot;project aggregator&quot; function that either (1) is appropriate for yet another project (like the root of a Maven multi-module project) or (2) an enhancement to the Eclipse Export function.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2649763</commentid>
    <comment_count>19</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-12-08 15:35:16 -0500</bug_when>
    <thetext>See also Bug 105372, which request multiple classpaths per project since a long time. Dani indicated that this bug may help to solve that requirement. See http://dev.eclipse.org/mhonarc/lists/ide-dev/msg01039.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2649910</commentid>
    <comment_count>20</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2015-12-09 02:48:04 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; However, I still remain unconvinced an IDE should
&gt; still support projects to output multiple modules; I feel it confuses concerns.
&gt; Although a JMOD can contain multiple modules, it is not itself a module.

The Java Builder has been able to output to multiple destination directories from one project for a long time. The only reason the incremental builder isn&apos;t already generating multiple .jars from one project today and the same for modules tomorrow is that Platform-Resources doesn&apos;t have a filesystem implementation in EFS supporting the zipfs.jar library, which was introduced in Java SE 7.

The way OpenJDK module implementation story appears to be unfolding is that zipfs looks likely to become the reference implementation and API for working with module files, while retaining existing support for ZIP and JAR files. The preferred API access would be via java.nio.file.* classes, FileSystemProvider, FileSystems and Files in particular. Files API of course supports the normal file systems too. The Eclipse codebase is still mostly in the java.io.File era so upgrading all tooling that may now need to work with modules to Java 7 in one fell swoop while ensuring coherence with the workbench resource model would be a big undertaking. 

Fortuitously the EFS and the Files API match pretty closely. Instead of one huge upgrade all at once, introducing a bridge between EFS and Java FileSystem APIs at the workbench level so that the existing model can be used to access both  would allow a much more gradual upgrade path for all affected tooling. Not to mention providing a whole new level of flexibility in setting up your Eclipse projects and artifacts to best fit your particular requirements.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2661827</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-01-18 21:56:15 -0500</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #17)
&gt; Jay, what is your thinking around layers?

Honestly, I haven&apos;t yet thought much about it. My initial thought was it wouldn&apos;t have much of an impact on the IDE? I could be wrong, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2674192</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-02-22 01:57:42 -0500</bug_when>
    <thetext>Here&apos;s another thought/question:

The scenario is about two modules (m1, m2) residing in their own projects (p1, p2) and and m2 requires m1. In order to compile m2, we need m1 and that, in terms of eclipse project dependencies, means p2 has p1 in its build path. However, in another scenario, where m1 exports a package to m2 explicitly, the module system needs access to m2 when compiling m1 or at least when resolving the module m1. In the current set-up (what we have in BETA_JAVA9), this fails because the module system works within the context of compilation. And we can&apos;t, obviously declare p1 to have p2 in its build path because that could be a cyclic dependency.

The module system (at least within the IDE) needs to be able to work beyond the boundaries of project dependencies. 

In the same context, I can imagine people saying, the need to define project dependency (along with module dependency) is redundant. This is something we need to have a good look at as we go forward. My opinion is that we should explore ways with which modules can be discovered and resolved entirely independent of project (dependency).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2674632</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-02-23 00:42:04 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #22)
&gt; The module system (at least within the IDE) needs to be able to work beyond
&gt; the boundaries of project dependencies. 
&gt; 
&gt; In the same context, I can imagine people saying, the need to define project
&gt; dependency (along with module dependency) is redundant. This is something we
&gt; need to have a good look at as we go forward. My opinion is that we should
&gt; explore ways with which modules can be discovered and resolved entirely
&gt; independent of project (dependency).

One point against that argument: It would make it difficult to have multiple modules with same name in the workspace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2674684</commentid>
    <comment_count>24</comment_count>
    <who name="Gunnar Wagenknecht">gunnar</who>
    <bug_when>2016-02-23 04:42:05 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #23)
&gt; &gt; In the same context, I can imagine people saying, the need to define project
&gt; &gt; dependency (along with module dependency) is redundant. This is something we
&gt; &gt; need to have a good look at as we go forward. My opinion is that we should
&gt; &gt; explore ways with which modules can be discovered and resolved entirely
&gt; &gt; independent of project (dependency).
&gt; 
&gt; One point against that argument: It would make it difficult to have multiple
&gt; modules with same name in the workspace.

How so? It&apos;s just a name/label. The locations should be enough to differentiate and identify them.

Note, I&apos;m not saying that two modules with the same name in the module path makes sense. I&apos;m not sure how the JRE would handle that. I&apos;m trying to understand why this would be a problem for Eclipse?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2674756</commentid>
    <comment_count>25</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-02-23 08:21:56 -0500</bug_when>
    <thetext>(In reply to Gunnar Wagenknecht from comment #24)
&gt; How so? It&apos;s just a name/label. The locations should be enough to
&gt; differentiate and identify them.
&gt; 
&gt; Note, I&apos;m not saying that two modules with the same name in the module path
&gt; makes sense. I&apos;m not sure how the JRE would handle that. I&apos;m trying to
&gt; understand why this would be a problem for Eclipse?

It wouldn&apos;t be difficult in the command line compiler, because we have the guidance of -modulepath. However, in the IDE, the usual of declaring dependencies is through projects, libraries and other kind of containers.

Now thinking about it a bit more, it might be reasonable to disallow them in the IDE too, because it is inline with our current behavior of not allowing projects/bundles with same name.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>257571</attachid>
            <date>2015-10-27 19:10:00 -0400</date>
            <delta_ts>2015-10-27 19:10:43 -0400</delta_ts>
            <desc>Thoughts and notes on Jigsaw from JavaOne 2015</desc>
            <filename>file_479483.txt</filename>
            <type>text/plain</type>
            <size>83</size>
            <attacher name="Gunnar Wagenknecht">gunnar</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>480127</bug_id>
          
          <creation_ts>2015-10-19 10:26:00 -0400</creation_ts>
          <short_desc>[organise imports] happily removes static imports</short_desc>
          <delta_ts>2016-02-17 11:15:45 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ferry Huberts">mailings</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2628957</commentid>
    <comment_count>0</comment_count>
    <who name="Ferry Huberts">mailings</who>
    <bug_when>2015-10-19 10:26:16 -0400</bug_when>
    <thetext>In one of my Junit test classes the import organiser happily removes static imports.

This seems to happen to a modified file, which is saved, with &apos;organise imports on save&apos; enabled.

This does NOT seem to happen when explicit invoked on a saved file.


These are remove (but really used):
import static org.hamcrest.core.IsEqual.equalTo;
import static org.hamcrest.core.IsNot.not;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertThat;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2628962</commentid>
    <comment_count>1</comment_count>
    <who name="Ferry Huberts">mailings</who>
    <bug_when>2015-10-19 10:29:15 -0400</bug_when>
    <thetext>this didn&apos;t happen with 4.5.0: regression</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2672752</commentid>
    <comment_count>2</comment_count>
    <who name="Ferry Huberts">mailings</who>
    <bug_when>2016-02-17 11:00:06 -0500</bug_when>
    <thetext>This only happens when there are compile errors in the java file.

&quot;Rather&quot; annoying.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2672792</commentid>
    <comment_count>3</comment_count>
    <who name="Ferry Huberts">mailings</who>
    <bug_when>2016-02-17 11:15:45 -0500</bug_when>
    <thetext>(In reply to Ferry Huberts from comment #2)
&gt; This only happens when there are compile errors in the java file.
&gt; 
&gt; &quot;Rather&quot; annoying.

Ah, no.
Just had it happen to a file without compile errors.
I did an &apos;organise imports&apos; on the file and the static imports were removed.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>482026</bug_id>
          
          <creation_ts>2015-11-12 11:04:00 -0500</creation_ts>
          <short_desc>Java import templates are broken above class</short_desc>
          <delta_ts>2015-11-20 05:22:12 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 10</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jakob Jarosch">dev</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>dev</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2638823</commentid>
    <comment_count>0</comment_count>
    <who name="Jakob Jarosch">dev</who>
    <bug_when>2015-11-12 11:04:52 -0500</bug_when>
    <thetext>When creating a Java Template with the following contents and executing it above a newly created class (a class without any imports yet) it does create a broken import block.

-- Template ---
${:import(org.junit.experimental.categories.Category)}

@Category(com.sample.MyCategory.class)
---------------


--- Sample Class ---
package com.sample.mypackage;

&lt;&lt;Cursor&gt;&gt;
public class SampleTest {
}
--------------------


Now type the template name and press Ctrl+Space/Enter


--- Expected Class ---
package de.itdesign.meisterplan;

import org.junit.experimental.categories.Category;

@Category(com.sample.MyCategory.class)
public class SampleTest {
}
----------------------


--- Actual Class ----
package de.itdesign.meisterplan;

@Category(com.sample.MyCategory.class)rt org.junit.experimental.categories.Category;
public class SampleTest {
}
---------------------

So the import is now broken and after the actual @Category(...) annotation.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>482408</bug_id>
          
          <creation_ts>2015-11-17 13:02:00 -0500</creation_ts>
          <short_desc>PackageBinding annotations not available</short_desc>
          <delta_ts>2015-11-17 13:49:33 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tom Ball">tball</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2640878</commentid>
    <comment_count>0</comment_count>
      <attachid>258054</attachid>
    <who name="Tom Ball">tball</who>
    <bug_when>2015-11-17 13:02:32 -0500</bug_when>
    <thetext>Created attachment 258054
Source for package-annotations bug.

The attached zip contains an annotation (simplified version of javax.annotation.ParametersAreNonnullByDefault), package-info using that annotation, and a test file that has a method with a parameter. To check for &quot;inherited&quot; annotations by this, we have code similar to:

 boolean isNonNullParameter(IVariableBinding parameter) {
    if (hasAnnotation(parameter, ParametersAreNonnullByDefault.class)) {
      return true;
    }
    IPackageBinding pkg =
        parameter.getDeclaringMethod().getDeclaringClass().getPackage();
    return hasAnnotation(pkg, ParametersAreNonnullByDefault.class);
  }

  boolean hasAnnotation(IBinding binding, Class&lt;?&gt; annotationClass) {
    for (IAnnotationBinding annotation : binding.getAnnotations()) {
      if (typeEqualsClass(annotation.getAnnotationType(), annotationClass)) {
        return annotation;
      }
    }
    return null;
  }

The zipped classes fail to return true for the Test.test(s) parameter, because the package binding has no annotations. I&apos;ve tried this with putting package-info.java on the sourcepath, as well as package-info.class on the classpath.

Is there some workaround to get a package&apos;s annotations while working with one of its classes?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2640934</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-11-17 13:16:49 -0500</bug_when>
    <thetext>What is typeEqualsClass()?

Does the package binding have any annotations or none at all?

Do you by chance have a full JUnit ready for us to run?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2640947</commentid>
    <comment_count>2</comment_count>
    <who name="Tom Ball">tball</who>
    <bug_when>2015-11-17 13:49:33 -0500</bug_when>
    <thetext>Sorry, typeEqualsClass checks for package names rather than comparing package bindings. But it can simply be replaced:

  boolean hasAnnotation(IBinding binding, Class&lt;?&gt; annotationClass) {
    for (IAnnotationBinding annotation : binding.getAnnotations()) {
      throw new AssertionError(&quot;never happens&quot;);
    }
    return false;
  }

The package binding has no annotations, whether package-info.java is on the source path, or package-info.class is on the class path.

Do you have a JUnit test example that takes multiple sources? I haven&apos;t written a test for JDT, but would be happy to do so.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>258054</attachid>
            <date>2015-11-17 13:02:00 -0500</date>
            <delta_ts>2015-11-17 13:02:32 -0500</delta_ts>
            <desc>Source for package-annotations bug.</desc>
            <filename>package-annotation.zip</filename>
            <type>application/zip</type>
            <size>806</size>
            <attacher name="Tom Ball">tball</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>485915</bug_id>
          
          <creation_ts>2016-01-15 05:49:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compile error with Java 8</short_desc>
          <delta_ts>2016-01-19 04:02:49 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jean-Pierre Bergamin">james</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>stephan.herrmann</cc>
          <qa_contact name="Stephan Herrmann">stephan.herrmann</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2660914</commentid>
    <comment_count>0</comment_count>
    <who name="Jean-Pierre Bergamin">james</who>
    <bug_when>2016-01-15 05:49:53 -0500</bug_when>
    <thetext>This class give a compile error using Java 8 on the line with &quot;assertThat&quot; saying:

The method containsOnly(capture#1-of ? extends CompileIssue.MyClass...) in the type AbstractIterableAssert&lt;capture#4-of ?,capture#5-of ? extends Iterable&lt;? extends capture#1-of ? extends CompileIssue.MyClass&gt;,capture#1-of ? extends CompileIssue.MyClass&gt; is not applicable for the arguments (CompileIssue.MyClass)

---------

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Collection;
import java.util.Collections;

import org.junit.Test;

public class CompileIssue {

	private static class MyClass {
		@Override
		public boolean equals(Object obj) {
			return true;
		}

		@Override
		public int hashCode() {
			return 1;
		}
	}

	private static class Foo {
		public Collection &lt;? extends MyClass&gt; getIs() {
			return Collections.singleton(new MyClass());
		};
	}

	@Test
	public void test1() {
		Foo foo = new Foo();
		assertThat(foo.getIs()).containsOnly(new MyClass());
	}
}

---------

This class compiles fine with maven and in IntelliJ IDEA with Java8 (1.8.0_66).
This code also compiled fine with Java 7 in eclipse.

We use assertj-core 2.1.0 (groupId: org.assertj, artifactId: assertj-core)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2661181</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-01-15 15:47:55 -0500</bug_when>
    <thetext>I&apos;d love to analyze this without fiddling with the setting up of a maven project.
Could you please just paste the signature of the one method you are using? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2661447</commentid>
    <comment_count>2</comment_count>
    <who name="Jean-Pierre Bergamin">james</who>
    <bug_when>2016-01-18 04:23:03 -0500</bug_when>
    <thetext>The following code should resemble the original one. I&apos;ll set up a self-contained maven project later on.


import java.util.Collection;
import java.util.Collections;

import org.junit.Test;

public class CompileIssue {

	private static class MyClass {
		@Override
		public boolean equals(Object obj) {
			return true;
		}

		@Override
		public int hashCode() {
			return 1;
		}
	}

	private static class Foo {
		public Collection &lt;? extends MyClass&gt; getIs() {
			return Collections.singleton(new MyClass());
		};
	}

	public static class FailsClass&lt;S extends FailsClass&lt;S, A, T&gt;, A extends Iterable&lt;? extends T&gt;, T&gt; {
		public S containsOnly(@SuppressWarnings(&quot;unchecked&quot;) T... values) {
			return null;
		}
	}

	public static &lt;T&gt; FailsClass&lt;?, ? extends Iterable&lt;? extends T&gt;, T&gt; fails(Iterable&lt;? extends T&gt; actual) {
		return new FailsClass();
	}

	@Test
	public void test1() {
		Foo foo = new Foo();
		fails(foo.getIs()).containsOnly(new MyClass());
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2661530</commentid>
    <comment_count>3</comment_count>
    <who name="Jean-Pierre Bergamin">james</who>
    <bug_when>2016-01-18 07:46:55 -0500</bug_when>
    <thetext>This is a complete maven project to reproduce it:
https://bitbucket.org/ractive/eclipse-compile-issue

&quot;mvn test&quot; works, but the project gives a compiler error in eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2661886</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-01-19 04:02:49 -0500</bug_when>
    <thetext>Thanks, I can reproduce using comment 2.

Seeing raw type warnings in the mix, I wouldn&apos;t bet on which compiler is right and which is wrong. javac is known to have a fundamental bug in this area.

Interestingly, javac 9 answers:

error: method containsOnly in class FailsClass&lt;S,A,T&gt; cannot be applied to given types;
        fails(foo.getIs()).containsOnly(new MyClass());
                          ^
  required: CAP#1[]
  found: MyClass
  reason: varargs mismatch; MyClass cannot be converted to CAP#1
  where S,A,T are type-variables:
    S extends FailsClass&lt;S,A,T&gt; declared in class FailsClass
    A extends Iterable&lt;? extends T&gt; declared in class FailsClass
    T extends Object declared in class FailsClass
  where CAP#1 is a fresh type-variable:
    CAP#1 extends MyClass from capture of ? extends MyClass
Note: CompileIssue.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error


=&gt; Reporting an error is probably the correct answer.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>486222</bug_id>
          
          <creation_ts>2016-01-21 01:53:00 -0500</creation_ts>
          <short_desc>NPE when launching JUnit tests by right clicking project</short_desc>
          <delta_ts>2016-01-23 07:08:15 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows NT</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="jeps">petteri.stenius</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2662689</commentid>
    <comment_count>0</comment_count>
    <who name="jeps">petteri.stenius</who>
    <bug_when>2016-01-21 01:53:36 -0500</bug_when>
    <thetext>Launching JUnit tests for one of the projects in my workspace started to fail with NPE if I try to launch tests by right-clicking the project in Package Explorer. 

Running individual tests still works as expected. Also running JUnit tests for other projects works.

Eclipse Platform	4.5.1.M20150904-0015
Eclipse Java Development Tools	3.11.1.v20150904-0015

Stack trace

java.lang.NullPointerException
	at java.lang.String.&lt;init&gt;(String.java:166)
	at org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver.findSuperInterfaces(HierarchyResolver.java:304)
	at org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver.reportHierarchy(HierarchyResolver.java:566)
	at org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver.resolve(HierarchyResolver.java:851)
	at org.eclipse.jdt.internal.core.hierarchy.RegionBasedHierarchyBuilder.createTypeHierarchyBasedOnRegion(RegionBasedHierarchyBuilder.java:91)
	at org.eclipse.jdt.internal.core.hierarchy.RegionBasedHierarchyBuilder.build(RegionBasedHierarchyBuilder.java:60)
	at org.eclipse.jdt.internal.core.hierarchy.RegionBasedTypeHierarchy.compute(RegionBasedTypeHierarchy.java:98)
	at org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.refresh(TypeHierarchy.java:1268)
	at org.eclipse.jdt.internal.core.CreateTypeHierarchyOperation.executeOperation(CreateTypeHierarchyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.core.JavaCore.newTypeHierarchy(JavaCore.java:4560)
	at org.eclipse.jdt.internal.junit.launcher.JUnit4TestFinder.findTestsInContainer(JUnit4TestFinder.java:128)
	at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.evaluateTests(JUnitLaunchConfigurationDelegate.java:260)
	at org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationDelegate.launch(JUnitLaunchConfigurationDelegate.java:125)
	at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:885)
	at org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:739)
	at org.eclipse.debug.internal.ui.DebugUIPlugin.buildAndLaunch(DebugUIPlugin.java:1039)
	at org.eclipse.debug.internal.ui.DebugUIPlugin$8.run(DebugUIPlugin.java:1256)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2662727</commentid>
    <comment_count>1</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2016-01-21 04:04:54 -0500</bug_when>
    <thetext>Please attach the sample project which causes NPE.

Transferring to JDT Core for further comments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2662744</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-01-21 04:38:34 -0500</bug_when>
    <thetext>Looking at the code, we somehow end up with a super interface name of null. Possibly something is going wrong with the calculation of start/end. It would be nice to have a testcase, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2662886</commentid>
    <comment_count>3</comment_count>
    <who name="jeps">petteri.stenius</who>
    <bug_when>2016-01-21 07:55:40 -0500</bug_when>
    <thetext>I&apos;m sorry I cannot easily send the project causing the NPE. I have not been able to isolate the issue into a sample project.
Please let me know if there&apos;s anything else I could do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2663718</commentid>
    <comment_count>4</comment_count>
      <attachid>259347</attachid>
    <who name="jeps">petteri.stenius</who>
    <bug_when>2016-01-23 03:05:55 -0500</bug_when>
    <thetext>Created attachment 259347
Eclipse486222.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2663719</commentid>
    <comment_count>5</comment_count>
    <who name="jeps">petteri.stenius</who>
    <bug_when>2016-01-23 03:16:07 -0500</bug_when>
    <thetext>By going backwards in my SCM i was able to identify the code change that causes the failure.
The code is in the attachment Eclipse486222.java. If this file exists in a project&apos;s src/main/java tree then running JUnit tests for the project fails with NPE.
The code has a static method that defines a local class, where the local class name ends with a &apos;$&apos; character. If I rename the local class to something more appropriate without special characters then everything works ok.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2663737</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-01-23 07:08:15 -0500</bug_when>
    <thetext>(In reply to jeps from comment #5)
&gt; By going backwards in my SCM i was able to identify the code change that
&gt; causes the failure.
&gt; The code is in the attachment Eclipse486222.java. If this file exists in a
&gt; project&apos;s src/main/java tree then running JUnit tests for the project fails
&gt; with NPE.
&gt; The code has a static method that defines a local class, where the local
&gt; class name ends with a &apos;$&apos; character. If I rename the local class to
&gt; something more appropriate without special characters then everything works
&gt; ok.

Thanks for the analysis, but: Outch, that looks like asking for trouble.

The binary name of that local class is eclipse486222/Eclipse486222$1Predicate$

I guess when we see the first &apos;$&apos; we start trying to interpret &apos;$&apos; as the separator for nested classes, not part of a class name. Then when we encounter the second &apos;$&apos; we assume a second-level nested class, but we end up with no name for that second nested class -&gt; NPE

I&apos;m not even sure if avoiding the NPE on our side is the best course of action, because quite likely that would just mask the underlying problem, without really supporting that strange class in functionality like search &amp; hierarchy lookup. To fully support all combinations of class nesting and source-level names including &apos;$&apos; would require to testing all possible interpretations with lots of accesses to the file system, like, if we have a type a$b$c, we need to check existence of
- c as nested in (b nested in a)
- class with source name b$c nested in a
- c nested in class with source name a$b
- class with source name a$b$c
More dollars cause combinatorial explosion.

I believe (without having checked the sources) we typically assume &apos;$&apos; is *either* a part of the name *or* the nested class separator, but don&apos;t account for it playing both roles within the same binary name!

And: there are lots of locations in the code that deal with the problem of interpreting &apos;$&apos;.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>259347</attachid>
            <date>2016-01-23 03:05:00 -0500</date>
            <delta_ts>2016-01-23 03:05:55 -0500</delta_ts>
            <desc>Eclipse486222.java</desc>
            <filename>file_486222.txt</filename>
            <type>text/plain</type>
            <size>968</size>
            <attacher name="jeps">petteri.stenius</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>488532</bug_id>
          
          <creation_ts>2016-02-26 03:11:00 -0500</creation_ts>
          <short_desc>Compilation unit exists when its parent doesn&apos;t</short_desc>
          <delta_ts>2016-02-26 03:11:50 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Vladimir Piskarev">pisv</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2676016</commentid>
    <comment_count>0</comment_count>
      <attachid>259950</attachid>
    <who name="Vladimir Piskarev">pisv</who>
    <bug_when>2016-02-26 03:11:50 -0500</bug_when>
    <thetext>Created attachment 259950
Test projects

It can be demonstrated that a compilation unit (not a working copy) can answer true from #exists() when its parent package fragment doesn&apos;t exist in the Java model. Probably not a big deal but might be worth reporting.

Steps to reproduce:

1. Import the two projects from the attached test.zip (don&apos;t import the nested &apos;TestProject&apos;)

2. Run the &apos;test&apos; project as JUnit Plug-in Test

3. Observe the failing test

Perhaps it would be a bit more consistent if Openable#exists() explicitly checked for parent existence? Something like this:

public boolean exists() {
    if (JavaModelManager.getJavaModelManager().getInfo(this) != null)
        return true;
    IJavaElement parent = getParent();
    if (parent != null &amp;&amp; !parent.exists())
        return false;
    ...
}</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>259950</attachid>
            <date>2016-02-26 03:11:00 -0500</date>
            <delta_ts>2016-02-26 03:11:50 -0500</delta_ts>
            <desc>Test projects</desc>
            <filename>test.zip</filename>
            <type>application/octet-stream</type>
            <size>11492</size>
            <attacher name="Vladimir Piskarev">pisv</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>489979</bug_id>
          
          <creation_ts>2016-03-18 18:30:00 -0400</creation_ts>
          <short_desc>Boolean NOT Unary NOT Operator in some circumstances causes &quot;Compute launch button tooltip&quot; and other issues</short_desc>
          <delta_ts>2016-03-22 17:01:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Olivier Lerone">olivier.the.olive</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>olivier.the.olive</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2684626</commentid>
    <comment_count>0</comment_count>
      <attachid>260417</attachid>
    <who name="Olivier Lerone">olivier.the.olive</who>
    <bug_when>2016-03-18 18:30:17 -0400</bug_when>
    <thetext>Created attachment 260417
Example Project for Reproduction

### Overview:

The boolean, unary NOT operator in some (extreme?) circumstances causes some exception in org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.optimizedBooleanConstant which causes issues further up in Eclipse.

I hope I was correct in filing this in the JDT bug tracker and not that of Eclipse. Else, please forgive me.

### Steps to Reproduce in Eclipse:

1) Import the attached project, which has been reduced and anonymised to the minimum of what I was able to use to reproduce the issue.

2) Open the file bugrepro/BugReproTest.java in the Editor by double clicking it in the Package hierarchy tree sidepane.

3) Mouse over the green run button.

4) Receive an &quot;Compute launch button tooltip&quot; error with vague information.
A full error log is available from the &apos;Error Log&apos; view.

5) (Extra): Open the Run &gt; Run As... Menu, and notice that it is completely blank/empty (not even the &apos;none applicable&apos; is there).

### Actual Results

An error message was received with a stack trace in the Error Log view.

### Expected Results

No such error should occur, and an option for running as Java Application should be visible (if main method present) or a grayed out &apos;(none applicable)&apos; pseudo-option should be in the Run &gt; Run As... menu.

### Build Date &amp; Hardware

Using build:
Version: Mars.2 Release (4.5.2)
Build id: 20160218-0600

Running Ubuntu 15.04 (x64)

`uname -a`
Linux spruce-GA-78LMT-USB3 3.19.0-47-generic #53-Ubuntu SMP Mon Jan 18 14:02:48 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

Using Java JDK:
openjdk version &quot;1.8.0_45-internal&quot;
OpenJDK Runtime Environment (build 1.8.0_45-internal-b14)
OpenJDK 64-Bit Server VM (build 25.45-b02, mixed mode)

### Additional Builds and Platforms

None available for test.

### Additional Information

The bug is very finickity to reproduce, so I have attached a project which can be used to reproduce the error, while cutting out as much code as possible and anonymising it. The error log will follow in a new comment if possible, because the attachment form only seems to accept one attachment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2684627</commentid>
    <comment_count>1</comment_count>
      <attachid>260418</attachid>
    <who name="Olivier Lerone">olivier.the.olive</who>
    <bug_when>2016-03-18 18:31:31 -0400</bug_when>
    <thetext>Created attachment 260418
Error log exported from Eclipse with Stack Trace</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2684628</commentid>
    <comment_count>2</comment_count>
      <attachid>260419</attachid>
    <who name="Olivier Lerone">olivier.the.olive</who>
    <bug_when>2016-03-18 18:35:42 -0400</bug_when>
    <thetext>Created attachment 260419
(Corrected) Eclipse Error Log with Stack Trace

Apologies for the prior attachment which was seemingly the entire log file, not the log for this single case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2684773</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-03-19 21:21:14 -0400</bug_when>
    <thetext>I can reproduce, although debugging the code that creates a sub menu is prone to freezing the computer ...

Anyway, the statement in question is

    pp.rs = (! (boolean) pp.rs)

inside this method

  public void abc() {
    Pqrs pp = new Pqrs();
    pp.rs = (! (boolean) pp.rs);
  }


During normal compilation all is fine, the qualified name reference pp.rs has resolved type j.l.Object.

But on the given call path from HierarchyResolver, the STB for Pqrs has no fields, hence &apos;rs&apos; is a ProblemFieldBinding with no type. Apparently, one part of the machine thinks we don&apos;t need any details, but another part disagrees.

It should be possible to create a JUnit by just requesting the type hierarchy for type BugReproTest.

Anyone? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2685550</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2016-03-22 07:03:07 -0400</bug_when>
    <thetext>HierarchyResolver.accept(ISourceType[], PackageBinding, AccessRestriction) has this

CompilationUnitDeclaration unit =
		SourceTypeConverter.buildCompilationUnit(
			new ISourceType[] {sourceType}, // ignore secondary types, to improve laziness
			SourceTypeConverter.MEMBER_TYPE | (this.lookupEnvironment.globalOptions.sourceLevel &gt;= ClassFileConstants.JDK1_8 ? SourceTypeConverter.METHOD : 0), // need member types
			// no need for field initialization
			this.lookupEnvironment.problemReporter,
			result);
			
where it is explicitly excluding fields from the built type declaration, so the fields are not included in the parsed type declaration thereby resulting in this problem.  Including SourceTypeConverter.FIELD in the flags solves the problem. Could it be for performance reasons that fields were left out??</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2685902</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-03-22 17:01:51 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #4)
&gt; where it is explicitly excluding fields from the built type declaration, so
&gt; the fields are not included in the parsed type declaration thereby resulting
&gt; in this problem.  Including SourceTypeConverter.FIELD in the flags solves
&gt; the problem. Could it be for performance reasons that fields were left out??

I believe so. It seems like in former times the different use cases calling into the compiler paid great attention to performing only the minimal necessary work, and with Java getting more and more complex, this erodes to doing almost all the work almost all the time (see, e.g., the &quot;&gt;= JDT1_8&quot; part in the quoted snippet).

Regarding the issue at hand: I wouldn&apos;t expect a huge performance penalty from including fields of secondary types, but OTOH I believe compiling statements (which triggers the NPE in the first place) is beyond the point for creating a type hierarchy. Perhaps this is done in order to find local types? Perhaps we could prune the parse tree in scenarios like type hierarchy to discard all statements other than local type declarations?</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>260417</attachid>
            <date>2016-03-18 18:30:00 -0400</date>
            <delta_ts>2016-03-18 18:30:17 -0400</delta_ts>
            <desc>Example Project for Reproduction</desc>
            <filename>eclipsebugrepro.zip</filename>
            <type>application/zip</type>
            <size>6710</size>
            <attacher name="Olivier Lerone">olivier.the.olive</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>260418</attachid>
            <date>2016-03-18 18:31:00 -0400</date>
            <delta_ts>2016-03-18 18:35:42 -0400</delta_ts>
            <desc>Error log exported from Eclipse with Stack Trace</desc>
            <filename>eclipse_unaryop.log</filename>
            <type>text/x-log</type>
            <size>751899</size>
            <attacher name="Olivier Lerone">olivier.the.olive</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>260419</attachid>
            <date>2016-03-18 18:35:00 -0400</date>
            <delta_ts>2016-03-18 18:35:42 -0400</delta_ts>
            <desc>(Corrected) Eclipse Error Log with Stack Trace</desc>
            <filename>eclipse_unaryop2.log</filename>
            <type>text/plain</type>
            <size>4856</size>
            <attacher name="Olivier Lerone">olivier.the.olive</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>413114</bug_id>
          
          <creation_ts>2013-07-16 15:54:00 -0400</creation_ts>
          <short_desc>testBug376673e failed with JDK8</short_desc>
          <delta_ts>2013-07-17 01:24:36 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Solaris</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ludmila Shikhvarg">ludmila.shikhvarg</reporter>
          <assigned_to name="Manoj Palat">manpalat</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2285218</commentid>
    <comment_count>0</comment_count>
    <who name="Ludmila Shikhvarg">ludmila.shikhvarg</who>
    <bug_when>2013-07-16 15:54:02 -0400</bug_when>
    <thetext>Version: 4.2.0  Build id: I20120608-1400

testBug376673e test is failed with JDK8 on solaris:
Unexpected search results. ----------- Expected ------------ lib376673.jar p.i.Test [No source] EXACT_MATCH ------------ but was ------------ --------- Difference is ---------- expected:&lt;[lib376673.jar p.i.Test [No source] EXACT_MATCH]&gt; but was:&lt;[]&gt;

junit.framework.ComparisonFailure: Unexpected search results.
----------- Expected ------------
lib376673.jar p.i.Test [No source] EXACT_MATCH
------------ but was ------------

--------- Difference is ----------
expected:&lt;[lib376673.jar p.i.Test [No source] EXACT_MATCH]&gt; but was:&lt;[]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:230)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:206)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:725)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:683)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:680)
at org.eclipse.jdt.core.tests.model.JavaSearchBugsTests2.testBug376673e(JavaSearchBugsTests2.java:619)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:100)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:84)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:72)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:81)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:501)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:259)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
at org.eclipse.equinox.launcher.Main.main(Main.java:1414)
at org.eclipse.core.launcher.Main.main(Main.java:34)

Steps to Reproduce:
Use eclipse-Automated-Tests-4.2 to run automated tests with jdk8.
1. Install jdk8 from http://jdk8.java.net/download.html 
2. Run jdtcoremodel tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2285325</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-17 01:24:36 -0400</bug_when>
    <thetext>I don&apos;t see this problem with R4_2. But then I tried it on a windows machine as I don&apos;t have access to a Solaris environment. Could you try running the tests on a 4.3 test bundle?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>425644</bug_id>
          
          <creation_ts>2014-01-14 05:56:00 -0500</creation_ts>
          <short_desc>[test][search]JavaSearchTests.testSearchScope05 failed</short_desc>
          <delta_ts>2015-10-21 00:31:24 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Manoj Palat">manpalat</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2349328</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-01-14 05:56:26 -0500</bug_when>
    <thetext>N20140113-2000.


http://download.eclipse.org/eclipse/downloads/drops4/N20140113-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_5.0.html

Unexpected search results. ----------- Expected ------------ /Users/hudsonBuild/workspace/ep4-unit-mac64/workarea/N20140113-2000/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/MyJar.jar p0.X ------------ but was ------------ --------- Difference is ---------- expected:&lt;[/Users/hudsonBuild/workspace/ep4-unit-mac64/workarea/N20140113-2000/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/MyJar.jar p0.X]&gt; but was:&lt;[]&gt;

junit.framework.ComparisonFailure: Unexpected search results.
----------- Expected ------------
/Users/hudsonBuild/workspace/ep4-unit-mac64/workarea/N20140113-2000/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/MyJar.jar p0.X
------------ but was ------------

--------- Difference is ----------
expected:&lt;[/Users/hudsonBuild/workspace/ep4-unit-mac64/workarea/N20140113-2000/eclipse-testing/test-eclipse/eclipse/jdt_model_folder/MyJar.jar p0.X]&gt; but was:&lt;[]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:238)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:214)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:725)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:683)
at org.eclipse.jdt.core.tests.model.JavaSearchTests.testSearchScope05(JavaSearchTests.java:2421)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357720</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2014-02-02 23:57:54 -0500</bug_when>
    <thetext>Failed again at http://download.eclipse.org/eclipse/downloads/drops4/N20140131-2000/testresults/html/org.eclipse.jdt.core.tests.model_macosx.cocoa.x86_5.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2629681</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-10-21 00:31:24 -0400</bug_when>
    <thetext>And again, this time on Windows:

http://download.eclipse.org/eclipse/downloads/drops4/I20151020-0800/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_8.0.html</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>475284</bug_id>
          
          <creation_ts>2015-08-18 14:23:00 -0400</creation_ts>
          <short_desc>Data race on org.eclipse.jdt.internal.core.search.processing.JobManager.executing</short_desc>
          <delta_ts>2015-08-18 20:16:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Yilong Li">yilong.li</reporter>
          <assigned_to name="Manoj Palat">manpalat</assigned_to>
          <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2603668</commentid>
    <comment_count>0</comment_count>
    <who name="Yilong Li">yilong.li</who>
    <bug_when>2015-08-18 14:23:03 -0400</bug_when>
    <thetext>Here is the race report given by a dynamic race detector:
Data race on field org.eclipse.jdt.internal.core.search.processing.JobManager.executing: {{{
    Concurrent read in thread T1 (locks held: {Monitor@64250d19})
 ----&gt;  at org.eclipse.jdt.internal.core.search.processing.JobManager.discardJobs(JobManager.java:87)
        at org.eclipse.jdt.internal.core.ClasspathChange.requestIndexing(ClasspathChange.java:519)
        at org.eclipse.jdt.internal.core.DeltaProcessor.resourceChanged(DeltaProcessor.java:2039)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.resourceChanged(DeltaProcessingState.java:477)
        at org.eclipse.core.internal.events.NotificationManager$1.run(NotificationManager.java:299)
        at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
        at org.eclipse.core.internal.events.NotificationManager.notify(NotificationManager.java:289)
        at org.eclipse.core.internal.events.NotificationManager.broadcastChanges(NotificationManager.java:152)
        at org.eclipse.core.internal.resources.Workspace.broadcastPostChange(Workspace.java:374)
        at org.eclipse.core.internal.resources.Workspace.endOperation(Workspace.java:1471)
        at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2251)
        at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:794)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
        at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
        at org.eclipse.jdt.testplugin.JavaProjectHelper.createJavaProject(JavaProjectHelper.java:166)
        at org.eclipse.jdt.ui.tests.core.Java17ProjectTestSetup.createAndInitializeProject(Java17ProjectTestSetup.java:52)
        at org.eclipse.jdt.ui.tests.core.ProjectTestSetup.setUp(ProjectTestSetup.java:69)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:22)
        at junit.framework.TestResult.runProtected(TestResult.java:142)
        at junit.extensions.TestSetup.run(TestSetup.java:27)
        at junit.framework.TestSuite.runTest(TestSuite.java:252)
        at junit.framework.TestSuite.run(TestSuite.java:247)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
        at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
        at org.eclipse.test.UITestApplication$2.run(UITestApplication.java:197)
        at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
        at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
        - locked Monitor@64250d19 at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:131) 
        at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3794)
        at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3433)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
        at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
        at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:157)
        at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
        at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
        at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
        at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
        at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
        at org.eclipse.test.UITestApplication.runApplication(UITestApplication.java:140)
        at org.eclipse.test.UITestApplication.run(UITestApplication.java:62)
        at org.eclipse.test.UITestApplication.start(UITestApplication.java:212)
        at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
        at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
        at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
        at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
        at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
        at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
        at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
        at org.eclipse.core.launcher.Main.main(Main.java:34)
    T1 is the main thread

    Concurrent write in thread T28 (locks held: {})
 ----&gt;  at org.eclipse.jdt.internal.core.search.processing.JobManager.run(JobManager.java:408)
    T28 is created by T1
        at org.eclipse.jdt.internal.core.search.processing.JobManager.reset(JobManager.java:331)
}}}</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>490650</bug_id>
          
          <creation_ts>2016-03-29 23:12:00 -0400</creation_ts>
          <short_desc>[test] Failure in JavaSearchBugsTests2.testBug376673e</short_desc>
          <delta_ts>2016-03-29 23:12:43 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Manoj Palat">manpalat</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2688199</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2016-03-29 23:12:27 -0400</bug_when>
    <thetext>This is failing in the new GTK3 build machine with the following trace:

Unexpected search results. ----------- Expected ------------ lib376673.jar p.i.Test [No source] EXACT_MATCH ------------ but was ------------ --------- Difference is ---------- expected:&lt;[lib376673.jar p.i.Test [No source] EXACT_MATCH]&gt; but was:&lt;[]&gt;

junit.framework.ComparisonFailure: Unexpected search results.
----------- Expected ------------
lib376673.jar p.i.Test [No source] EXACT_MATCH
------------ but was ------------

--------- Difference is ----------
expected:&lt;[lib376673.jar p.i.Test [No source] EXACT_MATCH]&gt; but was:&lt;[]&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:930)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:888)
at org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.assertSearchResults(AbstractJavaSearchTests.java:885)
at org.eclipse.jdt.core.tests.model.JavaSearchBugsTests2.testBug376673e(JavaSearchBugsTests2.java:796)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>471825</bug_id>
          
          <creation_ts>2015-07-03 12:41:00 -0400</creation_ts>
          <short_desc>[formatter] IndexOutOfBoundsException in TokenManager on applying formatter to code having errors</short_desc>
          <delta_ts>2015-09-10 05:43:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Oliver Gierke">ogierke</reporter>
          <assigned_to name="Mateusz Matela">mateusz.matela</assigned_to>
          <cc>brango</cc>
    
    <cc>cindrhc</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>dimitri.mantheakis</cc>
    
    <cc>ds</cc>
    
    <cc>eclipse</cc>
    
    <cc>ericlentz</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>mateusz.matela</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2585636</commentid>
    <comment_count>0</comment_count>
      <attachid>254939</attachid>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-03 12:41:33 -0400</bug_when>
    <thetext>Created attachment 254939
Screenshot

Triggering the quick fix &quot;Add throws declaration&quot; fails due to IndexOutOfBoundsExcetion issued by the formatter.



java.lang.IndexOutOfBoundsException: Index: 8, Size: 8
	at java.util.ArrayList.rangeCheck(ArrayList.java:658)
	at java.util.ArrayList.get(ArrayList.java:431)
	at org.eclipse.jdt.internal.formatter.TokenManager.get(TokenManager.java:68)
	at org.eclipse.jdt.internal.formatter.TokenManager.findIndex(TokenManager.java:161)
	at org.eclipse.jdt.internal.formatter.TokenManager.firstIndexIn(TokenManager.java:188)
	at org.eclipse.jdt.internal.formatter.TokenManager.firstTokenIn(TokenManager.java:194)
	at org.eclipse.jdt.internal.formatter.SpacePreparator.visit(SpacePreparator.java:196)
	at org.eclipse.jdt.core.dom.MethodDeclaration.accept0(MethodDeclaration.java:611)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.TypeDeclaration.accept0(TypeDeclaration.java:470)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.prepareSpaces(DefaultCodeFormatter.java:350)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.prepareFormattedCode(DefaultCodeFormatter.java:193)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:155)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:139)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.formatString(ASTRewriteFormatter.java:246)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.formatNode(ASTRewriteFormatter.java:376)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.getFormattedResult(ASTRewriteFormatter.java:187)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.doTextInsert(ASTRewriteAnalyzer.java:1357)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer$ListRewriter.rewriteList(ASTRewriteAnalyzer.java:647)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer$ListRewriter.rewriteList(ASTRewriteAnalyzer.java:553)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.rewriteNodeList(ASTRewriteAnalyzer.java:1243)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.visit(ASTRewriteAnalyzer.java:2048)
	at org.eclipse.jdt.core.dom.MethodDeclaration.accept0(MethodDeclaration.java:611)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.rewrite.ASTRewrite.internalRewriteAST(ASTRewrite.java:302)
	at org.eclipse.jdt.core.dom.rewrite.ASTRewrite.rewriteAST(ASTRewrite.java:291)
	at org.eclipse.jdt.ui.text.java.correction.ASTRewriteCorrectionProposal.addEdits(ASTRewriteCorrectionProposal.java:116)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.createTextChange(CUCorrectionProposal.java:234)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.createChange(CUCorrectionProposal.java:244)
	at org.eclipse.jdt.ui.text.java.correction.ChangeCorrectionProposal.getChange(ChangeCorrectionProposal.java:377)
	at org.eclipse.jdt.ui.text.java.correction.ChangeCorrectionProposal.performChange(ChangeCorrectionProposal.java:137)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.LinkedCorrectionProposal.performChange(LinkedCorrectionProposal.java:150)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.apply(CUCorrectionProposal.java:184)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:968)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertSelectedProposalWithMask(CompletionProposalPopup.java:914)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.verifyKey(CompletionProposalPopup.java:1358)
	at org.eclipse.jface.text.contentassist.ContentAssistant$InternalListener.verifyKey(ContentAssistant.java:814)
	at org.eclipse.jface.text.TextViewer$VerifyKeyListenersManager.verifyKey(TextViewer.java:493)
	at org.eclipse.swt.custom.StyledTextListener.handleEvent(StyledTextListener.java:66)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4230)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1491)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1299)
	at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5990)
	at org.eclipse.swt.custom.StyledText$7.handleEvent(StyledText.java:5682)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4230)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1491)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1528)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5784)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5694)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:227)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2130)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2337)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5756)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5193)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5342)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3695)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:502)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585902</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-07-05 21:08:17 -0400</bug_when>
    <thetext>Oliver: Can you please provide a code snippet which is reproducible?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585926</commentid>
    <comment_count>2</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-06 02:14:34 -0400</bug_when>
    <thetext>package example;

import org.junit.Test;

public class TestType {

	@Test
	public void testname() {
		Thread.sleep(1000);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586353</commentid>
    <comment_count>3</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-06 08:33:12 -0400</bug_when>
    <thetext>Triggering a refactoring (I tried &quot;Extract interface&quot;) consistently fails with an exception pointing to the same component, too.

java.lang.reflect.InvocationTargetException
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:420)
	at org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.run(RefactoringWizardDialog2.java:331)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizard.internalPerformFinish(RefactoringWizard.java:637)
	at org.eclipse.ltk.ui.refactoring.UserInputWizardPage.performFinish(UserInputWizardPage.java:153)
	at org.eclipse.jdt.internal.ui.refactoring.ExtractInterfaceWizard$ExtractInterfaceInputPage.performFinish(ExtractInterfaceWizard.java:359)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizard.performFinish(RefactoringWizard.java:710)
	at org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.okPressed(RefactoringWizardDialog2.java:455)
	at org.eclipse.jface.dialogs.Dialog.buttonPressed(Dialog.java:466)
	at org.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:619)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:248)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4230)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1491)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1299)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4072)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3698)
	at org.eclipse.jface.window.Window.runEventLoop(Window.java:827)
	at org.eclipse.jface.window.Window.open(Window.java:803)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation$1.run(RefactoringWizardOpenOperation.java:187)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation.run(RefactoringWizardOpenOperation.java:202)
	at org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation.run(RefactoringWizardOpenOperation.java:122)
	at org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringStarter.activate(RefactoringStarter.java:38)
	at org.eclipse.jdt.internal.corext.refactoring.RefactoringExecutionStarter.startExtractInterfaceRefactoring(RefactoringExecutionStarter.java:290)
	at org.eclipse.jdt.ui.actions.ExtractInterfaceAction.run(ExtractInterfaceAction.java:147)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun(SelectionDispatchAction.java:279)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run(SelectionDispatchAction.java:251)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:595)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:511)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:420)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4230)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1491)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1514)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1299)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4072)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3698)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:502)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
Caused by: java.lang.IndexOutOfBoundsException: Index: 5, Size: 5
	at java.util.ArrayList.rangeCheck(ArrayList.java:658)
	at java.util.ArrayList.get(ArrayList.java:431)
	at org.eclipse.jdt.internal.formatter.TokenManager.get(TokenManager.java:68)
	at org.eclipse.jdt.internal.formatter.TokenManager.findIndex(TokenManager.java:161)
	at org.eclipse.jdt.internal.formatter.TokenManager.firstIndexIn(TokenManager.java:188)
	at org.eclipse.jdt.internal.formatter.TokenManager.firstTokenIn(TokenManager.java:194)
	at org.eclipse.jdt.internal.formatter.SpacePreparator.visit(SpacePreparator.java:196)
	at org.eclipse.jdt.core.dom.MethodDeclaration.accept0(MethodDeclaration.java:611)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.ASTNode.acceptChildren(ASTNode.java:2782)
	at org.eclipse.jdt.core.dom.TypeDeclaration.accept0(TypeDeclaration.java:470)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.prepareSpaces(DefaultCodeFormatter.java:350)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.prepareFormattedCode(DefaultCodeFormatter.java:193)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:155)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:139)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.formatString(ASTRewriteFormatter.java:246)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.formatNode(ASTRewriteFormatter.java:376)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter.getFormattedResult(ASTRewriteFormatter.java:187)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.doTextInsert(ASTRewriteAnalyzer.java:1357)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer$ListRewriter.rewriteList(ASTRewriteAnalyzer.java:647)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer$ListRewriter.rewriteList(ASTRewriteAnalyzer.java:802)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.rewriteParagraphList(ASTRewriteAnalyzer.java:1175)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.visit(ASTRewriteAnalyzer.java:1811)
	at org.eclipse.jdt.core.dom.TypeDeclaration.accept0(TypeDeclaration.java:453)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.doVisit(ASTRewriteAnalyzer.java:408)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.voidVisitList(ASTRewriteAnalyzer.java:446)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.voidVisit(ASTRewriteAnalyzer.java:440)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.doVisitUnchangedChildren(ASTRewriteAnalyzer.java:453)
	at org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.visit(ASTRewriteAnalyzer.java:1673)
	at org.eclipse.jdt.core.dom.CompilationUnit.accept0(CompilationUnit.java:207)
	at org.eclipse.jdt.core.dom.ASTNode.accept(ASTNode.java:2711)
	at org.eclipse.jdt.core.dom.rewrite.ASTRewrite.internalRewriteAST(ASTRewrite.java:302)
	at org.eclipse.jdt.core.dom.rewrite.ASTRewrite.rewriteAST(ASTRewrite.java:233)
	at org.eclipse.jdt.internal.corext.refactoring.structure.constraints.SuperTypeRefactoringProcessor.createTypeDeclaration(SuperTypeRefactoringProcessor.java:294)
	at org.eclipse.jdt.internal.corext.refactoring.structure.constraints.SuperTypeRefactoringProcessor.createTypeSource(SuperTypeRefactoringProcessor.java:432)
	at org.eclipse.jdt.internal.corext.refactoring.structure.ExtractInterfaceProcessor.createChangeManager(ExtractInterfaceProcessor.java:415)
	at org.eclipse.jdt.internal.corext.refactoring.structure.ExtractInterfaceProcessor.checkFinalConditions(ExtractInterfaceProcessor.java:245)
	at org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions(ProcessorBasedRefactoring.java:224)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
	at org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:121)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:209)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2241)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:119)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586503</commentid>
    <comment_count>4</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-07-06 09:48:53 -0400</bug_when>
    <thetext>(In reply to Oliver Gierke from comment #2)
&gt; package example;
&gt; 
&gt; import org.junit.Test;
&gt; 
&gt; public class TestType {
&gt; 
&gt; 	@Test
&gt; 	public void testname() {
&gt; 		Thread.sleep(1000);
&gt; 	}
&gt; }

Thanks for the snippet Oliver - however I don&apos;t get an error when I go for the quick fix and the code gets transformed to
package example;

import org.junit.Test;

public class TestType {

	@Test
	public void testname() throws InterruptedException {
		Thread.sleep(1000);
	}
}


I am using Eclipse Mars Stable release. Using the quickfix under the Thread.sleep() .Do you see this error in the Mars release?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586608</commentid>
    <comment_count>5</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-06 12:33:18 -0400</bug_when>
    <thetext>Yes. I am running STS 3.7.0 with the following specs

Spring Tool Suite 

Version: 3.7.0.CI-B260
Build Id: 201506250849
Platform: Eclipse Mars (4.5.0)

org.eclipse.jdt (3.11.0.v20150603-2000)

I guess it might be related to the formatter configured as we&apos;re using customized formatter settings. I&apos;ve tried turning off the save action to auto format but that didn&apos;t change anything.

Is there a way for me to debug into TokenManager at runtime?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586656</commentid>
    <comment_count>6</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2015-07-06 13:43:32 -0400</bug_when>
    <thetext>*** Bug 471758 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586769</commentid>
    <comment_count>7</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-07-06 21:00:24 -0400</bug_when>
    <thetext>(In reply to Oliver Gierke from comment #5)
&gt; Yes. I am running STS 3.7.0 with the following specs
&gt; 

&gt; org.eclipse.jdt (3.11.0.v20150603-2000)
&gt; 
&gt; I guess it might be related to the formatter configured as we&apos;re using
&gt; customized formatter settings. I&apos;ve tried turning off the save action to
&gt; auto format but that didn&apos;t change anything.
&gt; 

Can you please attach the customized formatter settings in the bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586818</commentid>
    <comment_count>8</comment_count>
      <attachid>255001</attachid>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-07 02:27:16 -0400</bug_when>
    <thetext>Created attachment 255001
Formatter

Attached the formatter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586882</commentid>
    <comment_count>9</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-07-07 04:12:21 -0400</bug_when>
    <thetext>*** Bug 472018 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2586884</commentid>
    <comment_count>10</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-07-07 04:13:20 -0400</bug_when>
    <thetext>Mateusz: Please take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2587606</commentid>
    <comment_count>11</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2015-07-08 04:49:27 -0400</bug_when>
    <thetext>I also encountered this bug on Eclipse Mars release build without any additional plug-in and with default formatter profile.

Try formatting the following broken code by pressing Ctrl+Shift+F to get the exception:

package p2;
import p1.*;
public class B extends A
   protected int f = 11;
  public long test B.this.f
  }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2592215</commentid>
    <comment_count>12</comment_count>
    <who name="Dietrich Schulten">ds</who>
    <bug_when>2015-07-20 03:08:44 -0400</bug_when>
    <thetext>At least in my setup the culprit was lombok [1]. Using the latest version 1.16.4 with Mars solved the problem of strange IndexOutOfBoundsExceptions in several places.

[1] https://projectlombok.org/downloads/lombok.jar</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2592268</commentid>
    <comment_count>13</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-07-20 05:07:34 -0400</bug_when>
    <thetext>I am using Lombok 1.16.4, too. But the error also occurs in code not using any Lombok.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2598777</commentid>
    <comment_count>14</comment_count>
    <who name="David Mansfield">eclipse</who>
    <bug_when>2015-08-05 09:28:21 -0400</bug_when>
    <thetext>I had the same problem and uninstalling lombok 1.16.4 (the version which claims support for Mars release) fixed it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2598823</commentid>
    <comment_count>15</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-08-05 10:41:53 -0400</bug_when>
    <thetext>Here&apos;s the corresponding ticket in the Lombok bug tracker: https://github.com/rzwitserloot/lombok/issues/872</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2600734</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-08-11 08:14:21 -0400</bug_when>
    <thetext>(In reply to Oliver Gierke from comment #13)
&gt; I am using Lombok 1.16.4, too. But the error also occurs in code not using
&gt; any Lombok.

I&apos;m pretty sure that just having Lombok installed suffices to generate this bug, since Lombok patches JDT, so once it is installed, you&apos;re not running the original JDT. Can you please confirm whether the bug can be reproduced in an Eclipse installation *without* lombok? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2600746</commentid>
    <comment_count>17</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2015-08-11 08:30:21 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)
&gt; Can you please confirm whether the bug can be reproduced
&gt; in an Eclipse installation *without* lombok? TIA.

See comment 11. I get a similar stacktrace with no additional plug-in installed on Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2600779</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-08-11 09:43:31 -0400</bug_when>
    <thetext>(In reply to Noopur Gupta from comment #17)
&gt; (In reply to Stephan Herrmann from comment #16)
&gt; &gt; Can you please confirm whether the bug can be reproduced
&gt; &gt; in an Eclipse installation *without* lombok? TIA.
&gt; 
&gt; See comment 11. I get a similar stacktrace with no additional plug-in
&gt; installed on Eclipse.

Sorry, I missed that comment.

Yes, with that example the bug can be reproduced still in HEAD.

We are looking for the opening &apos;{&apos; of the type declaration B, but don&apos;t find it and here&apos;s the overrun (in findIndex):

	while (tokenType &gt;= 0 &amp;&amp; get(index).tokenType != tokenType) {
		index += forward ? 1 : -1;
	}

@Mateusz? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2603718</commentid>
    <comment_count>19</comment_count>
    <who name="Mateusz Matela">mateusz.matela</who>
    <bug_when>2015-08-18 16:14:13 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #18)
&gt; We are looking for the opening &apos;{&apos; of the type declaration B, but don&apos;t find
&gt; it and here&apos;s the overrun (in findIndex):

Tough one.
The formatter would not try to do it if the ast parser marked the TypeDeclaration as MALFORMED. That would make sense, wouldn&apos;t it?
Can we change it this way?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2603958</commentid>
    <comment_count>20</comment_count>
    <who name="Oliver Gierke">ogierke</who>
    <bug_when>2015-08-19 06:21:22 -0400</bug_when>
    <thetext>Lombok 1.16.6 was just released and installing it solves the auto-completion issues.

https://github.com/rzwitserloot/lombok/issues/872#issuecomment-132505315</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2604362</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-08-19 18:16:51 -0400</bug_when>
    <thetext>(In reply to Mateusz Matela from comment #19)
&gt; (In reply to Stephan Herrmann from comment #18)
&gt; &gt; We are looking for the opening &apos;{&apos; of the type declaration B, but don&apos;t find
&gt; &gt; it and here&apos;s the overrun (in findIndex):
&gt; 
&gt; Tough one.
&gt; The formatter would not try to do it if the ast parser marked the
&gt; TypeDeclaration as MALFORMED. That would make sense, wouldn&apos;t it?
&gt; Can we change it this way?

Is there no MALFORMED, or just on too narrow a range?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2604379</commentid>
    <comment_count>22</comment_count>
    <who name="Mateusz Matela">mateusz.matela</who>
    <bug_when>2015-08-19 18:34:37 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #21)
&gt; Is there no MALFORMED, or just on too narrow a range?

MALFORMED is only set on the &quot;test&quot; field, because of the missing semicolon. But the whole type declaration should be marked too, because of the missing opening brace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2610152</commentid>
    <comment_count>23</comment_count>
    <who name="Harry Mantheakis">dimitri.mantheakis</who>
    <bug_when>2015-09-03 07:10:03 -0400</bug_when>
    <thetext>This is the log error-messages generated when I select &quot;Source -&gt; Generate Getters and Setters...&quot; on a simple Java class-file attribute:


!SESSION 2015-09-03 11:51:32.457 -----------------------------------------------
eclipse.buildId=4.5.0.I20150603-2000
java.version=1.8.0_45
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_GB
Framework arguments:  -product org.eclipse.epp.package.reporting.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.reporting.product

!ENTRY org.eclipse.jdt.ui 4 10001 2015-09-03 12:02:59.537
!MESSAGE Internal Error
!STACK 0
java.lang.reflect.InvocationTargetException
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:476)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:371)
	at org.eclipse.ui.internal.WorkbenchWindow$14.run(WorkbenchWindow.java:2156)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2152)
	at org.eclipse.ui.internal.progress.ProgressManager$RunnableWithStatus.run(ProgressManager.java:1394)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.progress.ProgressManager$5.run(ProgressManager.java:1228)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:186)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:145)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4761)
	at org.eclipse.ui.internal.progress.ProgressManager.runInUI(ProgressManager.java:1225)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:618)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.generate(AddGetterSetterAction.java:549)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:340)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:584)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun(SelectionDispatchAction.java:279)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run(SelectionDispatchAction.java:251)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:595)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:511)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:420)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4362)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3769)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.formatter.TextEditsBuilder.bufferWhitespaceBefore(TextEditsBuilder.java:156)
	at org.eclipse.jdt.internal.formatter.TextEditsBuilder.token(TextEditsBuilder.java:119)
	at org.eclipse.jdt.internal.formatter.TokenTraverser.traverse(TokenTraverser.java:103)
	at org.eclipse.jdt.internal.formatter.TokenManager.traverse(TokenManager.java:378)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:161)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:139)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:227)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:254)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:182)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:158)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.addNewAccessor(AddGetterSetterOperation.java:154)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.generateGetterMethod(AddGetterSetterOperation.java:181)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.run(AddGetterSetterOperation.java:324)
	at org.eclipse.jdt.internal.core.BatchOperation.executeOperation(BatchOperation.java:39)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2241)
	at org.eclipse.jdt.core.JavaCore.run(JavaCore.java:5409)
	at org.eclipse.jdt.internal.ui.actions.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:106)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:463)
	... 48 more
Root exception:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.formatter.TextEditsBuilder.bufferWhitespaceBefore(TextEditsBuilder.java:156)
	at org.eclipse.jdt.internal.formatter.TextEditsBuilder.token(TextEditsBuilder.java:119)
	at org.eclipse.jdt.internal.formatter.TokenTraverser.traverse(TokenTraverser.java:103)
	at org.eclipse.jdt.internal.formatter.TokenManager.traverse(TokenManager.java:378)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:161)
	at org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.format(DefaultCodeFormatter.java:139)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:227)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(CodeFormatterUtil.java:254)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:182)
	at org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format(CodeFormatterUtil.java:158)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.addNewAccessor(AddGetterSetterOperation.java:154)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.generateGetterMethod(AddGetterSetterOperation.java:181)
	at org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation.run(AddGetterSetterOperation.java:324)
	at org.eclipse.jdt.internal.core.BatchOperation.executeOperation(BatchOperation.java:39)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2241)
	at org.eclipse.jdt.core.JavaCore.run(JavaCore.java:5409)
	at org.eclipse.jdt.internal.ui.actions.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:106)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:463)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:371)
	at org.eclipse.ui.internal.WorkbenchWindow$14.run(WorkbenchWindow.java:2156)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2152)
	at org.eclipse.ui.internal.progress.ProgressManager$RunnableWithStatus.run(ProgressManager.java:1394)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.progress.ProgressManager$5.run(ProgressManager.java:1228)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:186)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:145)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4761)
	at org.eclipse.ui.internal.progress.ProgressManager.runInUI(ProgressManager.java:1225)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:618)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.generate(AddGetterSetterAction.java:549)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:340)
	at org.eclipse.jdt.ui.actions.AddGetterSetterAction.run(AddGetterSetterAction.java:584)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.dispatchRun(SelectionDispatchAction.java:279)
	at org.eclipse.jdt.ui.actions.SelectionDispatchAction.run(SelectionDispatchAction.java:251)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:595)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:511)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:420)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4362)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3769)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:654)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:598)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2612261</commentid>
    <comment_count>24</comment_count>
    <who name="Mateusz Matela">mateusz.matela</who>
    <bug_when>2015-09-08 19:16:29 -0400</bug_when>
    <thetext>(In reply to Harry Mantheakis from comment #23)
&gt; This is the log error-messages generated when I select &quot;Source -&gt; Generate
&gt; Getters and Setters...&quot; on a simple Java class-file attribute:
&gt; 
Thank you Harry for the report, I can reproduce it (actually, not by generating getters and setters, just using a formatter profile with &quot;Indent empty lines&quot; and some blank lines before package declaration).
But what made you attach it to this bug? It&apos;s an entirely separate problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2612442</commentid>
    <comment_count>25</comment_count>
    <who name="Harry Mantheakis">dimitri.mantheakis</who>
    <bug_when>2015-09-09 07:34:46 -0400</bug_when>
    <thetext>Hi Mateusz

I thought this bug related to the fact that Eclipse is not able to generate Java getter and setter methods (as it should).

At least this is the bug I ended up being referred to when I was searching for bug-reports relating to that issue.

If there is another bug-report that is more relevant, I apologise - and please advise me.

Kind regards, Harry</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2612740</commentid>
    <comment_count>26</comment_count>
    <who name="Mateusz Matela">mateusz.matela</who>
    <bug_when>2015-09-09 17:04:38 -0400</bug_when>
    <thetext>(In reply to Harry Mantheakis from comment #25)
&gt; If there is another bug-report that is more relevant, I apologise - and
&gt; please advise me.
No problem, I submitted a new bug 477005 for this.
Some workaround for you would probably be to set the number of blank lines to at most 1 - I&apos;m not sure where though - either before method declarations of before first declaration. Or, turn off &quot;indent empty lines&quot;. You can go back to your settings and reformat everything after the code generation completes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2612973</commentid>
    <comment_count>27</comment_count>
    <who name="Harry Mantheakis">dimitri.mantheakis</who>
    <bug_when>2015-09-10 05:43:29 -0400</bug_when>
    <thetext>Thank you Mateusz - your suggestion to turn off &quot;indent empty lines&quot; solved the problem.

For the record, running Eclipse on Windows 7, I selected to edit my Code Style formatting:

Window -&gt; Preferences -&gt; Java -&gt; Code Style -&gt; Formatter

I then selected to edit the current &quot;Active Profile&quot; in Formatter, and then under the &quot;Indentation&quot; tab I DISABLED (un-selected) the &quot;Empty Lines&quot; option.

With this setting the &quot;Source -&gt; Generate Getters and Setters...&quot; menu option works perfectly.

Mateusz, would you like me to post my original error log in bug 477005?

Thanks again!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>254939</attachid>
            <date>2015-07-03 12:41:00 -0400</date>
            <delta_ts>2015-07-03 12:41:33 -0400</delta_ts>
            <desc>Screenshot</desc>
            <filename>Bildschirmfoto 2015-07-03 um 18.25.59.PNG</filename>
            <type>image/png</type>
            <size>125979</size>
            <attacher name="Oliver Gierke">ogierke</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>255001</attachid>
            <date>2015-07-07 02:27:00 -0400</date>
            <delta_ts>2015-07-07 02:27:16 -0400</delta_ts>
            <desc>Formatter</desc>
            <filename>formatter.xml</filename>
            <type>text/xml</type>
            <size>31314</size>
            <attacher name="Oliver Gierke">ogierke</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>457065</bug_id>
          
          <creation_ts>2015-01-08 12:33:00 -0500</creation_ts>
          <short_desc>[clean up] NPE with generics and method references</short_desc>
          <delta_ts>2015-07-02 12:14:33 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows NT</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Lukas Eder">lukas.eder</reporter>
          <assigned_to name="Sasikanth Bharadwaj">sasikanth.bharadwaj</assigned_to>
          <cc>error-reports-inbox</cc>
    
    <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2503492</commentid>
    <comment_count>0</comment_count>
      <attachid>249797</attachid>
    <who name="Lukas Eder">lukas.eder</who>
    <bug_when>2015-01-08 12:33:36 -0500</bug_when>
    <thetext>Created attachment 249797
NullPointerException log file

I&apos;m using Eclipse Mars (4.5) M4.

The following program throws a NPE, possibly only after the second save:

--------------------------------------------
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class Test {
    public static void main(String[] args) {
        Random random = new Random();
        Stream.generate(random::nextInt)
              .collect(Collectors.toMap(Tuple2::v2, Tuple2:v2));
    }
}

interface Tuple2&lt;T1, T2&gt; {
    T1 v1();
    T2 v2();
}
--------------------------------------------

The NPE is this one (the complete log file is attached):

--------------------------------------------
!ENTRY org.eclipse.jdt.ui 4 2 2015-01-08 18:29:40.767
!MESSAGE Problems occurred when invoking code from plug-in: &quot;org.eclipse.jdt.ui&quot;.
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:133)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:791)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveExpressionExpecting(ReferenceExpression.java:831)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.reduceReferenceExpressionCompatibility(ConstraintExpressionFormula.java:241)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.reduce(ConstraintExpressionFormula.java:197)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.reduceOneConstraint(BoundSet.java:842)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:404)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod18(ParameterizedGenericMethodBinding.java:222)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:81)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:732)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:689)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1623)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1524)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2799)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:885)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:703)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:638)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:307)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:548)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
--------------------------------------------

The cleanup settings are these ones (complete settings also attached)

--------------------------------------------
cleanup.add_default_serial_version_id=false
cleanup.add_generated_serial_version_id=true
cleanup.add_missing_annotations=true
cleanup.add_missing_deprecated_annotations=true
cleanup.add_missing_methods=false
cleanup.add_missing_nls_tags=false
cleanup.add_missing_override_annotations=true
cleanup.add_missing_override_annotations_interface_methods=true
cleanup.add_serial_version_id=true
cleanup.always_use_blocks=true
cleanup.always_use_parentheses_in_expressions=false
cleanup.always_use_this_for_non_static_field_access=true
cleanup.always_use_this_for_non_static_method_access=false
cleanup.convert_to_enhanced_for_loop=false
cleanup.correct_indentation=true
cleanup.format_source_code=false
cleanup.format_source_code_changes_only=false
cleanup.make_local_variable_final=true
cleanup.make_parameters_final=false
cleanup.make_private_fields_final=true
cleanup.make_type_abstract_if_missing_method=false
cleanup.make_variable_declarations_final=false
cleanup.never_use_blocks=false
cleanup.never_use_parentheses_in_expressions=true
cleanup.organize_imports=true
cleanup.qualify_static_field_accesses_with_declaring_class=false
cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
cleanup.qualify_static_member_accesses_with_declaring_class=true
cleanup.qualify_static_method_accesses_with_declaring_class=false
cleanup.remove_private_constructors=true
cleanup.remove_trailing_whitespaces=true
cleanup.remove_trailing_whitespaces_all=true
cleanup.remove_trailing_whitespaces_ignore_empty=false
cleanup.remove_unnecessary_casts=true
cleanup.remove_unnecessary_nls_tags=true
cleanup.remove_unused_imports=true
cleanup.remove_unused_local_variables=false
cleanup.remove_unused_private_fields=true
cleanup.remove_unused_private_members=false
cleanup.remove_unused_private_methods=true
cleanup.remove_unused_private_types=true
cleanup.sort_members=false
cleanup.sort_members_all=false
cleanup.use_blocks=true
cleanup.use_blocks_only_for_return_and_throw=false
cleanup.use_parentheses_in_expressions=false
cleanup.use_this_for_non_static_field_access=false
cleanup.use_this_for_non_static_field_access_only_if_necessary=false
cleanup.use_this_for_non_static_method_access=false
cleanup.use_this_for_non_static_method_access_only_if_necessary=true
cleanup_profile=_jOOQ
cleanup_settings_version=2
sp_cleanup.add_default_serial_version_id=true
sp_cleanup.add_generated_serial_version_id=false
sp_cleanup.add_missing_annotations=true
sp_cleanup.add_missing_deprecated_annotations=true
sp_cleanup.add_missing_methods=false
sp_cleanup.add_missing_nls_tags=false
sp_cleanup.add_missing_override_annotations=true
sp_cleanup.add_missing_override_annotations_interface_methods=true
sp_cleanup.add_serial_version_id=false
sp_cleanup.always_use_blocks=true
sp_cleanup.always_use_parentheses_in_expressions=false
sp_cleanup.always_use_this_for_non_static_field_access=false
sp_cleanup.always_use_this_for_non_static_method_access=false
sp_cleanup.convert_to_enhanced_for_loop=false
sp_cleanup.correct_indentation=false
sp_cleanup.format_source_code=false
sp_cleanup.format_source_code_changes_only=false
sp_cleanup.make_local_variable_final=false
sp_cleanup.make_parameters_final=false
sp_cleanup.make_private_fields_final=true
sp_cleanup.make_type_abstract_if_missing_method=false
sp_cleanup.make_variable_declarations_final=false
sp_cleanup.never_use_blocks=false
sp_cleanup.never_use_parentheses_in_expressions=true
sp_cleanup.on_save_use_additional_actions=true
sp_cleanup.organize_imports=true
sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
sp_cleanup.remove_private_constructors=true
sp_cleanup.remove_trailing_whitespaces=true
sp_cleanup.remove_trailing_whitespaces_all=true
sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
sp_cleanup.remove_unnecessary_casts=true
sp_cleanup.remove_unnecessary_nls_tags=false
sp_cleanup.remove_unused_imports=true
sp_cleanup.remove_unused_local_variables=false
sp_cleanup.remove_unused_private_fields=true
sp_cleanup.remove_unused_private_members=false
sp_cleanup.remove_unused_private_methods=true
sp_cleanup.remove_unused_private_types=true
sp_cleanup.sort_members=false
sp_cleanup.sort_members_all=false
sp_cleanup.use_blocks=false
sp_cleanup.use_blocks_only_for_return_and_throw=false
sp_cleanup.use_parentheses_in_expressions=false
sp_cleanup.use_this_for_non_static_field_access=false
sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
sp_cleanup.use_this_for_non_static_method_access=false
sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
--------------------------------------------</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503642</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-09 00:54:03 -0500</bug_when>
    <thetext>The problem happens because the effort to create a reference expression with parser.parseExpression() call for the last method reference &quot;Tuple2:v2&quot;, which is not surprising. What is surprising to me, though, is that the parser created a reference expression (with no recovery in picture, I think).

Stephan, your thoughts?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503800</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-09 07:20:00 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #1)
&gt; The problem happens because the effort to create a reference expression with
&gt; parser.parseExpression() call for the last method reference &quot;Tuple2:v2&quot;,
&gt; which is not surprising. What is surprising to me, though, is that the
&gt; parser created a reference expression (with no recovery in picture, I think).

Do you say &quot;no recovery&quot; based on debugging or based on the stack trace?
Looking at the stack trace, it&apos;s too late to tell if recovery happened; see that we are in resolve phase, going back to parsing only to create a fresh copy of the reference expression (for a fresh resolution attempt).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504026</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-09 15:38:26 -0500</bug_when>
    <thetext>I assume s.t. like this is happening (did not succeed to repro in a JUnit, so this is theory speaking):

- Initial parsing involved recovery to create the ReferenceExpression despite broken syntax.
- Subsequent parsing for RE.copy() did not use recovery and hence returned null

If that&apos;s the case we could fix this ideally by
- recording when an RE is recovered
- when copy()ing a recovered RE, tell the fresh parser to perform the same kind of recovery (we probably need statement recovery, right?)
- hope that the limited parsing is able to perform the same recovery as full parsing (and hope the source positions are correct through recovery)

If that works, the same should probably be applied to lambdas as well.

Perhaps, inspecting the usage of ASTNode.IsRecovered could serve as a guide to part one of the solution (but note that Bit6 might be conflicting here with the use of DepthMASK).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2585176</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-07-02 12:14:33 -0400</bug_when>
    <thetext>*** Bug 471679 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249797</attachid>
            <date>2015-01-08 12:33:00 -0500</date>
            <delta_ts>2015-01-08 12:33:36 -0500</delta_ts>
            <desc>NullPointerException log file</desc>
            <filename>.log</filename>
            <type>application/octet-stream</type>
            <size>58836</size>
            <attacher name="Lukas Eder">lukas.eder</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>458952</bug_id>
          
          <creation_ts>2015-02-02 08:51:00 -0500</creation_ts>
          <short_desc>[performance tests] Huge increase in code completion test</short_desc>
          <delta_ts>2015-04-08 01:10:03 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>performance</keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Lars Vogel">Lars.Vogel</reporter>
          <assigned_to name="Sasikanth Bharadwaj">sasikanth.bharadwaj</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>david_williams</cc>
    
    <cc>jarthana</cc>
    
    <cc>Lars.Vogel</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2513184</commentid>
    <comment_count>0</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-02-02 08:51:23 -0500</bug_when>
    <thetext>See http://download.eclipse.org/eclipse/downloads/drops4/S-4.5M5-201501291830/performance/linux.gtk.x86_64/Scenario279.html

org.eclipse.jdt.text.tests.performance.CodeCompletionPerformanceTest#testApplicationWithParamterGuesses2()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2513193</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2015-02-02 09:06:25 -0500</bug_when>
    <thetext>There weren&apos;t any related changes in JDT UI, but quite a few in JDT Core during that week.

Please investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2513216</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-02-02 09:31:51 -0500</bug_when>
    <thetext>Sasi, please take a look at this. We are looking at commits that went in between I20141216-0800 and I20141223-0800.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2513995</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-02-04 03:02:26 -0500</bug_when>
    <thetext>I get similar times for both cases (before 16/12 and after 23/12) in my dev environment as well as on downloaded builds I20150127-0900 and I20141208-2000. Perhaps something in the environment? Is there a place where we can see the args, propertes etc for the test run?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514284</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-02-04 13:22:11 -0500</bug_when>
    <thetext>The only place I know of where more information could be available is the Hudson page for perf tests: https://hudson.eclipse.org/perftests/job/ep45ILR-perf-lin64/

E.g. here&apos;s some recent console output: https://hudson.eclipse.org/perftests/view/Eclipse%20and%20Equinox/job/ep45ILR-perf-lin64/ws/workarea/I20150203-0800/eclipse-testing/results/consolelogs/linux.gtk.x86_64_8.0_consolelog.txt

Looking at the performance graph, I&apos;m not sure the results before I20141216-0800 (&lt; 2s) are actually accurate. The baseline R-4.4-201406061215 took a lot longer (7.81s). Sasi, are your times closer to 2s or to 10s?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514414</commentid>
    <comment_count>5</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-02-05 00:41:19 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; (7.81s). Sasi, are your times closer to 2s or to 10s?
Here&apos;s a sample of what I have

On I20141208-2000

Scenario &apos;org.eclipse.jdt.text.tests.performance.CodeCompletionPerformanceTest#testApplicationWithParamterGuesses2()&apos; (average over 10 samples):

  Elapsed Process:         2.8s         (95% in [2.75s, 2.84s])        Measurable effect: 77ms (1.3 SDs)
  CPU Time:               3.83s         (95% in [3.03s, 4.62s])        Measurable effect: 1.4s (1.3 SDs) (required sample size for an effect of 5% of mean: 538)

On I20141230-0800

Scenario &apos;org.eclipse.jdt.text.tests.performance.CodeCompletionPerformanceTest#testApplicationWithParamterGuesses2()&apos; (average over 10 samples):

  Elapsed Process:         2.6s         (95% in [2.55s, 2.64s])        Measurable effect: 78ms (1.3 SDs)
  CPU Time:               3.78s         (95% in [2.9s, 4.66s])         Measurable effect: 1.56s (1.3 SDs) (required sample size for an effect of 5% of mean: 685)

Haven&apos;t checked with 442. Will do that and attach all the readings I have so far</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514446</commentid>
    <comment_count>6</comment_count>
      <attachid>250518</attachid>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-02-05 03:17:36 -0500</bug_when>
    <thetext>Created attachment 250518
reports from the test case on different builds</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514447</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-02-05 03:18:34 -0500</bug_when>
    <thetext>442 gives pretty much the same times. Attached are reports from different test runs on different builds</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514551</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-02-05 08:00:59 -0500</bug_when>
    <thetext>So, looks like there&apos;s something about the baseline or the readings from the build environment. Lars, just to be sure, can someone from your team run the tests once in your environment too?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514569</commentid>
    <comment_count>9</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-02-05 08:31:27 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #8)
&gt; So, looks like there&apos;s something about the baseline or the readings from the
&gt; build environment. Lars, just to be sure, can someone from your team run the
&gt; tests once in your environment too?

Where do I find the description how to run the JDT performance tests?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514575</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-02-05 08:36:19 -0500</bug_when>
    <thetext>(In reply to Lars Vogel from comment #9)
&gt; Where do I find the description how to run the JDT performance tests?

Sorry, actually I meant that for Markus :), sorry about it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514576</commentid>
    <comment_count>11</comment_count>
    <who name="Lars Vogel">Lars.Vogel</who>
    <bug_when>2015-02-05 08:37:41 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #10)
&gt; Sorry, actually I meant that for Markus :), sorry about it.

Thanks, I already got scared by this request, I haven&apos;t touched JDT core yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2516505</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-10 06:35:13 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #8)
&gt; So, looks like there&apos;s something about the baseline or the readings from the
&gt; build environment. Lars, just to be sure, can someone from your team run the
&gt; tests once in your environment too?

I&apos;m neither Lars nor Markus :) 
but: what environment are you looking for? Any need to run them on linux (I&apos;m on Kubuntu)? OTOH, I haven&apos;t yet looked at running JDT performance tests, so I, too, could use a quick pointer, if needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2516512</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-02-10 06:45:07 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #12)
&gt; but: what environment are you looking for? Any need to run them on linux
&gt; (I&apos;m on Kubuntu)? OTOH, I haven&apos;t yet looked at running JDT performance
&gt; tests, so I, too, could use a quick pointer, if needed.

Linux would be okay, I guess. The test in question is in jdt.text. But can be run just like any other junit test. Markus or Sasi can assist you if you need anything, as they are more familiar with the tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2531694</commentid>
    <comment_count>14</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-03-16 02:11:43 -0400</bug_when>
    <thetext>Moving to M7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543201</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-08 01:10:03 -0400</bug_when>
    <thetext>We are not convinced that this is a real problem with the JDT code. Moving out Mars.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>250518</attachid>
            <date>2015-02-05 03:17:00 -0500</date>
            <delta_ts>2015-02-05 03:17:36 -0500</delta_ts>
            <desc>reports from the test case on different builds</desc>
            <filename>bug458952_reports.zip</filename>
            <type>application/octet-stream</type>
            <size>13999</size>
            <attacher name="Sasikanth Bharadwaj">sasikanth.bharadwaj</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>482991</bug_id>
          
          <creation_ts>2015-11-25 05:29:00 -0500</creation_ts>
          <short_desc>Investigate large number of test failures in AllJavaModelTests</short_desc>
          <delta_ts>2015-12-02 09:27:31 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">sasikanth.bharadwaj</reporter>
          <assigned_to name="Sasikanth Bharadwaj">sasikanth.bharadwaj</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2644032</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-11-25 05:29:21 -0500</bug_when>
    <thetext>This bug is to investigate 6222 test failures in jdt.core.tests.model suite in a couple of builds with this error

buildId N20151123-2000, N20151122-2000

junit.framework.ComparisonFailure: Workspace options should be back to their default.
----------- Expected ------------
CompilerOptions:\n
- local variables debug attributes: ON\n
- line number debug attributes: ON\n
- source debug attributes: ON\n
- MethodParameters attributes: do not generate\n
- Generic signature for lambda expressions: do not generate\n
- preserve all local variables: ON\n
- method with constructor name: warning\n
- overridden package default method: warning\n
- deprecation: warning\n
- masked catch block: warning\n
- unused local variable: warning\n
- unused parameter: ignore\n
- unused exception parameter: ignore\n
- unused import: warning\n
- synthetic access emulation: ignore\n
- assignment with no effect: warning\n
- non externalized string: ignore\n
- static access receiver: warning\n
- indirect static access: ignore\n
- incompatible non inherited interface method: warning\n
- unused private member: warning\n
- local variable hiding another variable: ignore\n
- field hiding another variable: ignore\n
- type hiding another type: warning\n
- possible accidental boolean assignment: ignore\n
- superfluous semicolon: ignore\n
- uncommented empty block: ignore\n
- unnecessary type check: ignore\n
- javadoc comment support: ON\n
+ invalid javadoc: ignore\n
+ report invalid javadoc tags: disabled\n
* deprecated references: disabled\n
* not visible references: disabled\n
+ visibility level to report invalid javadoc tags: public\n
+ missing javadoc tags: ignore\n
+ visibility level to report missing javadoc tags: public\n
+ report missing javadoc tags for method type parameters: disabled\n
+ report missing javadoc tags in overriding methods: disabled\n
+ missing javadoc comments: ignore\n
+ report missing tag description option: return_tag\n
+ visibility level to report missing javadoc comments: public\n
+ report missing javadoc comments in overriding methods: disabled\n
- finally block not completing normally: warning\n
- report unused declared thrown exception: ignore\n
- report unused declared thrown exception when overriding: disabled\n
- report unused declared thrown exception include doc comment reference: enabled\n
- report unused declared thrown exception exempt exception and throwable: enabled\n
- unnecessary else: ignore\n
- JDK compliance level: 1.4\n
- JDK source level: 1.3\n
- JDK target level: 1.2\n
- verbose : OFF\n
- produce reference info : OFF\n
- parse literal expressions as constants : ON\n
- encoding : UTF-8\n
- task tags: TODO,FIXME,XXX\n
- task priorities : NORMAL,HIGH,NORMAL\n
- report deprecation inside deprecated code : disabled\n
- report deprecation when overriding deprecated method : disabled\n
- report unused parameter when implementing abstract method : disabled\n
- report unused parameter when overriding concrete method : disabled\n
- report unused parameter include doc comment reference : enabled\n
- report constructor/setter parameter hiding existing field : disabled\n
- inline JSR bytecode : disabled\n
- share common finally blocks : disabled\n
- report unavoidable generic type problems : enabled\n
- unsafe type operation: warning\n
- unsafe raw type: warning\n
- final bound for type parameter: warning\n
- missing serialVersionUID: warning\n
- varargs argument need cast: warning\n
- forbidden reference to type with access restriction: error\n
- discouraged reference to type with access restriction: warning\n
- null reference: warning\n
- potential null reference: ignore\n
- redundant null check: ignore\n
- autoboxing: ignore\n
- annotation super interface: warning\n
- missing @Override annotation: ignore\n
- missing @Override annotation for interface method implementation: enabled\n
- missing @Deprecated annotation: ignore\n
- incomplete enum switch: warning\n
- raise null related warnings for variables tainted in assert statements: disabled\n
- suppress warnings: enabled\n
- suppress optional errors: disabled\n
- unhandled warning token: warning\n
- unused warning token: warning\n
- unused label: warning\n
- treat optional error as fatal: disabled\n
- parameter assignment: ignore\n
- generate class files: enabled\n
- process annotations: disabled\n
- unused type arguments for method/constructor invocation: warning\n
- redundant superinterface: ignore\n
- comparing identical expr: warning\n
- missing synchronized on inherited method: ignore\n
- should implement hashCode() method: ignore\n
- dead code: warning\n
- dead code in trivial if statement: disabled\n
- tasks severity: warning\n
- unused object allocation: ignore\n
- method can be static: ignore\n
- method can be potentially static: ignore\n
- redundant specification of type arguments: ignore\n
- resource is not closed: warning\n
- resource may not be closed: ignore\n
- resource should be handled by try-with-resources: ignore\n
- Unused Type Parameter: ignore
------------ but was ------------
CompilerOptions:\n
- local variables debug attributes: ON\n
- line number debug attributes: ON\n
- source debug attributes: ON\n
- MethodParameters attributes: do not generate\n
- Generic signature for lambda expressions: do not generate\n
- preserve all local variables: ON\n
- method with constructor name: warning\n
- overridden package default method: warning\n
- deprecation: warning\n
- masked catch block: warning\n
- unused local variable: warning\n
- unused parameter: ignore\n
- unused exception parameter: ignore\n
- unused import: warning\n
- synthetic access emulation: ignore\n
- assignment with no effect: warning\n
- non externalized string: ignore\n
- static access receiver: warning\n
- indirect static access: ignore\n
- incompatible non inherited interface method: warning\n
- unused private member: warning\n
- local variable hiding another variable: ignore\n
- field hiding another variable: ignore\n
- type hiding another type: warning\n
- possible accidental boolean assignment: ignore\n
- superfluous semicolon: ignore\n
- uncommented empty block: ignore\n
- unnecessary type check: ignore\n
- javadoc comment support: ON\n
+ invalid javadoc: ignore\n
+ report invalid javadoc tags: disabled\n
* deprecated references: disabled\n
* not visible references: disabled\n
+ visibility level to report invalid javadoc tags: public\n
+ missing javadoc tags: ignore\n
+ visibility level to report missing javadoc tags: public\n
+ report missing javadoc tags for method type parameters: disabled\n
+ report missing javadoc tags in overriding methods: disabled\n
+ missing javadoc comments: ignore\n
+ report missing tag description option: return_tag\n
+ visibility level to report missing javadoc comments: public\n
+ report missing javadoc comments in overriding methods: disabled\n
- finally block not completing normally: warning\n
- report unused declared thrown exception: ignore\n
- report unused declared thrown exception when overriding: disabled\n
- report unused declared thrown exception include doc comment reference: enabled\n
- report unused declared thrown exception exempt exception and throwable: enabled\n
- unnecessary else: ignore\n
- JDK compliance level: 1.8\n
- JDK source level: 1.8\n
- JDK target level: 1.8\n
- verbose : OFF\n
- produce reference info : OFF\n
- parse literal expressions as constants : ON\n
- encoding : UTF-8\n
- task tags: TODO,FIXME,XXX\n
- task priorities : NORMAL,HIGH,NORMAL\n
- report deprecation inside deprecated code : disabled\n
- report deprecation when overriding deprecated method : disabled\n
- report unused parameter when implementing abstract method : disabled\n
- report unused parameter when overriding concrete method : disabled\n
- report unused parameter include doc comment reference : enabled\n
- report constructor/setter parameter hiding existing field : disabled\n
- inline JSR bytecode : enabled\n
- share common finally blocks : disabled\n
- report unavoidable generic type problems : enabled\n
- unsafe type operation: warning\n
- unsafe raw type: warning\n
- final bound for type parameter: warning\n
- missing serialVersionUID: warning\n
- varargs argument need cast: warning\n
- forbidden reference to type with access restriction: error\n
- discouraged reference to type with access restriction: warning\n
- null reference: warning\n
- potential null reference: ignore\n
- redundant null check: ignore\n
- autoboxing: ignore\n
- annotation super interface: warning\n
- missing @Override annotation: ignore\n
- missing @Override annotation for interface method implementation: enabled\n
- missing @Deprecated annotation: ignore\n
- incomplete enum switch: warning\n
- raise null related warnings for variables tainted in assert statements: disabled\n
- suppress warnings: enabled\n
- suppress optional errors: disabled\n
- unhandled warning token: warning\n
- unused warning token: warning\n
- unused label: warning\n
- treat optional error as fatal: disabled\n
- parameter assignment: ignore\n
- generate class files: enabled\n
- process annotations: disabled\n
- unused type arguments for method/constructor invocation: warning\n
- redundant superinterface: ignore\n
- comparing identical expr: warning\n
- missing synchronized on inherited method: ignore\n
- should implement hashCode() method: ignore\n
- dead code: warning\n
- dead code in trivial if statement: disabled\n
- tasks severity: warning\n
- unused object allocation: ignore\n
- method can be static: ignore\n
- method can be potentially static: ignore\n
- redundant specification of type arguments: ignore\n
- resource is not closed: warning\n
- resource may not be closed: ignore\n
- resource should be handled by try-with-resources: ignore\n
- Unused Type Parameter: ignore
--------- Difference is ----------
expected:&lt;...compliance level: 1.[4\n
- JDK source level: 1.3\n
- JDK target level: 1.2\n
- verbose : OFF\n
- produce reference info : OFF\n
- parse literal expressions as constants : ON\n
- encoding : UTF-8\n
- task tags: TODO,FIXME,XXX\n
- task priorities : NORMAL,HIGH,NORMAL\n
- report deprecation inside deprecated code : disabled\n
- report deprecation when overriding deprecated method : disabled\n
- report unused parameter when implementing abstract method : disabled\n
- report unused parameter when overriding concrete method : disabled\n
- report unused parameter include doc comment reference : enabled\n
- report constructor/setter parameter hiding existing field : disabled\n
- inline JSR bytecode : dis]abled\n
- share com...&gt; but was:&lt;...compliance level: 1.[8\n
- JDK source level: 1.8\n
- JDK target level: 1.8\n
- verbose : OFF\n
- produce reference info : OFF\n
- parse literal expressions as constants : ON\n
- encoding : UTF-8\n
- task tags: TODO,FIXME,XXX\n
- task priorities : NORMAL,HIGH,NORMAL\n
- report deprecation inside deprecated code : disabled\n
- report deprecation when overriding deprecated method : disabled\n
- report unused parameter when implementing abstract method : disabled\n
- report unused parameter when overriding concrete method : disabled\n
- report unused parameter include doc comment reference : enabled\n
- report constructor/setter parameter hiding existing field : disabled\n
- inline JSR bytecode : en]abled\n
- share com...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.tearDown(AbstractJavaModelTests.java:3128)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:105)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:89)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite$1.protect(SuiteOfTestCases.java:77)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:86)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:743)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:351)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:670)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:609)
at org.eclipse.equinox.launcher.Main.run(Main.java:1516)
at org.eclipse.equinox.launcher.Main.main(Main.java:1489)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2644037</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-11-25 05:32:08 -0500</bug_when>
    <thetext>org.eclipse.jdt.internal.core.JavaModelManager.getOptions() has a check 
if (!Platform.isRunning()) {
			this.optionsCache = getDefaultOptionsNoInitialization();
			return new Hashtable(this.optionsCache);
}

which will result in the options differing from the default options which seems to be the case observed in these failures.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2646780</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-12-01 23:02:56 -0500</bug_when>
    <thetext>Finally, I dug up the old bug - bug 456147, which is similar but much smaller no of failures that time.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>321485</bug_id>
          
          <creation_ts>2010-08-02 05:30:00 -0400</creation_ts>
          <short_desc>Eclipse gives compile error, while Sun JDK does not</short_desc>
          <delta_ts>2013-12-08 18:34:16 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows Vista</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mekk Elek">mchallss</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>mchallss</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1792042</commentid>
    <comment_count>0</comment_count>
    <who name="Mekk Elek">mchallss</who>
    <bug_when>2010-08-02 05:30:57 -0400</bug_when>
    <thetext>Build Identifier: 20100218-1602

I am using the LambdaJ (http://code.google.com/p/lambdaj/) library, which works and compiles fine using Netbeans, IntelliJ, those that uses the Sun JDK compiler. It does not compile in Eclipse with the internal Java compiler.

The lambdaj library can be fetched from:
http://lambdaj.googlecode.com/files/lambdaj-2.3-with-dependencies.jar


Reproducible: Always

Steps to Reproduce:
1.Download the lambdaj library from http://lambdaj.googlecode.com/files/lambdaj-2.3-with-dependencies.jar
2.Create a new Java project in Eclipse
3.Add the downloaded jar as an external library to the project
4.Create this class into the project that tries to use the LambdaJ library:

import static ch.lambdaj.Lambda.having;
import static ch.lambdaj.Lambda.on;
import static ch.lambdaj.collection.LambdaCollections.with;
import java.util.ArrayList;
import java.util.List;

public class Buggy {
  public static void main(String[] args) {
    ArrayList&lt;Integer&gt; mylist = new ArrayList&lt;Integer&gt;();
    List&lt;Integer&gt; containsList = with(mylist).clone(); // The keyword &quot;with&quot; will fail.
  }
}

5. Eclipse reports the following error:
&quot;The method with(List&lt;? extends Integer&gt;) is ambiguous for the type Buggy&quot;
6. If I prefix the &quot;with&quot; keyword with the package name like this:
List&lt;Integer&gt; containsList = ch.lambdaj.collection.LambdaCollections.with(mylist).clone();

The error will be:
&quot;The method with(List&lt;? extends Integer&gt;) is ambiguous for the type LambdaCollections&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1792062</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-08-02 06:24:59 -0400</bug_when>
    <thetext>Reproduced with  I20100608-0911. Srikanth, please investigate. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1792405</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2010-08-03 01:02:43 -0400</bug_when>
    <thetext>javac 5,6,7 compile clean. Eclipse behavior dates back at least to 3.3.2
probably earlier too. Under investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1795241</commentid>
    <comment_count>3</comment_count>
      <attachid>176092</attachid>
    <who name="Mekk Elek">mchallss</who>
    <bug_when>2010-08-07 13:33:00 -0400</bug_when>
    <thetext>Created attachment 176092
LambdaJ changes that make the compile error disappear

Hi,

the LambdaJ project fixed one thing in their libraries regarding this Eclipse bug. This attachement is the new version of their library (same as the official 2.3 with dependencies plus the fix).

The thread for the discussion of this Eclipse bug can be found here:
http://groups.google.com/group/lambdaj/browse_thread/thread/c19e626a059cd1d8/8284913c32872ee1#8284913c32872ee1

This is what they changed, quoted from the thread:
&quot;Hi, 

thanks a lot for submitting the bug report. It seems an Eclipse issue 
indeed, but it seems I also made a small mistake on my side. 
In particular a colleague made me notice that I defined the with() 
methods accepting a Collection and a List in an inconsistent way since 
they are declared as it follows: 
with(Collection&lt;T&gt; collection) 
with(List&lt;? extends T&gt; list) 
I will fix this inconsistency with the next patch release, but now I 
am also wondering if it could be in some way related with the 
Eclipse&apos;s problem. 
Did somebody notice some similar problem? Could somebody quickly try 
to reproduce a similar situation in Eclipse? 
Should I report this detail on the Eclipse bug report? 

Bye, 
Mario&quot;


This change in the LambdaJ library causes the reported Eclipse internal compiler error to disappear. So, the root cause for triggering the compile error can be narrowed down. Maybe the eclipse compiler is simply more rigid than the Sun JDK compiler, or maybe the original error is really a bug in the compiler, but at least now you can compare the two behaviors and decide if it is really a bug or rather a feature (i.e. to be more rigid than Sun compiler).

McHalls</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1938505</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-05-26 21:43:46 -0400</bug_when>
    <thetext>Small self contained examples that shows the problem:

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class X {

	public static &lt;T&gt; List&lt;T&gt; with(List&lt;? extends T&gt; p) { return null; } 
	public static &lt;T&gt; Collection&lt;T&gt; with(Collection&lt;T&gt; p) { return null; }

	public static void main(String[] args) {
            ArrayList&lt;Integer&gt; mylist = new ArrayList&lt;Integer&gt;();
            List&lt;Integer&gt; containsList = with(mylist);
        }
} 

I&apos;ll take a look and see what is going on here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1938506</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-05-26 21:53:40 -0400</bug_when>
    <thetext>Even shorter version:

import java.util.Collection;
import java.util.List;

public class X {
	public static &lt;T&gt; List&lt;T&gt; with(List&lt;? extends T&gt; p) { return null; } 
	public static &lt;T&gt; Collection&lt;T&gt; with(Collection&lt;T&gt; p) { return null; }
	static { with(null); }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1938507</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-05-26 21:57:59 -0400</bug_when>
    <thetext>javac figures with(List&lt;? extends T&gt; p) to be more specific than
the other, while eclipse thinks neither is more specific.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1938515</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-05-26 22:29:34 -0400</bug_when>
    <thetext>Released junit org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest.test087()
into JAVA7 branch codifying current behavior. If eclipse behavior found to be 
incorrect, test will be changed suitably.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1938534</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-05-27 01:18:50 -0400</bug_when>
    <thetext>This looks like a bug in javac - In both instances, both the compilers
infer T to be object given the call 

     with(null);

and now if I explicitly spell out the inferred arguments and create
a class as follows, javac starts complaining too.

import java.util.Collection;
import java.util.List;

public class X {
    public static List&lt;Object&gt; with(List&lt;? extends Object&gt; p) { return null; } 
    public static Collection&lt;Object&gt; with(Collection&lt;Object&gt; p) { return null; }
    static { 
    	with(null);
    }
}


I&apos;ll reread 15.12.2.5 one more time to see if I can glean some pointers
there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2339160</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-08 18:34:16 -0500</bug_when>
    <thetext>FYI: feeding the example from comment 4 into ecj as of sherrmann/NewTypeInference produces just one warning (unused local) and no error, whereas in 4.3.1 we still report an ambiguity error.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>176092</attachid>
            <date>2010-08-07 13:33:00 -0400</date>
            <delta_ts>2010-08-07 13:33:00 -0400</delta_ts>
            <desc>LambdaJ changes that make the compile error disappear</desc>
            <filename>lambdaj-2.3.1-SNAPSHOT-with-dependencies.jar</filename>
            <type>application/octet-stream</type>
            <size>793621</size>
            <attacher name="Mekk Elek">mchallss</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>36939</bug_id>
          
          <creation_ts>2003-04-25 17:37:00 -0400</creation_ts>
          <short_desc>Improve support for Java-like source files</short_desc>
          <delta_ts>2015-11-23 15:12:53 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>helpwanted</keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jim des Rivieres">jeem</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>aclement</cc>
    
    <cc>andrew.eisenberg</cc>
    
    <cc>benjamin.muskalla</cc>
    
    <cc>benjamin</cc>
    
    <cc>bob</cc>
    
    <cc>bokowski</cc>
    
    <cc>burner</cc>
    
    <cc>caniszczyk</cc>
    
    <cc>carl_mcconnell</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>dave</cc>
    
    <cc>david.festal</cc>
    
    <cc>david_williams</cc>
    
    <cc>deepakazad</cc>
    
    <cc>dev</cc>
    
    <cc>digulla</cc>
    
    <cc>djspiewak</cc>
    
    <cc>dsciamma</cc>
    
    <cc>echofloripa</cc>
    
    <cc>eclipse.20.tealeaf</cc>
    
    <cc>eostroukhov</cc>
    
    <cc>eric</cc>
    
    <cc>Ernest.Pasour</cc>
    
    <cc>for.work.things</cc>
    
    <cc>gunnar</cc>
    
    <cc>jacek.pospychala</cc>
    
    <cc>java</cc>
    
    <cc>jeremyd</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>john.arthorne</cc>
    
    <cc>kaestner</cc>
    
    <cc>KetanPadegaonkar</cc>
    
    <cc>Konstantin.Scheglov</cc>
    
    <cc>m.a.r.k</cc>
    
    <cc>Markus.Milleder</cc>
    
    <cc>markus_keller</cc>
    
    <cc>matthias.metzler</cc>
    
    <cc>mauromol</cc>
    
    <cc>me</cc>
    
    <cc>Michael_Rennie</cc>
    
    <cc>mike.milinkovich</cc>
    
    <cc>miles</cc>
    
    <cc>mistria</cc>
    
    <cc>mlists</cc>
    
    <cc>mn</cc>
    
    <cc>mpchapman</cc>
    
    <cc>neale</cc>
    
    <cc>neilasmyth</cc>
    
    <cc>nin</cc>
    
    <cc>nitind</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>pavery</cc>
    
    <cc>philippe_mulet</cc>
    
    <cc>pombredanne</cc>
    
    <cc>pwebster</cc>
    
    <cc>rafal</cc>
    
    <cc>remy.suen</cc>
    
    <cc>rodrigo</cc>
    
    <cc>sebastian.zarnekow</cc>
    
    <cc>shanec</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>thomas.eitzenberger</cc>
    
    <cc>tom.schindl</cc>
    
    <cc>vlsergey</cc>
    
    <cc>ws</cc>
          
          <votes>52</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>157661</commentid>
    <comment_count>0</comment_count>
    <who name="Jim des Rivieres">jeem</who>
    <bug_when>2003-04-25 17:37:35 -0400</bug_when>
    <thetext>Improve support for Java-like source files. JSP and JSQL are two instances of 
languages that embed passages of Java language code. Eclipse should provide 
better support for Java-like source files. For instance, outline views should 
be able to show the hierarchy of Java elements; it should be possible to index 
these files so that Java search can find the Java declarations and references 
within; it should be possible to use Java code assist on the Java passages; 
refactoring should be able to take these files into account; the debugger 
should be able to step through the Java passages (JSR-045); error highlighting 
should be supported across sections; etc. [JDT Core, JDT UI, JDT Debug] 
[Theme: Extended Java family]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>157996</commentid>
    <comment_count>1</comment_count>
    <who name="Jim des Rivieres">jeem</who>
    <bug_when>2003-04-28 10:16:18 -0400</bug_when>
    <thetext>Correction: The example in the item is SQLj (http://www.sqlj.org/) rather than 
JSQL (a product from Caribou Lake Software).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>158003</commentid>
    <comment_count>2</comment_count>
    <who name="Jim des Rivieres">jeem</who>
    <bug_when>2003-04-28 10:33:50 -0400</bug_when>
    <thetext>I&apos;m removing mention of the outline view example since it doesn&apos;t really make 
sense for JSPs which require an HTML and not a Java outline. Here is revised 
item:

Improve support for Java-like source files. JSP and SQLj are two instances of 
languages that use Java syntax. Eclipse should provide better support for Java-
like source files. For instance, it should be possible to index these files so 
that Java search can find the Java declarations and references within; it 
should be possible to use Java code assist on the Java passages; refactoring 
should be able to take these files into account; the debugger should be able 
to step through the Java passages (JSR-045); error highlighting should be 
supported across sections; etc. [JDT Core, JDT UI, JDT Debug] [Theme: Extended 
Java family]

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>159771</commentid>
    <comment_count>3</comment_count>
    <who name="John Arthorne">john.arthorne</who>
    <bug_when>2003-05-08 13:31:13 -0400</bug_when>
    <thetext>*** Bug 37371 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>166642</commentid>
    <comment_count>4</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2003-06-13 04:58:22 -0400</bug_when>
    <thetext>*** Bug 29697 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>228364</commentid>
    <comment_count>5</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2004-02-17 13:08:05 -0500</bug_when>
    <thetext>Open Java search is now released in 3.0 M7. Check porting guide for further 
details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>282414</commentid>
    <comment_count>6</comment_count>
    <who name="">franjb68</who>
    <bug_when>2004-05-19 08:32:46 -0400</bug_when>
    <thetext>I&apos;ve put this on bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=37937, but I
think this can be a better place:

I would like to see Code Completion and all the nice stuff in the Java code
inside CUP and JLEX files. They can have Java source code inside blocks marked
with {: :}.

text text text {:  //Java code :}

more text {: //Java code
             //More java code
             // Even more java code :}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>342184</commentid>
    <comment_count>7</comment_count>
    <who name="Luzius Meisser">luzius.meisser</who>
    <bug_when>2004-09-15 08:01:37 -0400</bug_when>
    <thetext>Another example of java like source files are the .aj files used by AspectJ. 
While working on AJDT (AspectJ Development Tools - the eclipse plugin for 
AspectJ), we experienced some problems in reusing jdts functionality, namely 
the java model, java search, refactoring and features like “organize imports” 
or “code format”. Most of these features would only require minimal changes to 
work for AspectJ code. In many cases, the jdt features only fail because of 
little things like file-extension checks.

This comment will describe these problems in more detail and propose a 
possible solution that could also solve the related problems mentioned in 
earlier comments, especially the one in duplicate bug 29697.

Further information about AspectJ and AJDT can be found at:
AspectJ: http://eclipse.org/aspectj/
AJDT: http://www.eclipse.org/ajdt/



Summary

Plugins that extend the Java and jdt functionality are not able to contribute 
to the JavaModel which results in some design restriction. I propose the 
introduction of a &quot;Compilation Unit Provider&quot; extension point to solve this
and many of the problems mentioned above.



Problem Example A (Package Explorer):

User has an AspectJ project and uses the AJDT plugin for development. 
Unfortunately, he is not able to expand the .aj source files in the package 
explorer view because the package explorer is not aware of the fact that .aj 
files are source files for which AJDT could easily provide jdt compatible 
ICompilationUnits. If there was an extension point to tell the java model how 
these ICompilationUnits could be obtained, we could not only provide a better 
package explorer view, we would also get features like code completion for 
java elements defined in .aj files for free.


Problem Example B (Java Index):

There is already an extension point to contribute search results to a java 
search. However, this only helps if the user himself is searching for 
something - searches that happen in background are unaffected. Being able to 
contribute to the java search on a lower level would help with issues like

- stack-trace navigation for non-java files (AJDT bug 70212)
  (the comment &quot;TODO: works for JDK stack trace only&quot; in
  org.eclipse.jdt.internal.junit.ui.FailureTracecreateOpenEditorAction(String)
  indicates that you are already aware of this problem.)

- launch support for non-java files:
  the &quot;run&quot; command would be able to find the main method in .aj files.

- type hierarchy

- class hierarchy

- all the wizards that let the user select a class or other java elements

- Java Search (could also be done using the search contributor extension 
  point, but would be more elegant and contain less lines of code this way)


Problem Example C
“Organize Imports” would work for .aj files without further changes if it knew 
where to get the according ICompilationUnit from and which Parser to use. The 
same applies to most similar features, for example externalize strings, format 
code or generating getters/setters. Since all of these features fail for 
similar problems when applying to AspectJ code, it would be great if there was 
a possibility to solve them all at once on a lower level.


Proposal on how to solve these problems:

Introduction of a new extension point, let&apos;s call it &quot;Compilation Unit 
Provider&quot;, for Plugins that would like to enhance the JavaModel with own 
CompilationUnits.

When jdt builds the javamodel and finds non-.java source files, it uses this 
extension point to check if there is a plugin that is able to create an 
ICompilationUnit for this source file and if yes, it would delegate its 
creation to that plugin.

IMHO, this would imply the following main changes in jdt:

- centralized creation of ICompilationUnits, maybe in JavaCore (?).
  (this should not be a problem, there are currently only 8 spots in the jdt
  code where an ICompilationUnit gets instantiated).

- make ICompilationUnits responsible for their parsing. We would need to let 
  the compilation unit decide by whom it gets parsed. This is maybe the biggest
  necessary change since there are so many different parsers for different
  occassions... maybe the parsers for the different file types could also be
  defined by extension points?

I guess this would solve most of the issues mentioned in the earlier comments, 
or at least enable third parties to solve them.


How realistic do you consider such an extension point to be? Do you think it 
could get implemented in one of the next realeases, maybe 3.1?

Thanks in advance,
  Luzius
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>490038</commentid>
    <comment_count>8</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2005-06-23 19:38:55 -0400</bug_when>
    <thetext>Removing target since most requests got deferred as per plan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>558182</commentid>
    <comment_count>9</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2005-11-04 18:04:21 -0500</bug_when>
    <thetext>Considering for 3.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>560351</commentid>
    <comment_count>10</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2005-11-09 04:58:46 -0500</bug_when>
    <thetext>Compilation and completion participation is anticipated for 3.2.

Search/refactoring/codeassist is already operational either through
participation or partitionning. Completion participation will allow to plug into
Java codeassist and provide additional proposals (e.g. APT proposals).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>574826</commentid>
    <comment_count>11</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2005-11-30 07:50:35 -0500</bug_when>
    <thetext>We now support Java-like extensions (see bug 71460). However the content of the file has to be pure Java.

To completely solve this bug, we would need to provide a way to parse part of a Java-like source file, or delegate the parsing as suggested in comment 7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>596546</commentid>
    <comment_count>12</comment_count>
      <attachid>32520</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-01-05 08:53:23 -0500</bug_when>
    <thetext>Created attachment 32520
centralise the creation of compilation units

As a possible step towards supporting Java-like source code, here is a small patch which simply centralises the creation of CompilationUnits. The constructor becomes protected, and a factory method is provided instead, createCompilationUnit(). This would provide a single point of control for implementing a delegation mechanism. Do you think this is a useful approach?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>601122</commentid>
    <comment_count>13</comment_count>
      <attachid>32899</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-01-12 04:41:49 -0500</bug_when>
    <thetext>Created attachment 32899
implementation of a proposed compilation unit provider</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>601123</commentid>
    <comment_count>14</comment_count>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-01-12 04:42:18 -0500</bug_when>
    <thetext>Here is a patch for a working compilation unit provider as described above (it also includes the centralisation of CU creation). I&apos;ve been trying this out in the context of getting better support for AspectJ source code in .aj files, and it&apos;s looking useful. I doubt it will solve all the issues, but it seems to be a good step forward, and would apply equally to other Java-like extension cases. Here is how it can be used:

   &lt;extension point=&quot;org.eclipse.jdt.core.compilationUnitProvider&quot;&gt;
     &lt;compilationUnitProvider file-extensions=&quot;aj&quot;
       class=&quot;org.eclipse.ajdt.internal.core.AspectJCompilationUnitProvider&quot;/&gt;
   &lt;/extension&gt;

this registers our provider with the given file extension (it could get the file extensions from defined content types instead). The provider is then pretty simple:

public class AspectJCompilationUnitProvider implements ICompilationUnitProvider {
	public ICompilationUnit createCompilationUnit(IPackageFragment parent, String name, WorkingCopyOwner owner) {
		return new AJCompilationUnit((PackageFragment)parent, name, owner);
	}
}

AJCompilationUnit extends CompilationUnit and is then responsible for creating it&apos;s own structure, using instances of IJavaElement (new subclasses are defined for things that are not methods or types etc).

I&apos;d love to hear feedback on this proposal. It does put a lot of work into the hands of the provider, but I think that becomes necessary as &quot;Java-like&quot; has such broad scope.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>605811</commentid>
    <comment_count>15</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2006-01-19 10:27:39 -0500</bug_when>
    <thetext>Unfortunately CompilationUnit is internal, and IJavaElement interfaces cannot be implemented by clients (this is spec&apos;ed). JDT Core could never surface such ICompilationUnitProvider API.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>609196</commentid>
    <comment_count>16</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2006-01-25 09:22:03 -0500</bug_when>
    <thetext>May consider opening creation of ICompilationUnis post 3.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>795927</commentid>
    <comment_count>17</comment_count>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-09-25 12:05:24 -0400</bug_when>
    <thetext>It is now post-3.2, so reopening for further discussion for 3.3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827010</commentid>
    <comment_count>18</comment_count>
      <attachid>53622</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-10 09:59:45 -0500</bug_when>
    <thetext>Created attachment 53622
updated patch for 3.3M3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827011</commentid>
    <comment_count>19</comment_count>
      <attachid>53623</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-10 10:01:41 -0500</bug_when>
    <thetext>Created attachment 53623
example provider implmentation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827016</commentid>
    <comment_count>20</comment_count>
      <attachid>53624</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-10 10:03:34 -0500</bug_when>
    <thetext>Created attachment 53624
project to use with example provider implementation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827023</commentid>
    <comment_count>21</comment_count>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-10 10:12:46 -0500</bug_when>
    <thetext>The above patch updates the compilation unit provider to work on 3.3M3, and the org.eclipse.foo plug-in project is a prototype of how the provider can be used in an API-clean way - it&apos;s rather minimal but it doesn&apos;t use any internal API.

ICompilationUnit and IJavaElement are spec&apos;ed to say
&quot;This interface is not intended to be implemented by clients.&quot;
but surely if you are ever to support Java-like source, an API change would need to be made to read something like:
&quot;This interface is not intended to be implemented by clients, except for implementing Java-like extensions.&quot;
Clearly this is an API change, but not which breaks compatibility as it&apos;s add a new option.

As you can see implementing ICompilationUnit directly requires a lot of work. Ultimately it would be useful to provide a public API abstract implementation or a concrete implementation (such as a ResourceBasedCompilationUnit for example) which can then be extended.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827927</commentid>
    <comment_count>22</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2006-11-13 06:39:12 -0500</bug_when>
    <thetext>This patch does not seem complete. After applying it, I still see a lot of references to org.eclipse.jdt.internal.core.CompilationUnit in the org.eclipse.jdt.core plugin.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>827937</commentid>
    <comment_count>23</comment_count>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-13 06:57:45 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; This patch does not seem complete. After applying it, I still see a lot of
&gt; references to org.eclipse.jdt.internal.core.CompilationUnit in the
&gt; org.eclipse.jdt.core plugin.

Jerome, thanks for taking a look at the patch. The internal class CompilationUnit is defined by the org.eclipse.jdt.core plugin, so isn&apos;t it ok to refer to it from the rest of that plugin? I thought the main goal was to make sure that someone could write a provider for this proposed extension without needing to use internal api in their provider code. In general I replaced
new CompilationUnit(..) with CompilationUnit.createCompilationUnit(..). Thinking about it further, maybe it would be better to move this factory method outside of the CompilationUnit class? Can you suggest anywhere more appropriate - how about JavaCore?

Do you think it might be possible to refer to only ICompilationUnit instead of CompilationUnit, even inside jdt.core? I guess this would be a nice solution, although it would probably require a small number of API additions to ICompilationUnit, such as isPrimary(). Does that sound reasonable?


</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>828817</commentid>
    <comment_count>24</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2006-11-14 07:55:48 -0500</bug_when>
    <thetext>(In reply to comment #23)
&gt; The internal class
&gt; CompilationUnit is defined by the org.eclipse.jdt.core plugin, so isn&apos;t it ok
&gt; to refer to it from the rest of that plugin? 
Not if this internal code assumes that the only implementor of ICompilationUnit is CompilationUnit. You will end up with ClassCastExceptions.

&gt; I thought the main goal was to
&gt; make sure that someone could write a provider for this proposed extension
&gt; without needing to use internal api in their provider code. In general I
&gt; replaced
&gt; new CompilationUnit(..) with CompilationUnit.createCompilationUnit(..).
&gt; Thinking about it further, maybe it would be better to move this factory method
&gt; outside of the CompilationUnit class? Can you suggest anywhere more appropriate
&gt; - how about JavaCore?
Sure that would be better than refering the internal class CompilationUnit.

&gt; Do you think it might be possible to refer to only ICompilationUnit instead of
&gt; CompilationUnit, even inside jdt.core? I guess this would be a nice solution,
&gt; although it would probably require a small number of API additions to
&gt; ICompilationUnit, such as isPrimary(). Does that sound reasonable?
I expected that your patch would do that already :-)

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>832959</commentid>
    <comment_count>25</comment_count>
      <attachid>54061</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-17 06:39:14 -0500</bug_when>
    <thetext>Created attachment 54061
updated patch to make jdt.core use ICompilationUnit

This new patch addresses the feedback in comment #24
We now have JavaCore.createCompilationUnit()
and a small number of new API methods in ICompilationUnit, IJavaElement, and IOpenable to allow the rest of jdt.core to work with ICompilationUnit instead of CompilationUnit.

The patch is now against HEAD and I&apos;m running with eclipse-SDK-I20061114-1636.
I&apos;ve verified that all 5076 model tests still pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>832960</commentid>
    <comment_count>26</comment_count>
      <attachid>54062</attachid>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2006-11-17 06:40:19 -0500</bug_when>
    <thetext>Created attachment 54062
updated example provider to work with latest jdt.core patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>864452</commentid>
    <comment_count>27</comment_count>
    <who name="Matt Chapman">mpchapman</who>
    <bug_when>2007-01-16 12:11:39 -0500</bug_when>
    <thetext>Jerome, have you had chance to look at these patches?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>904981</commentid>
    <comment_count>28</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2007-03-16 15:27:01 -0400</bug_when>
    <thetext>I am wondering if this issue will be addressed in 3.3 timeframe? Should someone update the target milestone?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>905940</commentid>
    <comment_count>29</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2007-03-19 06:00:14 -0400</bug_when>
    <thetext>Sorry, as priority is on stabilization rather than adding new features, this will have to be deferred again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1276348</commentid>
    <comment_count>30</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-06-23 19:57:33 -0400</bug_when>
    <thetext>The resolution of this bug would be extremely beneficial for AJDT.  It will help AJ editors behave much more intuitively.

I am interested in seeing that this patch (or something that allows the same functionality) be considered for Eclipse 3.5.  What do I need to do for this?

I am willing to update the patch to ensure that it works against HEAD.

thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1276418</commentid>
    <comment_count>31</comment_count>
    <who name="Miles Sabin">miles</who>
    <bug_when>2008-06-24 01:46:08 -0400</bug_when>
    <thetext>I&apos;d like to add my support to comment #30. This patch would also be very useful for Scala Eclipse support (which is borrowing ideas from AJDT) and any other JVM language which want to have tight integration with the JDT.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1277132</commentid>
    <comment_count>32</comment_count>
    <who name="Mik Kersten">mik.kersten</who>
    <bug_when>2008-06-24 17:57:55 -0400</bug_when>
    <thetext>+1 from me too.  Without this we don&apos;t have a good path for any of the language extensions discussed on this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1313742</commentid>
    <comment_count>33</comment_count>
    <who name="Chris Aniszczyk">caniszczyk</who>
    <bug_when>2008-08-17 14:48:23 -0400</bug_when>
    <thetext>How about for 3.5?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1313743</commentid>
    <comment_count>34</comment_count>
    <who name="Chris Aniszczyk">caniszczyk</who>
    <bug_when>2008-08-17 14:50:26 -0400</bug_when>
    <thetext>(In reply to comment #30)
&gt; I am willing to update the patch to ensure that it works against HEAD.

Please do Andrew.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1319896</commentid>
    <comment_count>35</comment_count>
    <who name="Jacek Pospychala">jacek.pospychala</who>
    <bug_when>2008-08-27 06:26:37 -0400</bug_when>
    <thetext>Hello, I&apos;m also interested in this bug being fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1325483</commentid>
    <comment_count>36</comment_count>
    <who name="Jacek Pospychala">jacek.pospychala</who>
    <bug_when>2008-09-05 10:03:36 -0400</bug_when>
    <thetext>hello,
I was looking at updating Matt&apos;s patch against HEAD.
Two years is a lot of time for JDT!

Just to verify, the point of the changes is to replace org.eclipse.jdt.core.internal.CompilationUnit class references with org.eclipse.jdt.core.ICompilationUnit interface, and add factory+ext.point able to centrally create ICompilationUnits.

Performing those changes, it turned out there were places that required additional type narrowing - mainly from JavaElement to IJavaElement.

There&apos;s also some methods defined in CompilationUnit (some of them declared in org.eclipse.jdt.core.internal.compilerenv.ICompilationUnit), but missing in org.eclipse.jdt.core.ICompilationUnit API.

I&apos;ll attach a list of errorour methods, that need to be added to ICompilationUnit or worked-around some other way.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1325484</commentid>
    <comment_count>37</comment_count>
      <attachid>111818</attachid>
    <who name="Jacek Pospychala">jacek.pospychala</who>
    <bug_when>2008-09-05 10:04:50 -0400</bug_when>
    <thetext>Created attachment 111818
errors list

List of errors after renaming from CompilationUnit to ICompilationUnit in jdt.core</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1325557</commentid>
    <comment_count>38</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-05 11:13:14 -0400</bug_when>
    <thetext>(In reply to comment #36)
&gt; Just to verify, the point of the changes is to replace
&gt; org.eclipse.jdt.core.internal.CompilationUnit class references with
&gt; org.eclipse.jdt.core.ICompilationUnit interface, and add factory+ext.point able
&gt; to centrally create ICompilationUnits.
&gt; 
&gt; Performing those changes, it turned out there were places that required
&gt; additional type narrowing - mainly from JavaElement to IJavaElement.
&gt; 
&gt; There&apos;s also some methods defined in CompilationUnit (some of them declared in
&gt; org.eclipse.jdt.core.internal.compilerenv.ICompilationUnit), but missing in
&gt; org.eclipse.jdt.core.ICompilationUnit API.

Yes, this is precisely my understanding as well.  Thanks for looking into this!
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330579</commentid>
    <comment_count>39</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-12 15:48:29 -0400</bug_when>
    <thetext>I will update the patch to work with today&apos;s head.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1331501</commentid>
    <comment_count>40</comment_count>
      <attachid>112580</attachid>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-15 14:38:03 -0400</bug_when>
    <thetext>Created attachment 112580
update patch for 3.5M1

This patch updates the prior patch to work with 3.5M1 (actually org.eclipse.jdt.core HEAD as of September 15, 2008).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1331503</commentid>
    <comment_count>41</comment_count>
      <attachid>112581</attachid>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-15 14:39:35 -0400</bug_when>
    <thetext>Created attachment 112581
Update test project for Eclipse 3.5M1

This patch  updates the test project to work with 3.5 HEAD as of today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1331527</commentid>
    <comment_count>42</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-15 14:55:45 -0400</bug_when>
    <thetext>I am mostly pleased with the new version of the patch.  The patch passes all builder, compiler and model jdt.core tests.

Here are some reservations/questions that I still have:

1. IOpenable is not a sub-interface of IJavaElement.  If this were the case, then it would make some parts of the refactoring much cleaner (ie- less of a need for casts).  You can see this in the patched version of DeltaProcessor.java.  Perhaps there is a good reason not to make IOpenable a sub-interface of IJavaElement, but the JavaDoc of IOpenable describes the interface in terms of java elements.  So, perhaps the hierarchy could be rethought.

2. I am not too happy with CompilationUnitProblemFinder.process lines 167-170 (patched version).  I think the solution is outside the scope of this bug, however.  The code reads that only org.eclipse.jdt.internal.compiler.env.ICompilationUnit objects can be parsed.  This is related to Comment #7 problem C.  A org.eclipse.jdt.core.model.ICompilationUnit does not control its own parsing and hence only Java source code can properly be parsed.  We would need to change this part of the code to help allow non-Java source code to be parsed and sent to a problem finder.

3. In order to really enable non-Java (or Java like) source files, almost all references to JavaElement (and its concrete sub-types: CompilationUnit, PackageRoot, etc) should be replaced with references to the corresponding interface.  This will allow a Java-like compilation unit to use some bits of real Java elements, but at the same time mix it with Java-like elements.  I stayed away from doing this throughout JDT core because I thought it was outside the scope of this bug, but I would like to see this as the eventual direction.


Thank you for considering this bug again and I will be happy to work with you to make the patch more appropriate for Eclipse 3.5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1334724</commentid>
    <comment_count>43</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-19 06:54:49 -0400</bug_when>
    <thetext>Just add a quick look at the patch:
1. It adds new APIs with empty Javadoc
2. It contains no Java model tests
3. It introduces a breaking API change (ICompilationUnit can now be implemented).
4. Building jdt.core with this patch introduces 26 errors and warnings (compiler warnings and API Tooling errors and warnings)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1335269</commentid>
    <comment_count>44</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-20 18:28:12 -0400</bug_when>
    <thetext>(In reply to comment #43)
&gt; 1. It adds new APIs with empty Javadoc
I will fix this

&gt; 2. It contains no Java model tests
The plugin project org.eclipse.foo extends the compilation unit provider extension point and is a good test case of showing that it works.  However, I do not know how to convert this into a eclipse model junit test.  Can you please point me to some documentation on how to do this?

&gt; 3. It introduces a breaking API change (ICompilationUnit can now be
&gt; implemented).
Yes.  Us there something that needs to change for this?

&gt; 4. Building jdt.core with this patch introduces 26 errors and warnings
&gt; (compiler warnings and API Tooling errors and warnings)
Please explain more.  I have no errors when I compile.  Is there a particular set of non-default compiler warning/errors that the project uses?  If so, where can I find this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1335561</commentid>
    <comment_count>45</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-22 05:43:38 -0400</bug_when>
    <thetext>(In reply to comment #44)
&gt; &gt; 2. It contains no Java model tests
&gt; The plugin project org.eclipse.foo extends the compilation unit provider
&gt; extension point and is a good test case of showing that it works.  However, I
&gt; do not know how to convert this into a eclipse model junit test.  Can you
&gt; please point me to some documentation on how to do this?
There is no documentation on how to do this. However you can study org.eclipse.jdt.core.tests.model and add tests were it makes sense.

&gt; &gt; 3. It introduces a breaking API change (ICompilationUnit can now be
&gt; &gt; implemented).
&gt; Yes.  Us there something that needs to change for this?
We cannot introduce a breaking API change in a minor release. Backward compatibility is always a primary goal in the Eclipse SDK.

&gt; 
&gt; &gt; 4. Building jdt.core with this patch introduces 26 errors and warnings
&gt; &gt; (compiler warnings and API Tooling errors and warnings)
&gt; Please explain more.  I have no errors when I compile.  Is there a particular
&gt; set of non-default compiler warning/errors that the project uses?  If so, where
&gt; can I find this?
Just take Eclipse 3.5M2, check out org.eclipse.jdt.core from CVS and apply the patch. In the Problems view make sure to show the &quot;API Usage and Compatibility&quot; category.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1335566</commentid>
    <comment_count>46</comment_count>
    <who name="Remy Suen">remy.suen</who>
    <bug_when>2008-09-22 06:02:16 -0400</bug_when>
    <thetext>(In reply to comment #43)
&gt; 3. It introduces a breaking API change (ICompilationUnit can now be
&gt; implemented).

Hi Jerome, I&apos;m no API wizard but was wondering how this breaks API. Isn&apos;t this kind of like making something that was internal not internal? People on pre-version-of-Eclipse-with-patch-applied will interact with this interface like they have always done and shouldn&apos;t have any problems calling those methods on the interface directly. However, if these people make the assumption that it&apos;s always going to be a JDT implementation and cast it to org.eclipse.jdt.internal.core.CompilationUnit, well, that&apos;s not JDT&apos;s fault since they&apos;re casting it to an internal class.

I tried reviewing the wiki article [1] on ensuring API compatibility but I got kind of lost. ;) A further clarification would be most helpful, thanks. :)

[1] - http://wiki.eclipse.org/Evolving_Java-based_APIs</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1335685</commentid>
    <comment_count>47</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2008-09-22 09:59:29 -0400</bug_when>
    <thetext>I&apos;ll review the errors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1336267</commentid>
    <comment_count>48</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-23 04:15:38 -0400</bug_when>
    <thetext>(In reply to comment #46)
This breaks API since the contract on ICompilationUnit is changed. But I agree that existing clients of JDT/Core should not be affected. However the main drawback is that we could no longer add new methods on ICompilationUnit (in post 3.5) as this would break 3.5 clients. This would put big constraints on extending the Java model.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1336329</commentid>
    <comment_count>49</comment_count>
    <who name="Karsten Becker">java</who>
    <bug_when>2008-09-23 07:36:29 -0400</bug_when>
    <thetext>(In reply to comment #48)
&gt; (In reply to comment #46)
&gt; This breaks API since the contract on ICompilationUnit is changed. But I agree
&gt; that existing clients of JDT/Core should not be affected. 

&gt; However the main
&gt; drawback is that we could no longer add new methods on ICompilationUnit (in
&gt; post 3.5) as this would break 3.5 clients. This would put big constraints on
&gt; extending the Java model.
&gt; 

So breaking the contract is bad because then you can&apos;t break the contract anymore?

Extensions to the ICompilationUnit can still be done in the same way they are done on other occasions. Either using another specialized interface or ICompilationUnit2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1336365</commentid>
    <comment_count>50</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-23 09:04:58 -0400</bug_when>
    <thetext>(In reply to comment #49)
&gt; So breaking the contract is bad because then you can&apos;t break the contract
&gt; anymore?
Sorry, what do you mean?

&gt; Extensions to the ICompilationUnit can still be done in the same way they are
&gt; done on other occasions. Either using another specialized interface or
&gt; ICompilationUnit2.
Yes, this is what I meant by putting big constraints on extending the Java model. From the feedback in other Eclipse components that did that in the past, this kind of extension is hard to maintain/understand.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1336820</commentid>
    <comment_count>51</comment_count>
      <attachid>113298</attachid>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2008-09-23 16:32:22 -0400</bug_when>
    <thetext>Created attachment 113298
Patch recreated with comments on API and a test case

Added comments to the new API methods and added a test case.  Also updated to work with the latest from head.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1340533</commentid>
    <comment_count>52</comment_count>
    <who name="Markus Milleder">Markus.Milleder</who>
    <bug_when>2008-09-30 04:03:36 -0400</bug_when>
    <thetext>(In reply to comment #49)
&gt; (In reply to comment #48)
&gt; &gt; (In reply to comment #46)
&gt; &gt; This breaks API since the contract on ICompilationUnit is changed. But I agree
&gt; &gt; that existing clients of JDT/Core should not be affected. 
&gt; 
&gt; &gt; However the main
&gt; &gt; drawback is that we could no longer add new methods on ICompilationUnit (in
&gt; &gt; post 3.5) as this would break 3.5 clients. This would put big constraints on
&gt; &gt; extending the Java model.
&gt; &gt; 
&gt; 
&gt; So breaking the contract is bad because then you can&apos;t break the contract
&gt; anymore?
&gt; 
Currently, ICompilationUnit is only available as a type to be used, not as an interface to be implemented. Thus, adding methods does not impact clients - users of the type - and thus preserves API.

When ICompilationUnit is available as an implementable interface, adding to it breaks all implementors. This would mean that any implementors of ICompilationUnit must be synchronized to the JDT version.

You can currently see the effect of this by comparing the AJDT version scheme (x.y for Eclipse a.b) with most other plugins that only specify a minimum platform version necessary and work with any later version.

&gt; Extensions to the ICompilationUnit can still be done in the same way they are
&gt; done on other occasions. Either using another specialized interface or
&gt; ICompilationUnit2.
&gt; 
IWhatever&lt;n&gt; is a symptom of a problem, not a solution.

It stems from combination of less than perfect foresight (but who has that ?), the limitation of the Java language that does not allow abstract methods to stay unimplemented even if they are never used (and for good reasons), and the desire to allow old plugins to run on new platform versions (another good design).
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1356060</commentid>
    <comment_count>53</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2008-10-23 12:32:36 -0400</bug_when>
    <thetext>This is the only reason why we haven&apos;t addressed the problem yet. And maybe the real solution lives elsewhere, like having a separate generic model where the Java model would be an instance of it... (just thinking)

As to binary compatibility, maybe we could introduce a separate abstract class to e the root of supplied CU implementation. So it could adapt to subsequent ICompilationUnit evolutions ? (more thinking)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1356575</commentid>
    <comment_count>54</comment_count>
    <who name="Markus Milleder">Markus.Milleder</who>
    <bug_when>2008-10-24 04:05:37 -0400</bug_when>
    <thetext>(In reply to comment #53)
&gt; As to binary compatibility, maybe we could introduce a separate abstract class
&gt; to e the root of supplied CU implementation. So it could adapt to subsequent
&gt; ICompilationUnit evolutions ? (more thinking)
&gt; 
That looks like it would effectively introduce a single-rooted hierarchy of CU implementations. The hard part is designing it in a way that allows useful interactions between the overridden methods of old concrete implementations and newly introduced methods.

To my mind, the tight coupling between JDT&apos;s CU implementation and any other implementors is a defining characteristic of this problem - essential complexity in other words.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1448105</commentid>
    <comment_count>55</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2009-03-10 06:10:41 -0400</bug_when>
    <thetext>So let me summarize this:

- This bug is open for three years
- There is a patch
- A lot of people want this fixed
- The underlying issue (Java doesn&apos;t allow to evolve interfaces in a way which we would like) can&apos;t be solved.

Questions:

- How much has ICompilationUnit changed in the past three years? Is it a stable API or do you need to change it with every release of Eclipse?

- How about fixating the interface and introducing a *new* interface if you need new methods?

- How about accepting that Java is not the perfect solution and just bite the bullet instead of just sitting in front of the snake like a frozen rabbit and hope that the problem will just go away? :) I mean, really, no amount of discussion will ever yield the perfect solution to this issue. It&apos;s just is as it is.

So yes, third party implementors of this API will have to upgrade their code when the API changes. Well, Eclipse is open source and the customers can live for as long as they like with the old version. Anyone who gets an additional benefit from the new version will adopt the new API anyway, so there is no loss here, either. Dead projects won&apos;t be better off, no matter what Eclipse does.

I understand that you don&apos;t want to introduce unnecessary dependencies but here, I don&apos;t buy it. A lot of people could really benefit from this, especially since more and more Java-like languages pop up. Yes, &quot;a lot of people&quot; means lots of complaints when you have to change the API but either you prove here and now that you have a better idea or we will simply continue to use the private parts of the JDT and get on your nerves with requests to make the API public.

Please choose your poison and either accept the patch or close the bug as &quot;WONTFIX&quot; (and therefore admit that introducing private parts of the API was a mistake to begin with) :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1457514</commentid>
    <comment_count>56</comment_count>
    <who name="Sergey Vladimirov">vlsergey</who>
    <bug_when>2009-03-21 19:01:50 -0400</bug_when>
    <thetext>Incomplete support of Java-code in JSP editor is the biggest reason why a lot of my co-workers are using some commercial editors.

+1 for this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1614714</commentid>
    <comment_count>57</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2009-10-22 00:21:42 -0400</bug_when>
    <thetext>I would like to revisit this bug for 3.6.  One year after submitting my first patch, I now have significantly more experience in this area.  We have implemented tool support by extending JDT for two Java-like languages now (AspectJ and Groovy).  Projects of both kinds are able to co-exist in the same workspace and there is theoretically no reason why we can&apos;t extend the solution to even more languages (Scala already does this, and JavaFX is looking to do something similar).

Our AspectJ support uses load time weaving (provided by Equinox Aspects) to extend JDT, and our Groovy support uses a feature patch.  There are benefits and disadvantages to each.  However, many, many people are now using this and have both Groovy and AspectJ projects in the same workspace (but alas, not in the same project).

In relation to this bug and generating language-specific ICompilationUnit objects, both tools use a similar approach: sub-class o.e.j.core.internal.CompilationUnit and at all source locations where CompilationUnit objects are instantiated, instead delegate to a CompilationUnitProvider, which looks at content types to determine what kind of CompilationUnit to create.

I can create a fairly succinct patch for this, but the problem, of course, is that CompilationUnit is an internal type.  Personally, I&apos;m fine with that, and I&apos;m happy to live dangerously and assume that my code will break on each new version (which it has, but only in minor ways).  And as Markus mentions in c54, the fact that we inherit all of CompilationUnit&apos;s functionality for all of GroovyCompilationUnits, AJCompilationUnits, and ScalaCompilationUnits is a feature, and makes the implementations of these three classes concise.

I would be OK with making a publicly inheritable AbstractCompilationUnit class, but only if it contained all the functionality of CompilationUnit (essentially making CompilationUnit a stub for backwards compatibility.

Progress in supporting Java-like languages is moving ahead, even if JDT is not.  And this really saddens me.  JDT is wonderfully implemented and finely tuned for Java code.  It is a shame that it has stopped evolving when the future of the Java platform is outside of the Java language.

I am not going to submit a patch until I know that there is a good chance that it will be accepted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1615095</commentid>
    <comment_count>58</comment_count>
    <who name="Robert Konigsberg">konigsberg</who>
    <bug_when>2009-10-22 11:03:07 -0400</bug_when>
    <thetext>I see that this started long ago (2003) so I hope this comment isn&apos;t too late: there&apos;s a format called GXP which was recently open-sourced by Google: http://code.google.com/p/gxp/ that is very much like JSP, but has a much stricter syntax (which IMHO is awesome, but that&apos;s not important right now.)

There are almost no Java statements, but there are xml attributes which define java source control flow. Here&apos;s an example snippet, to give you an idea. (I may not be getting the syntax quite right.)

&lt;gxp:import package=&quot;java.util.List&quot;/&gt;
&lt;gxp:param name=&quot;name&quot;, type=&quot;String&quot;/&gt;
&lt;html&gt;
  Hello, &lt;gxp:eval expr=&apos;name&apos;/&gt;.
  &lt;!-- or --&gt;
  &lt;gxp:eval expr=&apos;&quot;Hello&quot; + name&apos;/&gt;
&lt;/html&gt;

... or 

&lt;gxp:param name=&apos;names&apos; type=&apos;List{String}&apos; /&gt;
People going to the meeting:
&lt;gxp:loop var=&apos;name&apos; type=&apos;String&apos; iterable=&apos;names&apos; delimiter=&apos;, &apos;&gt;
  &lt;gxp:eval expr=&apos;name&apos; /&gt;
&lt;/gxp:loop&gt;.

which generates a for loop that outputs: People going to the meeting: Harry, Laurence, Doug.

Wanted to bring this to your attention. :) Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1615854</commentid>
    <comment_count>59</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-10-23 11:31:17 -0400</bug_when>
    <thetext>This is more something I would see for e4 and not for the 3.x streams.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1616282</commentid>
    <comment_count>60</comment_count>
    <who name="Ismael Juma">mlists</who>
    <bug_when>2009-10-25 09:56:43 -0400</bug_when>
    <thetext>Olivier, is there any information on what are the JDT plans for e4? All I&apos;ve seen so far seems to be Platform-related.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1623600</commentid>
    <comment_count>61</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2009-11-06 00:31:36 -0500</bug_when>
    <thetext>(In reply to comment #59)
&gt; This is more something I would see for e4 and not for the 3.x streams.

Are there any plans for JDT in e4?  Where can I raise bugs/submit patches?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1626771</commentid>
    <comment_count>62</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-11-12 09:19:25 -0500</bug_when>
    <thetext>Right now due to limited resources, the jdt core team is focusing on the 3.6 release. Once this is addressed, we will plan to the jdt core work for e4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1710171</commentid>
    <comment_count>63</comment_count>
    <who name="Neale Upstone">neale</who>
    <bug_when>2010-04-09 16:25:44 -0400</bug_when>
    <thetext>But what&apos;s the resource overhead on applying this patch?  

http://www.eclipse.org/jdt/core/r3.6/plan.php says &quot;[3] Keep Eclipse vibrant and attractive.&quot;.  How about having JDT be part of doing that rather than blocking it?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1764302</commentid>
    <comment_count>64</comment_count>
    <who name="Boris Bokowski">bokowski</who>
    <bug_when>2010-06-21 11:59:07 -0400</bug_when>
    <thetext>Olivier just posted to the e4-dev mailing list saying that JDT would like to start a work area in e4: http://dev.eclipse.org/mhonarc/lists/e4-dev/msg03180.html

Our model in e4 has been to make it very easy to become a committer so that there is as low a barrier as possible to start working together on code.  All we&apos;re looking for is a brief introduction on the mailing list with what you would like to contribute.

Those of you who would like to join the effort, please head over to the mailing list to get this started: https://dev.eclipse.org/mailman/listinfo/e4-dev</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1843531</commentid>
    <comment_count>65</comment_count>
      <attachid>183321</attachid>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2010-11-17 12:17:22 -0500</bug_when>
    <thetext>Created attachment 183321
Updated patch for Eclipse 3.7 head

Once again, here is an updated version of the patch of Eclipse 3.7.  As we talked about on the call yesterday, we are going to be making an e4 project for jdt core to play around with some of these ideas.  

As we discussed, there are problems with this patch in that it cannot go directly into the 3.x branch of jdt.core.  However, I&apos;m hoping to use it to further our discussion on how the ideas from this patch can be first brought into e4 and then hopefully back-ported into the 3.x branch.  

There were 2 approaches I could have taken with this patch, each with their own problems.  So this is a patch that adds a compilationUnitProvider extension point so that third parties can provide their own implementations of ICompilationUnit.

1. Assume that clients will implement ICompilationUnit and not necessarily sub-class CompilationUnit. This will cause large changes to the code in that several methods will need to be pushed up from the implementation to the interface and all references to JavaElement sub-classes (eg- in constructors) would need to be changed to the relevant interface.  (This is the approach that I took.)

2. Assume that clients will sub-class CompilationUnit. The change for this approach is almost trivial, but then of course CompilationUnit becomes an API class.

As there are obvious difficulties with either approach due to API changes, I am not going to push them too hard.  However, it seems to me that if we are going to go forward with something, we need to be more flexible about what it means to be API.  Olivier had mentioned the possibility of creating some sort of provisional API so that the JDT team still retains flexibility, while JDT extenders get more control.  Of course, this is an abuse of the term &apos;provisional API&apos;, but it does seem to me that we need something like this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1844225</commentid>
    <comment_count>66</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-11-18 14:00:02 -0500</bug_when>
    <thetext>I&apos;m not sure to which degree the renewed activity here is triggered by
the storm in bug 330312 et al. or if timing is just coincidental.
I do hope no-one feels unduly pressurized by me finger-pointing at this bug.
(Although a little pressure might have been intended)

I&apos;m curious to have a deep look at the latest patch - as soon as I&apos;ll find
the time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1844323</commentid>
    <comment_count>67</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2010-11-18 16:10:14 -0500</bug_when>
    <thetext>Stephan, some efforts are starting around e4 JDT. Are there things we can do to open up JDT without effecting its core aims (and performance/etc).  Perhaps with a view to reducing the amount of patching/weaving required by projects extending JDT.  This bug is an example of a long standing problem that we have since worked around but is an interesting case in thinking about what we might be able to do in e4.  Kind of coincidentally got resurrected at the same time as your situation kicked off.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1844362</commentid>
    <comment_count>68</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-11-18 17:05:55 -0500</bug_when>
    <thetext>All this sounds wonderful. How can I follow the e4 JDT activities?
What&apos;s the source repo and what communication channels will be used?

Regarding the &quot;provisional API&quot; Andrew E. mentioned, wouldn&apos;t that be
a candidate for x-friends?

The group of consuming projects is small, and all consumers should
closely collaborate with the e4 JDT effort, right? So why not explicitly
list these consumers in the manifest?

Maybe we just need a new convention for mapping x-friends to a corresponding
package name, like - &quot;friends&quot;? :)

And: the sources of any friend API should contain explicit references to the
communication channel used by the group. What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1844406</commentid>
    <comment_count>69</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2010-11-18 18:33:51 -0500</bug_when>
    <thetext>(In reply to comment #68)
&gt; All this sounds wonderful. How can I follow the e4 JDT activities?
&gt; What&apos;s the source repo and what communication channels will be used?

Send a message to the e4-dev mailing list.  Introduce yourself and announce your intentions to join the jdt core e4 project.  We will be holding committer elections soon.

&gt; Regarding the &quot;provisional API&quot; Andrew E. mentioned, wouldn&apos;t that be
&gt; a candidate for x-friends?

&gt; The group of consuming projects is small, and all consumers should
&gt; closely collaborate with the e4 JDT effort, right? So why not explicitly
&gt; list these consumers in the manifest?

x-friends assumes that the names of consuming bundles is known a priori.  Which will make it difficult for new projects to start making use of this pseudo-API.  This, however is easy enough to get around if you use the compiler setting to ignore restricted packages.

So, it may not be a bad idea to specifically mark this pseudo-API with a special package name description.  But it would not address the problem that existing classes, whose packages can&apos;t change, and need to be sub-classed by third parties.



&gt; 
&gt; Maybe we just need a new convention for mapping x-friends to a corresponding
&gt; package name, like - &quot;friends&quot;? :)
&gt; 
&gt; And: the sources of any friend API should contain explicit references to the
&gt; communication channel used by the group. What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1845852</commentid>
    <comment_count>70</comment_count>
      <attachid>183501</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-19 15:18:07 -0500</bug_when>
    <thetext>Created attachment 183501
Updated patch

What I have done:
- I updated the copyrights.
- Added FIXME tags to add missing documentation
- Updated test case

What needs to be done before releasing:
- I would like to discuss some of the methods you want to add on ICompilationUnit:
public ICompilationUnit cloneCachingContents();
public ICompilationUnit originalFromClone();
public void updateTimeStamp(ICompilationUnit original) throws JavaModelException;

- Run all tests (I didn&apos;t get a chance to do so for now)
- Check all usages of cast to CompilationUnit to make sure they are protected with a check
- Fix API Tooling to not report as a breaking change new methods in an interface that was tagged as @noimplement.

Andrew, please double-check what I did and let me know what you think.

Daniel, I also would like to get your opinion on what will be exposed a new API inside JDT/Core.

To everyone, even if you see activity on this old bug, there is more work to be done before we can release any code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1846955</commentid>
    <comment_count>71</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2010-11-23 07:04:23 -0500</bug_when>
    <thetext>(In reply to comment #70)
- Removing @noimplement from ICompilationUnit:
For the foreseeable future, implementers of this interface will still be tightly coupled to a specific jdt.core version and will also have to access internal APIs in other places. The straightforward way to handle this would just be to leave the @noimplement for now. Clients can always add an API Tools filter to hide the problem in their code.

In the longer term, we could probably also formalize this with existing tooling by separating the &quot;fluid&quot; APIs into an o.e.jdt.core.extenders plug-in whose major version number would be counted up with each release. Thus, the APIs can evolve and clients just have to make sure they&apos;ve set an upper bound on that bundle.

Until we are at that level, we could also just use conventions (e.g. an
/* extenders API */ comment on internal APIs to indicate that these are known to be used by language extenders and expected to stay stable). Likewise, the requested additional APIs on ICompilationUnit could be moved to an internal interface ICompilationUnitSPI, since they are really Service Provider Interface methods.

Some specific comments to the proposed API changes:

- API additions in ICompilationUnit:
All the additions are implementation details that don&apos;t belong to the model interface. They are only interesting for implementers of alternative languages, but not for clients that just use the Java model (isPrimary() can already be expressed as getOwner()==null). They also look quite dangerous. E.g. callers of getContents() have no clue about the lifecycle and can do anything with the char[].

- IJavaElement#getPrimaryElement(boolean):
Same as above, this only seems to be used for a tiny performance improvement. That&apos;s fine for an internal implementation, but we should not pollute client APIs with that.

- JavaCore#createCompilationUnit(IPackageFragment, String, WorkingCopyOwner):
I don&apos;t see any documentation about the lifecycle for such CUs. I guess clients should not use that method, so if it&apos;s really necessary as a separate API, it should be in a separate package that&apos;s reserved for &quot;language extensions&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847009</commentid>
    <comment_count>72</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2010-11-23 09:25:33 -0500</bug_when>
    <thetext>I also have some concerns about &quot;silent&quot; API breakages introduced by new implementations of ICompilationUnit:
- Will the alternative implementations behave exactly the same as the existing implementation? If not, that will break all existing clients that rely on the APIs and expect e.g. only the kinds of children that are specified in the current APIs. 
- What about the DOM AST, ToolFactory with its scanners, formatters, etc.? Existing clients of JDT Core (e.g. JDT UI, but also others) rely on these tools to implement the Java language and will break if the returned elements don&apos;t follow that spec.

To me, it actually looks like the approach that tries to reuse existing interfaces for other languages will inevitably break existing clients. I think a better approach would be to leave the existing APIs as they are, but add common abstractions on top of them (as a generalization), e.g. IGenericCompilationUnit which will be implemented by ICompilationUnit, IAspectJCompilationUnit, IGroovyCompilationUnit, etc. Clients can then gradually move to use the generic APIs if they don&apos;t depend on a specific language.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847026</commentid>
    <comment_count>73</comment_count>
    <who name="Miles Sabin">miles</who>
    <bug_when>2010-11-23 09:52:16 -0500</bug_when>
    <thetext>(In reply to comment #72)
&gt; To me, it actually looks like the approach that tries to reuse existing
&gt; interfaces for other languages will inevitably break existing clients. I think
&gt; a better approach would be to leave the existing APIs as they are, but add
&gt; common abstractions on top of them (as a generalization), e.g.
&gt; IGenericCompilationUnit which will be implemented by ICompilationUnit,
&gt; IAspectJCompilationUnit, IGroovyCompilationUnit, etc. Clients can then
&gt; gradually move to use the generic APIs if they don&apos;t depend on a specific
&gt; language.

The Scala tooling for Eclipse uses run time weaving to achieve a similar effect to this patch. We do introduce new implementations of IJavaElement (eg. to correspond to Scala traits), and despite the risks you quite rightly describe, this has worked quite well.

Crucially it has meant that many *existing* JDT clients have been able to work against Scala and mixed Scala/Java projects without needing to be updated with Scala-specific support (the JUnit tooling for example). This has been one of the primary goals of attempting the integration of the SDT with the JDT and one which has been of enormous benefit to the SDT&apos;s user community.

To be clear, my position is that if it&apos;s only users of alternative JVM language tooling who are at risk of the issues you describe, then this is an acceptable price for those users and the alternative language tooling developers to pay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847043</commentid>
    <comment_count>74</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-11-23 10:13:00 -0500</bug_when>
    <thetext>(In reply to comment #73)
&gt; To be clear, my position is that if it&apos;s only users of alternative JVM language
&gt; tooling who are at risk of the issues you describe, then this is an acceptable
&gt; price for those users and the alternative language tooling developers to pay.

Very well put. I couldn&apos;t agree more.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847050</commentid>
    <comment_count>75</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-11-23 10:22:13 -0500</bug_when>
    <thetext>I don&apos;t see us removing restrictions or adding new API to 3.x if it&apos;s not
directly beneficial to JDT itself or if it breaks clients. As Markus pointed
out, clients can already subclass most things since the restrictions are
normally spelled out in the Javadoc and not via &apos;final&apos; modifier. What we might
do in 3.x is change/open some places that heavily hurt the current extenders,
e.g. by opening a private internal method or by using an interface instead of
casting to our implementation.

The main effort has to be done in the e4 space where we can investigate a
solution that works for the extenders without harming the existing clients of
JDT. I like Markus&apos;s idea of putting the non-pure Java specific APIs into
separate plug-ins or fragments.

&gt;APIs on ICompilationUnit could be moved to an internal
&gt;interface ICompilationUnitSPI, since they are really Service Provider Interface
&gt;methods.
See also http://wiki.eclipse.org/SPI_description.
At least for 3.x the service provider approach might be a good start.


&gt;To be clear, my position is that if it&apos;s only users of alternative JVM language
&gt;tooling who are at risk of the issues you describe, then this is an acceptable
&gt;price for those users and the alternative language tooling developers to pay.
Yes, I agree as long as that tooling does not expect APIs to be opened up. If JDT Core officially allows to extend ICompilationUnit for example, then this becomes part of the overall contract and it means that JDT Core has to support that contract with all its existing APIs. However, as we all already learned, this will not be possible without breakage. Therefore, the SPI approach seems like a promising path. And in e4 we need to evaluate how bad that breakage would be and whether this can be tolerated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847067</commentid>
    <comment_count>76</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-11-23 10:39:08 -0500</bug_when>
    <thetext>(In reply to comment #72)
&gt; To me, it actually looks like the approach that tries to reuse existing
&gt; interfaces for other languages will inevitably break existing clients. 

For the Object Teams case this is &quot;almost true&quot;: by adding new kinds of 
elements/nodes to model and AST we *would* indeed break, e.g., the JDT/UI.
However, these breakages we currently avoid by adapting the JDT/UI
using OT/Equinox. In my experience each individual adaptation is close
to trivial and I will try and collect this experience into something useful
for the e4 effort.

&gt; I think
&gt; a better approach would be to leave the existing APIs as they are, but add
&gt; common abstractions on top of them (as a generalization), e.g.
&gt; IGenericCompilationUnit which will be implemented by ICompilationUnit,
&gt; IAspectJCompilationUnit, IGroovyCompilationUnit, etc. Clients can then
&gt; gradually move to use the generic APIs if they don&apos;t depend on a specific
&gt; language.

OK, such generalization would be extremely cool on the long run.
For Object Teams only a few assumptions that are associated with 
ICompilationUnit et al would need to be removed from the contract.

A typical example from the AST world is: clients assume that the value
from ASTNode.getNodeType() is one of a fixed set of constants.
For Object Teams we added another group of nodes below BodyDeclaration.
If clients took minimal precaution that unexpected node types could be
encountered, it would be a lot easier to systematically extend the Java
tooling. I guess that the situation for pointcuts and advice in AspectJ
is similar. The mileage for languages that are not directly based on Java
may vary, I don&apos;t know.

So perhaps, this distinction is worth reflecting in the API: 
- one for languages that extend Java with new elements
- one for languages that are similar to Java without being a true superset</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1847335</commentid>
    <comment_count>77</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2010-11-23 19:53:59 -0500</bug_when>
    <thetext>(In reply to comment #71)
&gt; - API additions in ICompilationUnit:
&gt; - IJavaElement#getPrimaryElement(boolean):
&gt; - JavaCore#createCompilationUnit(IPackageFragment, String, WorkingCopyOwner):


Markus, thanks for having a look at the patch.  I agree that the methods you list are more about implementation details and should not become API.  That is why I like yours and Dani&apos;s approach to labelling some pieces SPI, which gives all of us more flexibility.  

The extenders of JDT that I am aware of are a small group and we all follow changes to JDT closely.  SPI breakages are not something that we would worry about.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1955619</commentid>
    <comment_count>78</comment_count>
    <who name="Eric Molitor">eric</who>
    <bug_when>2011-06-24 13:34:38 -0400</bug_when>
    <thetext>It&apos;s been six months or so since the last comment. Any progress in this area? Anything to look forward to in e4 that might surface in 4.2?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1957971</commentid>
    <comment_count>79</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-06-29 14:45:47 -0400</bug_when>
    <thetext>(In reply to comment #78)
&gt; It&apos;s been six months or so since the last comment. Any progress in this area?
&gt; Anything to look forward to in e4 that might surface in 4.2?
A git repo will be created for users that have commit rights to e4. Boris created a git repo that contains the jdt.core source from 3.7M7. I think we should start from 3.7.0 source.
We will need to merge back into this repo all the Java 7 related work when ready.

But that repo should be useful to start investigating changes for scala, groovy developers.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1979583</commentid>
    <comment_count>80</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-16 15:28:22 -0400</bug_when>
    <thetext>The following git repo has been created for this work.

git clone ssh://&lt;your-committer-id&gt;@git.eclipse.org/gitroot/e4/org.eclipse.jdt.core</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988385</commentid>
    <comment_count>81</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-09-02 10:36:49 -0400</bug_when>
    <thetext>Anyone is using this git repository for experiments ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046089</commentid>
    <comment_count>82</comment_count>
    <who name="David Festal">david.festal</who>
    <bug_when>2012-01-04 09:47:21 -0500</bug_when>
    <thetext>Hello,

Please could you tell the simplest way to use this patch and be able to develop IDE for JVM-based language based on JDT ?

I had a look a the GIT repo you have setup, but don&apos;t really know what to do with it : is there already a branch or tag that integrates this patch ?

I would like to be able to get this patch applied on the last Indigo codebase.

Should I create a Patched JDT fragment, just as it has been done for Groovy-Eclipse IDE ?

More general questions : 

Is there any chance / plan that this patch (or an equivalent one) would be integrated in a next Eclipse JDT release ?

How is this patch (and the related requirement for JVM-based language support) related to DLTK ? 
Aren&apos;t there some similarities (apart from the fact that DLTK can be for Non-Java languages also) ? 
Or is DLTK with JDT bridges the officially recommended way to build IDEs for JVM-based languages ?

Thanks for your answers.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046221</commentid>
    <comment_count>83</comment_count>
    <who name="Andrew Eisenberg">andrew.eisenberg</who>
    <bug_when>2012-01-04 12:20:05 -0500</bug_when>
    <thetext>&gt; Please could you tell the simplest way to use this patch and be able to develop
&gt; IDE for JVM-based language based on JDT ?

The patch in this bug report is just a suggestion and I do not think it is being actively used.

&gt; I had a look a the GIT repo you have setup, but don&apos;t really know what to do
&gt; with it : is there already a branch or tag that integrates this patch ?

As far as I know, no one has had a chance to do anything with the git repo.

&gt; I would like to be able to get this patch applied on the last Indigo codebase.
&gt; 
&gt; Should I create a Patched JDT fragment, just as it has been done for
&gt; Groovy-Eclipse IDE ?

A more consumable way of extending JDT might be to use the approach that AJDT and ScalaIDE are using, where AspectJ is used to weave into Eclipse.  It is a less invasive approach and probably more stable over time.  If your compiler already handles interdependencies with Java, then this is definitely a better way to go.

&gt; More general questions : 
&gt; 
&gt; Is there any chance / plan that this patch (or an equivalent one) would be
&gt; integrated in a next Eclipse JDT release ?

I have not had any time to work on this unfortunately.  I do not know if there is anyone else who has.

&gt; How is this patch (and the related requirement for JVM-based language support)
&gt; related to DLTK ? 
&gt; Aren&apos;t there some similarities (apart from the fact that DLTK can be for
&gt; Non-Java languages also) ? 
&gt; Or is DLTK with JDT bridges the officially recommended way to build IDEs for
&gt; JVM-based languages ?

DLTK does not allow any cross compilation with Java.  If you require circular dependencies between your language and Java code DLTK (or similar frameworks) will not be sufficient.

This bug report is not the best place to have this discussion.  Send a message to the AJDT-dev mailing list https://dev.eclipse.org/mailman/listinfo/ajdt-dev and we can talk more.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2064276</commentid>
    <comment_count>84</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2012-02-10 12:35:35 -0500</bug_when>
    <thetext>(In reply to comment #83)
&gt; &gt; I would like to be able to get this patch applied on the last Indigo codebase.
&gt; &gt; 
&gt; &gt; Should I create a Patched JDT fragment, just as it has been done for
&gt; &gt; Groovy-Eclipse IDE ?

Patched org.eclipse.jdt.core bundles are evil: ObjectTeams provides one, Groovy-Eclipse provides one, and some features depdend on a specific official release of JDT. And you can only have one instance of this bundle running at a given time.
So you should really avoid patching JDT. But adding fragments (in the OSGi meaning of fragments) is fine.
 
&gt; A more consumable way of extending JDT might be to use the approach that AJDT
&gt; and ScalaIDE are using, where AspectJ is used to weave into Eclipse.  It is a
&gt; less invasive approach and probably more stable over time.  If your compiler
&gt; already handles interdependencies with Java, then this is definitely a better
&gt; way to go.

Agreed too (from a consumer POV).
However, I am not sure of the behavior of several weaving into the same class. Did anybody already experiment this?

&gt; &gt; Is there any chance / plan that this patch (or an equivalent one) would be
&gt; &gt; integrated in a next Eclipse JDT release ?
&gt; 
&gt; I have not had any time to work on this unfortunately.  I do not know if there
&gt; is anyone else who has.

Do you have an estimation how much effort is remaining before this get ready to be part of JDT?</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>32520</attachid>
            <date>2006-01-05 08:53:00 -0500</date>
            <delta_ts>2006-11-10 09:59:45 -0500</delta_ts>
            <desc>centralise the creation of compilation units</desc>
            <filename>36939-centralisedCUcreation.patch</filename>
            <type>text/plain</type>
            <size>6876</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>32899</attachid>
            <date>2006-01-12 04:41:00 -0500</date>
            <delta_ts>2006-11-10 09:59:45 -0500</delta_ts>
            <desc>implementation of a proposed compilation unit provider</desc>
            <filename>36939-CU-provider.patch</filename>
            <type>text/plain</type>
            <size>17184</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>53622</attachid>
            <date>2006-11-10 09:59:00 -0500</date>
            <delta_ts>2010-11-16 15:10:50 -0500</delta_ts>
            <desc>updated patch for 3.3M3</desc>
            <filename>bug36939-patch.txt</filename>
            <type>text/plain</type>
            <size>21801</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>53623</attachid>
            <date>2006-11-10 10:01:00 -0500</date>
            <delta_ts>2006-11-17 06:40:19 -0500</delta_ts>
            <desc>example provider implmentation</desc>
            <filename>org.eclipse.foo.zip</filename>
            <type>application/save</type>
            <size>4933</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>53624</attachid>
            <date>2006-11-10 10:03:00 -0500</date>
            <delta_ts>2010-11-16 15:12:11 -0500</delta_ts>
            <desc>project to use with example provider implementation</desc>
            <filename>FooTest.zip</filename>
            <type>application/save</type>
            <size>752</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>54061</attachid>
            <date>2006-11-17 06:39:00 -0500</date>
            <delta_ts>2010-11-16 15:11:06 -0500</delta_ts>
            <desc>updated patch to make jdt.core use ICompilationUnit</desc>
            <filename>bug36939-ICU-patch.txt</filename>
            <type>text/plain</type>
            <size>121123</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>54062</attachid>
            <date>2006-11-17 06:40:00 -0500</date>
            <delta_ts>2010-11-16 15:12:24 -0500</delta_ts>
            <desc>updated example provider to work with latest jdt.core patch</desc>
            <filename>org.eclipse.foo.zip</filename>
            <type>application/save</type>
            <size>11240</size>
            <attacher name="Matt Chapman">mpchapman</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>111818</attachid>
            <date>2008-09-05 10:04:00 -0400</date>
            <delta_ts>2010-11-19 15:18:07 -0500</delta_ts>
            <desc>errors list</desc>
            <filename>errors.txt</filename>
            <type>text/plain</type>
            <size>5377</size>
            <attacher name="Jacek Pospychala">jacek.pospychala</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>112580</attachid>
            <date>2008-09-15 14:38:00 -0400</date>
            <delta_ts>2008-09-23 16:32:22 -0400</delta_ts>
            <desc>update patch for 3.5M1</desc>
            <filename>patch_cuprovider3.5M1.txt</filename>
            <type>text/plain</type>
            <size>108617</size>
            <attacher name="Andrew Eisenberg">andrew.eisenberg</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>112581</attachid>
            <date>2008-09-15 14:39:00 -0400</date>
            <delta_ts>2010-11-19 15:18:07 -0500</delta_ts>
            <desc>Update test project for Eclipse 3.5M1</desc>
            <filename>org.eclipse.foo.zip</filename>
            <type>application/zip</type>
            <size>12168</size>
            <attacher name="Andrew Eisenberg">andrew.eisenberg</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>113298</attachid>
            <date>2008-09-23 16:32:00 -0400</date>
            <delta_ts>2010-11-16 15:11:44 -0500</delta_ts>
            <desc>Patch recreated with comments on API and a test case</desc>
            <filename>patch_cuprovider3.5M2.txt</filename>
            <type>text/plain</type>
            <size>130832</size>
            <attacher name="Andrew Eisenberg">andrew.eisenberg</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>183321</attachid>
            <date>2010-11-17 12:17:00 -0500</date>
            <delta_ts>2010-11-19 15:18:07 -0500</delta_ts>
            <desc>Updated patch for Eclipse 3.7 head</desc>
            <filename>compilationUnitProviderPatchFor37.txt</filename>
            <type>text/plain</type>
            <size>127695</size>
            <attacher name="Andrew Eisenberg">andrew.eisenberg</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>183501</attachid>
            <date>2010-11-19 15:18:00 -0500</date>
            <delta_ts>2010-11-19 15:18:07 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>patch_36939.txt</filename>
            <type>text/plain</type>
            <size>152619</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>14132</bug_id>
          
          <creation_ts>2002-04-18 12:50:00 -0400</creation_ts>
          <short_desc>[javadoc][assist] JavaDoc code assist on after @see may propose super method when overriding</short_desc>
          <delta_ts>2007-06-21 09:37:18 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>2.0</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 2000</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erich Gamma">erich_gamma</reporter>
          <assigned_to name="David Audel">david_audel</assigned_to>
          <cc>eric_jodet</cc>
    
    <cc>frederic_fusier</cc>
    
    <cc>philippe_mulet</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>44248</commentid>
    <comment_count>0</comment_count>
    <who name="Erich Gamma">erich_gamma</who>
    <bug_when>2002-04-18 12:50:18 -0400</bug_when>
    <thetext>JUnit smoke test setup:
Type @see &lt;code assist&gt;

Code assist inserts TestCase automatically. This is not correct there are many 
more types available to choose from.

Typing @see T&lt;code assist&gt; shows the correct proposals.

Not critical, but should understand what is going on here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>45019</commentid>
    <comment_count>1</comment_count>
    <who name="Martin Aeschlimann">aeschli</who>
    <bug_when>2002-04-22 06:19:22 -0400</bug_when>
    <thetext>Same behaviour when doing code assist in

public class A {
  | code assist here
}

many methods offered, but only one type.
correct would be to show all types, but as this mught be too expensive, no 
types at all is ok. but only one type is stange.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>45470</commentid>
    <comment_count>2</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2002-04-23 05:34:26 -0400</bug_when>
    <thetext>We limitate to certain types (toplevels and members) in this compilation unit.
Moving to later for further concerns.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>523316</commentid>
    <comment_count>3</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2005-08-25 06:50:36 -0400</bug_when>
    <thetext>Reopen to reassign</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>532420</commentid>
    <comment_count>4</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2005-09-19 04:39:44 -0400</bug_when>
    <thetext>Here, we have to deal with a completion on empty token on type reference.
As in this case completion engine works the same in javadoc than in java code
(and this will not change even after transfer to JDT/Core), fix will highly
depend on bug 102875 fix...
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>543592</commentid>
    <comment_count>5</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2005-10-11 05:03:30 -0400</bug_when>
    <thetext>One proposal which may be specific to completion in Javadoc might be to propose
overridden method while completing in an overriding method.

For example:
class X {
  void foo() {}
}
class Y extends X {
  /**
   * @see |
   */
  void foo() {}
}

Then code assist may propose &quot;foo() - X&quot; and insert:
* @see X#foo()
in this case...
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>653734</commentid>
    <comment_count>6</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2006-03-30 08:22:35 -0500</bug_when>
    <thetext>Defer post 3.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1004707</commentid>
    <comment_count>7</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-06-21 09:34:03 -0400</bug_when>
    <thetext>Reopen as LATER is deprecated...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1004710</commentid>
    <comment_count>8</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-06-21 09:36:38 -0400</bug_when>
    <thetext>bug 102875 was fixed but didn&apos;t help for this bug as it was only for local types...
</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>75471</bug_id>
          
          <creation_ts>2004-10-01 12:19:00 -0400</creation_ts>
          <short_desc>[prefs] no re-compile when loading settings</short_desc>
          <delta_ts>2016-01-14 12:47:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.0</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>46780</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="DJ Houghton">dj.houghton</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>aeschli</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>markus_keller</cc>
    
    <cc>petavy</cc>
    
    <cc>philippe_mulet</cc>
    
    <cc>preuss</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>349415</commentid>
    <comment_count>0</comment_count>
    <who name="DJ Houghton">dj.houghton</who>
    <bug_when>2004-10-01 12:19:48 -0400</bug_when>
    <thetext>build i0928

- User1 creates project A (no shared compiler settings)
- User1 releases A to repo
- User2 loads A from repo
- everything in sync
- User1 sets per-project compiler settings on A
- User1 releases /.settings/jdt.core file to repo
- User2 loads new file

Expected results:
- compiler would use new per-project settings
- build will happen to take advantage of new settings

Actual results:
- the properties page for A shows that it is now using per-project settings
- the project isn&apos;t automatically re-compiled so the new settings don&apos;t take effect

Not sure what the problem is here...there is probably a missing notification or
something similar.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>436484</commentid>
    <comment_count>1</comment_count>
    <who name="DJ Houghton">dj.houghton</who>
    <bug_when>2005-04-22 14:58:02 -0400</bug_when>
    <thetext>Frederic, I just tried this with build i0420-1200 and its still a problem. Any
ideas?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>436698</commentid>
    <comment_count>2</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2005-04-23 11:23:58 -0400</bug_when>
    <thetext>I&apos;ve verified that DeltaProcessor notifies its listeners when receiving
.settings/org.eclipse.jdt.core.prefs resource delta. However none of this
listener starts a build of project whose settings were modified. 
I&apos;ve to talk with Jerome to see if this is intentional or something we&apos;re
currently missing...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>538236</commentid>
    <comment_count>3</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2005-09-29 06:51:45 -0400</bug_when>
    <thetext>I just hit this bug, replacing junit project (from sourceforge) with its
Version4 branch, and we missed the switch to 1.5 source level...
Definitely inconsistent. 

Only workaround I found is to close/reopen the offending project.
Frederic - pls investigate where the bug lies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>538237</commentid>
    <comment_count>4</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2005-09-29 07:07:31 -0400</bug_when>
    <thetext>Talking with Jerome, it works as designed: DeltaProcessor just creates delta to
update the model. It is not intended to launch builds...

As properties page shows that project uses new per-project settings, that means
that changes done by user 2 are well taken into account while getting file from
repository.

So, it sounds not like a Platform issue =&gt; put back in JDT/Core land.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>804589</commentid>
    <comment_count>5</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-10-05 18:11:33 -0400</bug_when>
    <thetext>Couldn&apos;t a pref refresh force a touch of the project ? So next build would see the changes possibly (maybe need to discard build state also).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>805109</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2006-10-06 13:49:35 -0400</bug_when>
    <thetext>*** Bug 92614 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>822342</commentid>
    <comment_count>7</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2006-11-02 12:29:11 -0500</bug_when>
    <thetext>*** Bug 163236 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>822737</commentid>
    <comment_count>8</comment_count>
    <who name="Ilja Preuss">preuss</who>
    <bug_when>2006-11-03 03:33:54 -0500</bug_when>
    <thetext>Why has this the severity &quot;enhancement&quot;??? Isn&apos;t this an obvious (minor) *defect*?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>882739</commentid>
    <comment_count>9</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-11 03:44:44 -0500</bug_when>
    <thetext>*** Bug 115528 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>882767</commentid>
    <comment_count>10</comment_count>
      <attachid>58731</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-11 06:32:24 -0500</bug_when>
    <thetext>Created attachment 58731
Disabled test case

Added disabled test case:
org.eclipse.jdt.core.tests.builder.BasicBuildTests#_testUpdatePreferences()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>882776</commentid>
    <comment_count>11</comment_count>
      <attachid>58732</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-11 06:46:59 -0500</bug_when>
    <thetext>Created attachment 58732
Proposed patch

This patch is merged with the fix bug 172345.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>888616</commentid>
    <comment_count>12</comment_count>
      <attachid>59354</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-20 03:55:31 -0500</bug_when>
    <thetext>Created attachment 59354
New proposed patch

Create new patch on top of code released for bug 172345</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>888621</commentid>
    <comment_count>13</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-20 04:01:59 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; *** Bug 92614 has been marked as a duplicate of this bug. ***
&gt; 
Bug 92614 was not a duplicate of this bug. It was a duplicate of bug 172345 instead...

(In reply to comment #9)
&gt; *** Bug 115528 has been marked as a duplicate of this bug. ***
&gt; 
Bug 115528 was not a duplicate of this bug! It was fixed in 3.3 M1 while rewriting classpath validation...
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>888637</commentid>
    <comment_count>14</comment_count>
      <attachid>59354</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-02-20 04:43:36 -0500</bug_when>
    <thetext>Comment on attachment 59354
New proposed patch

Cannot be released like this as it would build the project twice if user modified preferences through UI...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1047989</commentid>
    <comment_count>15</comment_count>
      <attachid>76467</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-08-20 13:28:24 -0400</bug_when>
    <thetext>Created attachment 76467
Final proposed patch

This patch fixes last problem of multiple build while changing compiler preferences using UI way through preferences page.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1047998</commentid>
    <comment_count>16</comment_count>
      <attachid>76470</attachid>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-08-20 13:42:11 -0400</bug_when>
    <thetext>Created attachment 76470
JDT/UI patch to show new behavior need with proposed final patch

Martin,

With final proposed patch https://bugs.eclipse.org/bugs/attachment.cgi?id=76467 
I think we need to slightly change the dialog asking user to perform a full build when workspace preference autobuild is on.

In this case, the message dialog should not propose &apos;No&apos; button, as if the new value is applied, JDT/Core preference file will be modified and then trigger a incremental build.

This attached patch (based on version v20070814-0800) gives a &quot;naive&quot; simple example for the expected change.

Please, let me know if you&apos;re OK with this change and when we can synchronize our code release, thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1048466</commentid>
    <comment_count>17</comment_count>
    <who name="Martin Aeschlimann">aeschli</who>
    <bug_when>2007-08-21 06:20:21 -0400</bug_when>
    <thetext>You only need to recompile the project, right? In the preference pages we also know that formatter settings changes don&apos;t require a rebuild.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1048500</commentid>
    <comment_count>18</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-08-21 07:20:19 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; You only need to recompile the project, right? In the preference pages we also
&gt; know that formatter settings changes don&apos;t require a rebuild.
&gt; 
Right
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1048602</commentid>
    <comment_count>19</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-08-21 10:07:31 -0400</bug_when>
    <thetext>I talked with Jerome about this patch and it appears that it would finally trigger a full  build of the project even if user had answered &apos;No&apos; in the UI dialog (in case of auto-build off). This would be a breaking change with current behavior and surely expose us to future major complain.

So, the solution to fix this issue seems to depend on bug 46780 fix...
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1095577</commentid>
    <comment_count>20</comment_count>
    <who name="DJ Houghton">dj.houghton</who>
    <bug_when>2007-11-06 11:18:38 -0500</bug_when>
    <thetext>*** Bug 208903 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>58731</attachid>
            <date>2007-02-11 06:32:00 -0500</date>
            <delta_ts>2007-02-11 06:46:59 -0500</delta_ts>
            <desc>Disabled test case</desc>
            <filename>v00.txt</filename>
            <type>text/plain</type>
            <size>2637</size>
            <attacher name="Frederic Fusier">frederic_fusier</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>58732</attachid>
            <date>2007-02-11 06:46:00 -0500</date>
            <delta_ts>2007-02-20 03:55:31 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>v00.txt</filename>
            <type>text/plain</type>
            <size>11343</size>
            <attacher name="Frederic Fusier">frederic_fusier</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>59354</attachid>
            <date>2007-02-20 03:55:00 -0500</date>
            <delta_ts>2007-02-20 04:43:36 -0500</delta_ts>
            <desc>New proposed patch</desc>
            <filename>v02.txt</filename>
            <type>text/plain</type>
            <size>4539</size>
            <attacher name="Frederic Fusier">frederic_fusier</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>76467</attachid>
            <date>2007-08-20 13:28:00 -0400</date>
            <delta_ts>2007-08-21 10:22:55 -0400</delta_ts>
            <desc>Final proposed patch</desc>
            <filename>v06.txt</filename>
            <type>text/plain</type>
            <size>5180</size>
            <attacher name="Frederic Fusier">frederic_fusier</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>76470</attachid>
            <date>2007-08-20 13:42:00 -0400</date>
            <delta_ts>2007-08-20 13:42:11 -0400</delta_ts>
            <desc>JDT/UI patch to show new behavior need with proposed final patch</desc>
            <filename>v05-ui-v20070814-0800.txt</filename>
            <type>text/plain</type>
            <size>2196</size>
            <attacher name="Frederic Fusier">frederic_fusier</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>108208</bug_id>
          
          <creation_ts>2005-08-27 21:59:00 -0400</creation_ts>
          <short_desc>[javadoc] Ignore missing Javadoc comments on JUnit test methods</short_desc>
          <delta_ts>2016-01-14 12:47:16 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>helpwanted</keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Piotr Kaminski">piotr</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>frederic_fusier</cc>
    
    <cc>rcleveng</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>524607</commentid>
    <comment_count>0</comment_count>
    <who name="Piotr Kaminski">piotr</who>
    <bug_when>2005-08-27 21:59:41 -0400</bug_when>
    <thetext>When the compiler option to warn of missing Javadoc comments is turned on, even
when restricted to public members only, it also flags all the test* JUnit test
methods.  Since those rarely need to be commented, it would be nice if they
could be excluded from being checked.  Either an extra sub-checkmark (like the
one for &quot;check overriding and implementing methods&quot;) or perhaps a fancier
regexp-based exclusion option would be nice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>653955</commentid>
    <comment_count>1</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2006-03-30 11:14:26 -0500</bug_when>
    <thetext>Defer post 3.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1004802</commentid>
    <comment_count>2</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-06-21 10:22:57 -0400</bug_when>
    <thetext>Reopen as LATER is deprecated...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1324792</commentid>
    <comment_count>3</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2008-09-04 12:13:55 -0400</bug_when>
    <thetext>Ownership has changed for the javadoc comments bugs, but I surely will not have enough time to fix your bug during the 3.5 development process, hence set its priority to P5.
Please provide a patch if you definitely need the bug to be fixed in this
version and I&apos;ll have a look at it...
TIA
</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>170580</bug_id>
          
          <creation_ts>2007-01-15 23:28:00 -0500</creation_ts>
          <short_desc>[formatter] extraneous white space in &lt;pre&gt; one-line block</short_desc>
          <delta_ts>2016-02-02 14:31:25 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>helpwanted</keywords>
          <priority>P5</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Maxime Daniel">maxime_daniel</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>863994</commentid>
    <comment_count>0</comment_count>
    <who name="Maxime Daniel">maxime_daniel</who>
    <bug_when>2007-01-15 23:28:26 -0500</bug_when>
    <thetext>Build M20060921-0945.
This is fup on bug 99738. The effect of the formatter on the example given in comment #6 is the following:
	/*
&lt;pre&gt;
&amp;lt;test&amp;gt;
&lt;/pre&gt;
	 */

becomes:
	/*
	 * &lt;pre&gt; &amp;lt;test&amp;gt; &lt;/pre&gt;
	 */

Notice the extra white space between the &lt;pre&gt; and the first &amp;, which will result into a leading white space in the rendered HTML result.
Unlike bug 99738, further format operations no more shift the result to the right.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1314060</commentid>
    <comment_count>1</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2008-08-18 08:07:40 -0400</bug_when>
    <thetext>Ownership has changed for the formatter, but I surely will not have enough time to fix your bug during the 3.5 development process, hence set its priority to P5.
Please provide a patch if you definitely need the bug to be fixed in this version and I&apos;ll have a look at it...
TIA
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1806165</commentid>
    <comment_count>2</comment_count>
    <who name="Jaime Hablutzel">hablutzel1</who>
    <bug_when>2010-08-29 01:23:55 -0400</bug_when>
    <thetext>What is the expected behaviour after formatting something like:

&lt;pre&gt;\n&amp;lt;test&amp;gt;\n&lt;/pre&gt;

Is this?

&lt;pre&gt;&amp;lt;test&amp;gt;&lt;/pre&gt;

What about and the extra space after the first newline?

&lt;pre&gt;\n &amp;lt;test&amp;gt;\n&lt;/pre&gt;

I think I could create a patch after clarifying this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1806425</commentid>
    <comment_count>3</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2010-08-30 06:34:46 -0400</bug_when>
    <thetext>I think this is no longer a problem using 3.6.0...
The following test case:
public class X {
    /**
&lt;pre&gt;
&amp;lt;test&amp;gt;
&lt;/pre&gt;
     */
	public void foo() {}
}

Is currently formatted as follow:

public class X {
	/**
	 * &lt;pre&gt;
	 * &amp;lt;test&amp;gt;
	 * &lt;/pre&gt;
	 */
	public void foo() {
	}
}

I thought it was the correct behavior while fixing bug 305518. However, it seems that javadoc does not behaves the same as it does not generate exactly the same thing for:
    /**
&lt;pre&gt;
&amp;lt;test&amp;gt;
&lt;/pre&gt;
     */
than for:
	/**
	 * &lt;pre&gt;
	 * &amp;lt;test&amp;gt;
	 * &lt;/pre&gt;
	 */

The difference is a space before the line in the generated method detail... Hence, it seems that javadoc considers that the space after the &apos;*&apos; belongs to the line, although our formatter does not...

So, we can use this bug for this peculiar issue follow-up although the current formatter behavior is now different than the one described in comment 0...

Of course a patch (including JUnit tests) is more than welcome :-)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>216926</bug_id>
          
          <creation_ts>2008-01-29 11:16:00 -0500</creation_ts>
          <short_desc>[search] Search for LinkDescription yielding inaccurate matches.</short_desc>
          <delta_ts>2016-01-14 12:48:34 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>needinfo</keywords>
          <priority>P5</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Pash">pashupat</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>Olivier_Thomann</cc>
    
    <cc>vtrivedi</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1144436</commentid>
    <comment_count>0</comment_count>
    <who name="Pash">pashupat</who>
    <bug_when>2008-01-29 11:16:41 -0500</bug_when>
    <thetext>Build ID: Eclipse 3.4

Steps To Reproduce:
1. Import org.eclipse.core.resources plugin as project with source.
2. Perform a search for &quot;org.eclipse.core.internal.resources.LinkDescription&quot; using SearchEngine.search(..)
3. Review the results received in the search requestor&apos;s acceptSearchMatch(..).
4. For the matches found, match.getAccuracy() returns &quot;inaccurate&quot; in all but 2 cases (LinkDescription and FileSystemResourceManager).

More information:
Search workspace for all references to LinkDescription and you&apos;ll find there are many more in the org.eclipse.core.internal.resources package.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1150641</commentid>
    <comment_count>1</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2008-02-06 03:05:53 -0500</bug_when>
    <thetext>I&apos;m not sure to really understand the problem. Can you give me a code snippet including the call to SearchEngine.search(...) to have a precise idea of what are the parameters value and also the requestor you use to highlight the problem?

A JUnit test I can include in org.eclipse.jdt.core.tests.model.JavaSearchBugsTests directly would be, of course, the best thing which could help me to quickly investigate your problem :-)

Thanks
</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>294945</bug_id>
          
          <creation_ts>2009-11-12 03:22:00 -0500</creation_ts>
          <short_desc>Warn on return/throw in finally.</short_desc>
          <delta_ts>2014-07-30 17:13:01 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>helpwanted</keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="lhunath">lhunath</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>agorozco</cc>
    
    <cc>amj87.iitr</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>melbeltagy</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>universal1337</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1626609</commentid>
    <comment_count>0</comment_count>
    <who name="lhunath">lhunath</who>
    <bug_when>2009-11-12 03:22:01 -0500</bug_when>
    <thetext>User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5
Build Identifier: 

A warning should be added to discourage the use of return/throw from finally blocks since they cause any possible exception being thrown to get ignored.

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1626703</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2009-11-12 07:04:32 -0500</bug_when>
    <thetext>We already have a &quot;finally block does not complete normally&quot; warning, but that&apos;s only for unconditional return/throw, and not e.g. here:

		try {
			System.out.println(1);
		} finally {
			if (new Random().nextBoolean())
				throw new IllegalStateException();
			else if (new Object() == null)
				return;
		}

The problem with a new warning &quot;finally block may not complete normally&quot; is that it suggests a safety net but still cannot catch all cases. Any method call in the finally block can throw an exception, so this problem can still occur even if no return/throw statement is present in the finally block.

Low priority for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1626740</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-11-12 08:48:07 -0500</bug_when>
    <thetext>The purpose of the &quot;finally block may not complete normally&quot; warning is to catch simple cases where users might not know what is going on when adding a return or a throw statement inside a finally block.

When the user writes something like this:
        } finally {
            if (new Random().nextBoolean())
                throw new IllegalStateException();
            else if (new Object() == null)
                return;
        }

we can definitely assume that he/she knows the consequence of it.
No plan to address this.

If someone wants to provide a patch, we can review it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049909</commentid>
    <comment_count>3</comment_count>
    <who name="stephen nichols">universal1337</who>
    <bug_when>2012-01-13 01:37:00 -0500</bug_when>
    <thetext>This bug is currently being worked on and reviewed for a CS480 class at Cal Poly Pomona. Expect a submission within the next 10 weeks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050052</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-13 07:31:23 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; This bug is currently being worked on and reviewed for a CS480 class at Cal
&gt; Poly Pomona. Expect a submission within the next 10 weeks.

Cool!

I think it would be a good idea if we get in touch as soon as you have
working sketch of your patch, so we can give feedback on the strategy
of your implementation.

Ideally you should also plan some review iterations after your final
submission - before the students dash away :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073373</commentid>
    <comment_count>5</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-02-29 23:50:47 -0500</bug_when>
    <thetext>Am working on this project along Stephen Nichols for our CS class. we are having a bit of trouble finding how to throw the warning as we are not too familiar with the jdt core. We think that the warning should be trhown in the TryStatement upon checking if there is an if statements following the finally block. I think we just hit a wall here! 

Any sugestions?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073377</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-01 00:11:58 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Am working on this project along Stephen Nichols for our CS class. we are
&gt; having a bit of trouble finding how to throw the warning as we are not too
&gt; familiar with the jdt core. We think that the warning should be trhown in the
&gt; TryStatement upon checking if there is an if statements following the finally
&gt; block. I think we just hit a wall here! 
&gt; 
&gt; Any sugestions?

Hi Ana, Stephen had mailed me on the same query and I had even replied back. Here is what I wrote - 
A new warning message is created using an IProblem (IProblem.java), and mapping it to a unique message in org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties  

Then the warning is given using the handle method inside a utility method in ProblemReporter. This utility method will be called from one of the analysCode(..) methods in a relevant ASTNode, such as TryStatement or MethodDeclaration (you&apos;ll need to figure out where to report this warning from). 

For an example, take a look at bug 365859, which adds new warnings.

Let me know if this is not clear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074085</commentid>
    <comment_count>7</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-01 22:45:10 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; Am working on this project along Stephen Nichols for our CS class. we are
&gt; &gt; having a bit of trouble finding how to throw the warning as we are not too
&gt; &gt; familiar with the jdt core. We think that the warning should be trhown in the
&gt; &gt; TryStatement upon checking if there is an if statements following the finally
&gt; &gt; block. I think we just hit a wall here! 
&gt; &gt; 
&gt; &gt; Any sugestions?
&gt; 
&gt; Hi Ana, Stephen had mailed me on the same query and I had even replied back.
&gt; Here is what I wrote - 
&gt; A new warning message is created using an IProblem (IProblem.java), and mapping
&gt; it to a unique message in
&gt; org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties 
&gt; 
&gt; Then the warning is given using the handle method inside a utility method in
&gt; ProblemReporter. This utility method will be called from one of the
&gt; analysCode(..) methods in a relevant ASTNode, such as TryStatement or
&gt; MethodDeclaration (you&apos;ll need to figure out where to report this warning
&gt; from). 
&gt; 
&gt; For an example, take a look at bug 365859, which adds new warnings.
&gt; 
&gt; Let me know if this is not clear.

Hello Ayushman,
 Yeah, he did share that email with me. Our idea is that the TryStatement will check the finally block and then it will search for an if statement within the block, if true then it will throw the warning. this is the part where we are stuck as we dont know how to analyze the finally block for if statements. we have tried to call the IfStatements and have analyseCode check the block but we keep getting errors when we test. 

thank you so much for you help!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074558</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 12:55:02 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; Hello Ayushman,
&gt;  Yeah, he did share that email with me. Our idea is that the TryStatement will
&gt; check the finally block and then it will search for an if statement within the
&gt; block, if true then it will throw the warning. this is the part where we are
&gt; stuck as we dont know how to analyze the finally block for if statements. we
&gt; have tried to call the IfStatements and have analyseCode check the block but we
&gt; keep getting errors when we test. 
&gt; 
&gt; thank you so much for you help!

First off, make sure you&apos;re workbench is correctly set up and you got the code from the right place. See http://wiki.eclipse.org/JDT_Core_Committer_FAQ for details on that.
Secondly, the best way to go forward is to learn how warnings are raised for other diagnostics in the compiler. For eg: use the code in comment 1 in a runtime workbench, and put a breakpoint in the method org.eclipse.jdt.internal.compiler.problem.ProblemReporter.finallyMustCompleteNormally(Block).
When the breakpoint hits, look at the stack trace. That should give you an idea of whats happening.

Also, I&apos;m not sure your approach - &quot;Our idea is that the TryStatement will check the finally block and then it will search for an if statement within the block, if true then it will throw the warning is correct.&quot;. Why does the presence of if statement matter? We need to check for return/throw in the finally block.

Since this is the first time you&apos;re contributing, it may be intimidating, but don&apos;t get demotivated. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074750</commentid>
    <comment_count>9</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-02 18:01:55 -0500</bug_when>
    <thetext>&gt; First off, make sure you&apos;re workbench is correctly set up and you got the code
&gt; from the right place. See http://wiki.eclipse.org/JDT_Core_Committer_FAQ for
&gt; details on that.
&gt; Secondly, the best way to go forward is to learn how warnings are raised for
&gt; other diagnostics in the compiler. For eg: use the code in comment 1 in a
&gt; runtime workbench, and put a breakpoint in the method
&gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.finallyMustCompleteNormally(Block).
&gt; When the breakpoint hits, look at the stack trace. That should give you an idea
&gt; of whats happening.
&gt; 
&gt; Also, I&apos;m not sure your approach - &quot;Our idea is that the TryStatement will
&gt; check the finally block and then it will search for an if statement within the
&gt; block, if true then it will throw the warning is correct.&quot;. Why does the
&gt; presence of if statement matter? We need to check for return/throw in the
&gt; finally block.
&gt; 
&gt; Since this is the first time you&apos;re contributing, it may be intimidating, but
&gt; don&apos;t get demotivated. :)

Thanks... we are working on it!!!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074752</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-02 18:04:03 -0500</bug_when>
    <thetext>Let me try to help with trying a little mind reading :)

Ana and Stephen saw the example in comment 1 and figured the compiler should do what a human reviewer would do: when encountering a &quot;finally&quot; block, search for an embedded &quot;if&quot; and inside search for a &quot;throw&quot;, right?

Unfortunately, such an approach is not a very good choice for the compiler because navigating through the AST just to detect this one warning can easily get too expensive performance-wise (the compiler has more work to do than just finding one kind of warning :) ).

For that reason, analysis is generally implemented in a way that each AST node is visited only once during each of of resolve, analyse, generate. On this way we need to collect all information to detect the bogus situation as we go.

Does this help to better understand the problem, and why you don&apos;t find any code examples similar to what you expect?

There is no obvious solution openly waiting to be implemented, but I suppose that class FinallyFlowContext will play a role in this. As Ayush suggested, observing the behavior for similar situations should help greatly. You may just want to add FinallyFlowContext to the list of interesting elements during observation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074758</commentid>
    <comment_count>11</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-02 18:20:40 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Let me try to help with trying a little mind reading :)
&gt; 
&gt; Ana and Stephen saw the example in comment 1 and figured the compiler should do
&gt; what a human reviewer would do: when encountering a &quot;finally&quot; block, search for
&gt; an embedded &quot;if&quot; and inside search for a &quot;throw&quot;, right?
&gt; 
&gt; Unfortunately, such an approach is not a very good choice for the compiler
&gt; because navigating through the AST just to detect this one warning can easily
&gt; get too expensive performance-wise (the compiler has more work to do than just
&gt; finding one kind of warning :) ).
&gt; 
&gt; For that reason, analysis is generally implemented in a way that each AST node
&gt; is visited only once during each of of resolve, analyse, generate. On this way
&gt; we need to collect all information to detect the bogus situation as we go.
&gt; 
&gt; Does this help to better understand the problem, and why you don&apos;t find any
&gt; code examples similar to what you expect?
&gt; 
&gt; There is no obvious solution openly waiting to be implemented, but I suppose
&gt; that class FinallyFlowContext will play a role in this. As Ayush suggested,
&gt; observing the behavior for similar situations should help greatly. You may just
&gt; want to add FinallyFlowContext to the list of interesting elements during
&gt; observation.

Hello Stephan,
   Yeah, you are a mind reader. I see... we where thinking straight out, small project, doing a recursive call but I understand how costly that will get with such a big scope. We are looking at some examples to better understand the process,  thank you so much for the help. we are learning a lot!!!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075648</commentid>
    <comment_count>12</comment_count>
      <attachid>212109</attachid>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-06 01:12:03 -0500</bug_when>
    <thetext>Created attachment 212109
Propose Patch (OrozcoNichols)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075698</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 03:43:53 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; Created attachment 212109 [details]
&gt; Propose Patch (OrozcoNichols)

Ok, I&apos;m glad you made a start. :)
1) Please read http://wiki.eclipse.org/JDT_Core_Committer_FAQ (the first part). Your code is coming from CVS, but we moved to Git sometime back. It would be awesome if you could re-set your workspace and provide a patch with the latest code so that your fix is correct and patch applies cleanly.\
2) The fix is not correct. Your test itself shows why it isn&apos;t. You should&apos;ve obtained an error on running your test snippet but there&apos;s no error, right? And thats because you&apos;re comparing for a &quot;throw&quot; string in the string that represents the finally block. But this won&apos;t work. In the compiler, we first parse the whole code and construct what we call an AST, which is a semantic tree representation of the code. Each method, each variable declaration, etc. is a node in the AST. We work with this AST in the compiler and not with the raw string of the code. So you actually need to check the AST for the presence of a ThrowStatement inside a finally block. You might want to read a basic compiler book and go through the JDT documentation or tutorials on the web to learn about that. 
3) We want a new warning here. As mentioned in comment 1, we already have &quot;finally block does not complete normally&quot;. Now we need a fresh warning &quot;finally block may not complete normally&quot; for this return/throw case. Thats why I asked you to look at bug 365859 to see how new warnings are introduced.

Again, do not feel demotivated. :)
The call this.finallyBlock.analyseCode(..) at line 237 in TryStatement is where you should focus. Inside the analyseCode(..) all statements in finally block will be analysed one by one. Debug carefully, and stop as soon as the throw statement is being analysed. Once a throw is found in finally, you may want to raise the new warning. So lets go step by step:
a) Do the above and work with the existing finallyMustCompleteNormally(this.finallyBlock) warning, and see if your code raise a warning for return/throw inside finally. If that works,
(b) Introduce a new warning and a create a new method to report it - something like finallyMayCompleteNormally(this.finallyBlock)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076062</commentid>
    <comment_count>14</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-06 12:01:16 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to comment #12)
&gt; &gt; Created attachment 212109 [details]
&gt; &gt; Propose Patch (OrozcoNichols)
&gt; 
&gt; Ok, I&apos;m glad you made a start. :)
&gt; 1) Please read http://wiki.eclipse.org/JDT_Core_Committer_FAQ (the first part).
&gt; Your code is coming from CVS, but we moved to Git sometime back. It would be
&gt; awesome if you could re-set your workspace and provide a patch with the latest
&gt; code so that your fix is correct and patch applies cleanly.\

Got it.

&gt; 2) The fix is not correct. Your test itself shows why it isn&apos;t. You should&apos;ve
&gt; obtained an error on running your test snippet but there&apos;s no error, right? And
&gt; thats because you&apos;re comparing for a &quot;throw&quot; string in the string that
&gt; represents the finally block. But this won&apos;t work. In the compiler, we first
&gt; parse the whole code and construct what we call an AST, which is a semantic
&gt; tree representation of the code. Each method, each variable declaration, etc.
&gt; is a node in the AST. We work with this AST in the compiler and not with the
&gt; raw string of the code. So you actually need to check the AST for the presence
&gt; of a ThrowStatement inside a finally block. You might want to read a basic
&gt; compiler book and go through the JDT documentation or tutorials on the web to
&gt; learn about that. 

ok, we&apos;ll look at that... we have been having a hard time following the AST flow but we&apos;ll keep trying.

&gt; 3) We want a new warning here. As mentioned in comment 1, we already have
&gt; &quot;finally block does not complete normally&quot;. Now we need a fresh warning
&gt; &quot;finally block may not complete normally&quot; for this return/throw case. Thats why
&gt; I asked you to look at bug 365859 to see how new warnings are introduced.

I see... 

&gt; 
&gt; Again, do not feel demotivated. :)
&gt; The call this.finallyBlock.analyseCode(..) at line 237 in TryStatement is where
&gt; you should focus. Inside the analyseCode(..) all statements in finally block
&gt; will be analysed one by one. Debug carefully, and stop as soon as the throw
&gt; statement is being analysed. Once a throw is found in finally, you may want to
&gt; raise the new warning. So lets go step by step:
&gt; a) Do the above and work with the existing
&gt; finallyMustCompleteNormally(this.finallyBlock) warning, and see if your code
&gt; raise a warning for return/throw inside finally. If that works,
&gt; (b) Introduce a new warning and a create a new method to report it - something
&gt; like finallyMayCompleteNormally(this.finallyBlock)

No, thank you for providing us with valuable feedback and for being so patient with us! We are definitely going to get this patch...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077672</commentid>
    <comment_count>15</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-08 23:38:48 -0500</bug_when>
    <thetext>Sorry to ask this question but I have been working on this for that past 5 days and I can&apos;t get this to work. I was able to get all my files from the git repository that by itself prove to be a challenge as am not too familiar with git. Now I just can&apos;t seem to be getting jUnit to work at all.. when I configure jUnit plug-in Test I can&apos;t seem to be putting the right Project name... I was running jUnit perfectly on the last build and
after many tutorials I just don&apos;t know what to do, Any Ideas?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078431</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-11 17:45:17 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; ... Now I just can&apos;t seem to be getting jUnit to work at all.. when I
&gt; configure jUnit plug-in Test I can&apos;t seem to be putting the right Project
&gt; name... I was running jUnit perfectly on the last build and
&gt; after many tutorials I just don&apos;t know what to do, Any Ideas?

Setting org.eclipse.jdt.core.tests.compiler doesn&apos;t work?

Do you have all required test projects in your workspace?

What does it say when you try to run the tests? Anything in the eclipse Console?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078464</commentid>
    <comment_count>17</comment_count>
    <who name="Ana Orozco">agorozco</who>
    <bug_when>2012-03-11 23:56:53 -0400</bug_when>
    <thetext>&gt; Setting org.eclipse.jdt.core.tests.compiler doesn&apos;t work?
&gt; 
&gt; Do you have all required test projects in your workspace?
&gt; 
&gt; What does it say when you try to run the tests? Anything in the eclipse
&gt; Console?

I can&apos;t configure a jUnit plug-in Test. I am trying to run the Annotation Test in the org.eclipse.jdt.core.test under compiler. I tried the following that I found on the link I was given:

Most tests are included in org.eclipse.jdt.core.tests.* projects.
If you create a new TestCase make sure to add it to the correct test suite.
To launch an existing test, open it in the editor, click on &quot;run configurations&quot; in the coolbar, and create a new &quot;Junit plugin test&quot;. Go to the &apos;main&apos; tab and choose &quot;Run an application&quot; and select &apos;headless mode&apos;. Also select the runtime JRE as the latest and greatest version of java that JDT supports. Currently, it is the J2SE 7. Make sure you have a 1.7 JDK with you.
To launch all the JDT/Core tests at once, org.eclipse.jdt.core.tests.RunCompilerTests should be run.
If you want to make a good impression, write tests. This goes for any project, of course.

but I get &quot;Project does not exist&quot; so I can&apos;t run the test!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078541</commentid>
    <comment_count>18</comment_count>
      <attachid>212453</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-12 05:00:06 -0400</bug_when>
    <thetext>Created attachment 212453
snapshot of Junit configuration

This is how your configuration should look. Maybe the &quot;project&quot; is not correctly set in your case. Also, if you were able to run tests earlier i&apos;m not sure why you cant run them now. You do have the org.eclipse.jdt.compiler.tests.regression and other tests.* projects in your workspace right? And you dont have any compile errors?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432671</commentid>
    <comment_count>19</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-07-28 12:40:15 -0400</bug_when>
    <thetext>Removing &quot;helpwanted&quot; keyword to avoid wasting time for a patch we wouldn&apos;t accept. See comment 1. I&apos;m still not convinced that we should add another preference for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432699</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-28 14:05:04 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #19)
&gt; Removing &quot;helpwanted&quot; keyword to avoid wasting time for a patch we wouldn&apos;t
&gt; accept. See comment 1. I&apos;m still not convinced that we should add another
&gt; preference for this.

Frankly, I don&apos;t understand the relevance of unconditional vs. conditional in this discussion. If I have a bug affecting every execution or a bug affecting only some executions I&apos;d want to know about both.

If you&apos;re reluctant just about another preference, what about handling both issues via the same preference?

Of course, normally we have different options for definite and potential issues from flow analysis, because by some higher reasoning the dangerous path may not be possible and thus should be suppressable on its own. But any return inside a finally should be treated the same, IMHO.

For throw one might argue that a chance exists that an intermediate try-catch actually catches the exception and thus prevents the bad thing from happening, but that&apos;s very much a corner case, and could possibly be recognized, even.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433247</commentid>
    <comment_count>21</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-07-29 13:56:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #20)
Sounds good. I tried to find out why the current option just reports unconditional returns/throws. The only rationalization http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2ca339c139c0fe73a5bd2705f66592731098d347 had to offer was *** empty log message ***.

So the fix is to have a new problem ID for usages of &apos;return&apos; and &apos;throws&apos; inside &apos;finally&apos; blocks, and control it with the old JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING option.

Javadoc and option name in the UI should then be changed to &quot;&apos;finally&apos; may not complete normally&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433393</commentid>
    <comment_count>22</comment_count>
    <who name="Mohamed El-Beltagy">melbeltagy</who>
    <bug_when>2014-07-30 01:48:15 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #21)
&gt; Javadoc and option name in the UI should then be changed to &quot;&apos;finally&apos; may
&gt; not complete normally&quot;.
Based on comment #2; the proposed solution would be to address only the nested return/throw statements and not to address a method invocation.
So I think that the current option name in the UI is &quot;&apos;finally&apos; does not complete normally&quot; doesn&apos;t need to be changed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433394</commentid>
    <comment_count>23</comment_count>
    <who name="Mohamed El-Beltagy">melbeltagy</who>
    <bug_when>2014-07-30 01:49:53 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #19)
&gt; Removing &quot;helpwanted&quot; keyword to avoid wasting time for a patch we wouldn&apos;t
&gt; accept. See comment 1. I&apos;m still not convinced that we should add another
&gt; preference for this.

I am starting to work on this bug and I really would like to know if there&apos;s a real reason why any batch that would address this bug will not be accepted. 
Is it just the UI? If so and required, I&apos;m willing to add that option as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433395</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-30 01:54:03 -0400</bug_when>
    <thetext>(In reply to Mohamed El-Beltagy from comment #23)
&gt; I am starting to work on this bug and I really would like to know if there&apos;s
&gt; a real reason why any batch that would address this bug will not be
&gt; accepted. 
&gt; Is it just the UI? If so and required, I&apos;m willing to add that option as
&gt; well.

We initially thought we didn&apos;t have an agreement on what&apos;s required to be done. Please refer to comment #21 for an understanding of what&apos;s required to be done as part of this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433407</commentid>
    <comment_count>25</comment_count>
    <who name="Mohamed El-Beltagy">melbeltagy</who>
    <bug_when>2014-07-30 02:39:46 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #24)
&gt; We initially thought we didn&apos;t have an agreement on what&apos;s required to be
&gt; done. Please refer to comment #21 for an understanding of what&apos;s required to
&gt; be done as part of this bug.

First of all, thanks all for your time on such a low priority enhancement. I really didn&apos;t mean to waste anyone&apos;s time.

Reading all comments and if I&apos;m not mistaken, these are the (initial) requirements:
1- A new warning messages to be displayed in case a nested return/throw statement exists inside a finally block. (Original requirement &amp; comment #13 - point 3)
2- The warning will only handle return/throw. Not method invocation. (Comment #2)
3- The warning will be controlled by the existing UI option JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING option. (Comment #21)

4- As an enhancement and for future considerations, the nested &apos;return&apos; statement will be handled as a warning that is different than the nested &apos;throw&apos; statement. (comment #20)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433861</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-30 17:13:01 -0400</bug_when>
    <thetext>(In reply to Mohamed El-Beltagy from comment #25)
&gt; 4- As an enhancement and for future considerations, the nested &apos;return&apos;
&gt; statement will be handled as a warning that is different than the nested
&gt; &apos;throw&apos; statement. (comment #20)

From my p.o.v. it&apos;s the nested throw statement, that&apos;s the odd one out.
For this guy more analysis would help to prevent false positives, like:

try {
} finally {
   try {
       if (bla)
          throw new XException(); // &quot;I am inside a finally&quot;
       foo();
   } catch (YException e) { ... }
}

depending on the exception types, this throw might be harmless.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212109</attachid>
            <date>2012-03-06 01:12:00 -0500</date>
            <delta_ts>2012-03-06 01:12:03 -0500</delta_ts>
            <desc>Propose Patch (OrozcoNichols)</desc>
            <filename>Patch+uTest.txt</filename>
            <type>text/plain</type>
            <size>3530</size>
            <attacher name="Ana Orozco">agorozco</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212453</attachid>
            <date>2012-03-12 05:00:00 -0400</date>
            <delta_ts>2012-03-12 05:00:06 -0400</delta_ts>
            <desc>snapshot of Junit configuration</desc>
            <filename>snap1.png</filename>
            <type>image/png</type>
            <size>19215</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>412484</bug_id>
          
          <creation_ts>2013-07-08 05:30:00 -0400</creation_ts>
          <short_desc>MultiProjectTests.testCycle* are unstable</short_desc>
          <delta_ts>2016-02-04 07:37:27 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>test</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          <qa_contact name="Jay Arthanareeswaran">jarthana</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2281525</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-07-08 05:30:17 -0400</bug_when>
    <thetext>MultiProjectTests.testCycle1 failed.

http://download.eclipse.org/eclipse/downloads/drops4/N20130706-0300/testresults/html/org.eclipse.jdt.core.tests.builder_linux.gtk.x86_6.0.html


problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle1(MultiProjectTests.java:388)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:655)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281532</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-08 05:34:49 -0400</bug_when>
    <thetext>I remember seeing a similar failure (not sure if it&apos;s the same one), but can&apos;t dig out the bug now. The subsequent builds didn&apos;t have this failure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2304250</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-09-09 08:31:45 -0400</bug_when>
    <thetext>and testCycle6 on Windows 7:
http://download.eclipse.org/eclipse/downloads/drops4/I20130906-2000/testresults/html/org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307082</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-16 04:20:13 -0400</bug_when>
    <thetext>Though the failure didn&apos;t occur in the last few builds, hasn&apos;t been investigated yet. Moving out of 4.4 M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322444</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-24 02:12:46 -0400</bug_when>
    <thetext>Looks like this hasn&apos;t occurred throughout M3. Looks like a transient problem with the test. Resolving now, but can be reopened if required.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324723</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-10-30 00:57:32 -0400</bug_when>
    <thetext>As https://bugs.eclipse.org/bugs/show_bug.cgi?id=412484#c4 states this bug is not reproducible.

Nothing to verify.

Used a version of Juno which is older the release specified in the bug to build
the CVS tests with the latest JDT Code. The test build was successful.

Verified for 4.4 M3  using  build I20131028-2000 (higher version). 

The problem description says failure at:
&quot;org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)&quot;

How do I run org.eclipse.jdt.core.tests without using JDT Core related projects?

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324732</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-10-30 02:28:56 -0400</bug_when>
    <thetext>Tried verifying with Juno if the problem could be reproduced. 

The build was successful (for org.eclipse.jdt.core.tests.builder)
No compilation errors.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324733</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-10-30 02:34:14 -0400</bug_when>
    <thetext>Sorry the test case was MultiProjectTests.
The build was successful for this test.

Verified for 4.4 M3  using  build I20131028-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2339279</commentid>
    <comment_count>8</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-12-09 06:12:00 -0500</bug_when>
    <thetext>This time testCycle2 failed. See also bug 162054.

Looks like there&apos;s some timing issue with those testCycle* tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347283</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-09 03:26:39 -0500</bug_when>
    <thetext>http://download.eclipse.org/eclipse/downloads/drops4/M20140108-1810/testresults/html/org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.html

BUILD ID: M20140108-1810

Test Case: testCycle2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347284</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-09 03:27:09 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #9)
&gt; http://download.eclipse.org/eclipse/downloads/drops4/M20140108-1810/
&gt; testresults/html/org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.html
&gt; 
&gt; BUILD ID: M20140108-1810
&gt; 
&gt; Test Case: testCycle2

testCycle2 Failed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348532</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-11 11:04:53 -0500</bug_when>
    <thetext>Build ID: N20140110-2000

Test Results: http://download.eclipse.org/eclipse/downloads/drops4/N20140110-2000/testresults/html/org.eclipse.jdt.core.tests.builder_macosx.cocoa.x86_5.0.html

testCycle7 Failed.

Platform: MacOSX, 1.7 VM</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348776</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-01-13 05:22:50 -0500</bug_when>
    <thetext>Failed again on Mac (N20140110-2000):

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle7(MultiProjectTests.java:967)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351523</commentid>
    <comment_count>13</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-18 21:13:24 -0500</bug_when>
    <thetext>Failed: testCycle1

Platform: Linix
BuildID: N20140117-2000

http://download.eclipse.org/eclipse/downloads/drops4/N20140117-2000/testresults/html/org.eclipse.jdt.core.tests.builder_linux.gtk.x86_6.0.html

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle1(MultiProjectTests.java:388)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358920</commentid>
    <comment_count>14</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2014-02-05 03:18:10 -0500</bug_when>
    <thetext>failed at  http://download.eclipse.org/eclipse/downloads/drops4/N20140204-2000/testresults/html/org.eclipse.jdt.core.tests.builder_macosx.cocoa.x86_5.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367292</commentid>
    <comment_count>15</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-23 06:31:01 -0500</bug_when>
    <thetext>Failed again.

Test Results: http://download.eclipse.org/eclipse/downloads/drops4/N20140222-1500/testresults/html/org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.html

Build ID: N20140222-1500

Test Case: testCycle3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368023</commentid>
    <comment_count>16</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-25 04:07:04 -0500</bug_when>
    <thetext>And again on N20140224-2104:

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle4(MultiProjectTests.java:681)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:133)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:103)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:378)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:232)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1462)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369134</commentid>
    <comment_count>17</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-26 23:31:04 -0500</bug_when>
    <thetext>Failed.

Test Results: http://download.eclipse.org/eclipse/downloads/drops4/N20140224-2104/testresults/html/org.eclipse.jdt.core.tests.builder_linux.gtk.x86_6.0.html

Test Name: testCycle4

Build: N20140224-2104

Trace:

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle4(MultiProjectTests.java:681)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:133)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:103)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:378)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:232)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1462)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371922</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-05 11:15:44 -0500</bug_when>
    <thetext>Moving out to M7.

Shankha, should the failure occur again, please disable the test. Also, if you can come up with a theory why the test might be failing, you can put some trouble shooting code if that will help our investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372246</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-06 03:07:08 -0500</bug_when>
    <thetext>Failed Again:

Test Case: testCycle2
Test Results: http://download.eclipse.org/eclipse/downloads/drops4/I20140305-2000/testresults/html/org.eclipse.jdt.core.tests.builder_macosx.cocoa.x86_5.0.html

Build ID: I20140305-2000

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle2(MultiProjectTests.java:482)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:133)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:103)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:378)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:232)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1462)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391790</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-23 06:59:03 -0400</bug_when>
    <thetext>Moving the target to 4.5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407003</commentid>
    <comment_count>21</comment_count>
      <attachid>243480</attachid>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-05-26 06:23:49 -0400</bug_when>
    <thetext>Created attachment 243480
Test results

MultiProjectTests.testCycle1 Failed again:

http://download.eclipse.org/eclipse/downloads/drops4/I20140523-2000/testresults/html/org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409639</commentid>
    <comment_count>22</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-29 04:13:52 -0400</bug_when>
    <thetext>Failed: 

download.eclipse.org/eclipse/downloads/drops4/I20140528-2000/testresults/html/org.eclipse.jdt.core.tests.builder_linux.gtk.x86_64_8.0.html

Build ID: I20140528-2000

testCycle4

problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]

junit.framework.AssertionFailedError: problem not found: Problem : A cycle was detected in the build path of project &apos;P1&apos;. The cycle consists of projects {P1, P2, P3} [ resource : &lt;/P1&gt; range : &lt;-1,-1&gt; category : &lt;10&gt; severity : &lt;1&gt;]
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemsFor(BuilderTests.java:312)
at org.eclipse.jdt.core.tests.builder.BuilderTests.expectingOnlySpecificProblemFor(BuilderTests.java:287)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle4(MultiProjectTests.java:681)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428655</commentid>
    <comment_count>23</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-17 04:22:18 -0400</bug_when>
    <thetext>testCycle2 Failed.

Build ID: N20140716-2000.
Platform: Windows.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439774</commentid>
    <comment_count>24</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-18 00:32:40 -0400</bug_when>
    <thetext>testCycle2 failed.

Build ID: N20140816-1500
Platform: Windows</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439809</commentid>
    <comment_count>25</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-08-18 03:38:47 -0400</bug_when>
    <thetext>Please fix that test or remove it. At the moment it&apos;s just unreliable noise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469080</commentid>
    <comment_count>26</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 00:49:06 -0400</bug_when>
    <thetext>testCycle2.

Failed again.
Build ID: I20141021-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471977</commentid>
    <comment_count>27</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-26 11:28:19 -0400</bug_when>
    <thetext>Will look into it during 4.5 M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493645</commentid>
    <comment_count>28</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-07 22:07:50 -0500</bug_when>
    <thetext>We have investigated and could not find any code related issues which could lead to the failure. 

Will assign a target milestone if the tests start failing regularly or if we are able to come up with a reproducing scenario.

I have seen the failure on my desktop a few times when the system is under heavy use. I haven&apos;t been able to reproduce the scenario successfully.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500805</commentid>
    <comment_count>29</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-28 21:25:04 -0500</bug_when>
    <thetext>Failure:
Build ID: N20141227-1500
Test: testCycle4

http://download.eclipse.org/eclipse/downloads/drops4/N20141227-1500/testresults/html/org.eclipse.jdt.core.tests.builder_macosx.cocoa.x86_64_7.0.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2521926</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-20 17:46:48 -0500</bug_when>
    <thetext>testCycle4 failed in https://hudson.eclipse.org/platform/job/eclipse.jdt.core-Gerrit/105/

Same as comment 22.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2668058</commentid>
    <comment_count>31</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2016-02-04 07:37:27 -0500</bug_when>
    <thetext>failed with M20160203-1000

testCycle1	Error	Build path contains duplicate entry: &apos;C:Program Files/Java/jdk1.7.0_80/jre/lib/resources.jar&apos; for project &apos;P1&apos; 

Java Model Exception: Java Model Status [Build path contains duplicate entry: &apos;C:Program Files/Java/jdk1.7.0_80/jre/lib/resources.jar&apos; for project &apos;P1&apos;]
at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:785)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3097)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3059)
at org.eclipse.jdt.internal.core.JavaProject.setRawClasspath(JavaProject.java:3112)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.setClasspath(TestingEnvironment.java:1048)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addEntry(TestingEnvironment.java:285)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:265)
at org.eclipse.jdt.core.tests.builder.TestingEnvironment.addExternalJars(TestingEnvironment.java:253)
at org.eclipse.jdt.core.tests.builder.MultiProjectTests.testCycle1(MultiProjectTests.java:293)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:692)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:319)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
at org.eclipse.equinox.launcher.Main.run(Main.java:1515)
at org.eclipse.equinox.launcher.Main.main(Main.java:1488)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>243480</attachid>
            <date>2014-05-26 06:23:00 -0400</date>
            <delta_ts>2014-05-26 06:23:49 -0400</delta_ts>
            <desc>Test results</desc>
            <filename>org.eclipse.jdt.core.tests.builder_win32.win32.x86_7.0.xml</filename>
            <type>text/xml</type>
            <size>52548</size>
            <attacher name="Dani Megert">daniel_megert</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>456147</bug_id>
          
          <creation_ts>2014-12-24 11:51:00 -0500</creation_ts>
          <short_desc>[test][model] Unable to set default workspace options</short_desc>
          <delta_ts>2015-12-02 17:40:17 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          <qa_contact name="Jay Arthanareeswaran">jarthana</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2500528</commentid>
    <comment_count>0</comment_count>
      <attachid>249620</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-24 11:51:22 -0500</bug_when>
    <thetext>Created attachment 249620
Test Results

Build ID: I20141223-0800

===

Workspace options should be back to their default. ----------- Expected ------------ CompilerOptions: - local variables debug attributes: ON - line number debug attributes: ON - source debug attributes: ON - MethodParameters attributes: do not generate - Generic signature for lambda expressions: do not generate - preserve all local variables: ON - method with constructor name: warning - overridden package default method: warning - deprecation: warning - masked catch block: warning - unused local variable: warning - unused parameter: ignore - unused exception parameter: ignore - unused import: warning - synthetic access emulation: ignore - assignment with no effect: warning - non externalized string: ignore - static access receiver: warning - indirect static access: ignore - incompatible non inherited interface method: warning - unused private member: warning - local variable hiding another variable: ignore - field hiding another variable: ignore - type hiding another type: warning - possible accidental boolean assignment: ignore - superfluous semicolon: ignore - uncommented empty block: ignore - unnecessary type check: ignore - javadoc comment support: ON + invalid javadoc: ignore + report invalid javadoc tags: disabled * deprecated references: disabled * not visible references: disabled + visibility level to report invalid javadoc tags: public + missing javadoc tags: ignore + visibility level to report missing javadoc tags: public + report missing javadoc tags for method type parameters: disabled + report missing javadoc tags in overriding methods: disabled + missing javadoc comments: ignore + report missing tag description option: return_tag + visibility level to report missing javadoc comments: public + report missing javadoc comments in overriding methods: disabled - finally block not completing normally: warning - report unused declared thrown exception: ignore - report unused declared thrown exception when overriding: disabled - report unused declared thrown exception include doc comment reference: enabled - report unused declared thrown exception exempt exception and throwable: enabled - unnecessary else: ignore - JDK compliance level: 1.4 - JDK source level: 1.3 - JDK target level: 1.2 - verbose : OFF - produce reference info : OFF - parse literal expressions as constants : ON - encoding : US-ASCII - task tags: TODO,FIXME,XXX - task priorities : NORMAL,HIGH,NORMAL - report deprecation inside deprecated code : disabled - report deprecation when overriding deprecated method : disabled - report unused parameter when implementing abstract method : disabled - report unused parameter when overriding concrete method : disabled - report unused parameter include doc comment reference : enabled - report constructor/setter parameter hiding existing field : disabled - inline JSR bytecode : disabled - share common finally blocks : disabled - report unavoidable generic type problems : enabled - unsafe type operation: warning - unsafe raw type: warning - final bound for type parameter: warning - missing serialVersionUID: warning - varargs argument need cast: warning - forbidden reference to type with access restriction: error - discouraged reference to type with access restriction: warning - null reference: warning - potential null reference: ignore - redundant null check: ignore - autoboxing: ignore - annotation super interface: warning - missing @Override annotation: ignore - missing @Override annotation for interface method implementation: enabled - missing @Deprecated annotation: ignore - incomplete enum switch: warning - raise null related warnings for variables tainted in assert statements: disabled - suppress warnings: enabled - suppress optional errors: disabled - unhandled warning token: warning - unused warning token: warning - unused label: warning - treat optional error as fatal: disabled - parameter assignment: ignore - generate class files: enabled - process annotations: disabled - unused type arguments for method/constructor invocation: warning - redundant superinterface: ignore - comparing identical expr: warning - missing synchronized on inherited method: ignore - should implement hashCode() method: ignore - dead code: warning - dead code in trivial if statement: disabled - tasks severity: warning - unused object allocation: ignore - method can be static: ignore - method can be potentially static: ignore - redundant specification of type arguments: ignore - resource is not closed: warning - resource may not be closed: ignore - resource should be handled by try-with-resources: ignore - Unused Type Parameter: ignore ------------ but was ------------ CompilerOptions: - local variables debug attributes: ON - line number debug attributes: ON - source debug attributes: ON - MethodParameters attributes: do not generate - Generic signature for lambda expressions: do not generate - preserve all local variables: ON - method with constructor name: warning - overridden package default method: warning - deprecation: warning - masked catch block: warning - unused local variable: warning - unused parameter: ignore - unused exception parameter: ignore - unused import: warning - synthetic access emulation: ignore - assignment with no effect: warning - non externalized string: ignore - static access receiver: warning - indirect static access: ignore - incompatible non inherited interface method: warning - unused private member: warning - local variable hiding another variable: ignore - field hiding another variable: ignore - type hiding another type: warning - possible accidental boolean assignment: ignore - superfluous semicolon: ignore - uncommented empty block: ignore - unnecessary type check: ignore - javadoc comment support: ON + invalid javadoc: ignore + report invalid javadoc tags: disabled * deprecated references: disabled * not visible references: disabled + visibility level to report invalid javadoc tags: public + missing javadoc tags: ignore + visibility level to report missing javadoc tags: public + report missing javadoc tags for method type parameters: disabled + report missing javadoc tags in overriding methods: disabled + missing javadoc comments: ignore + report missing tag description option: return_tag + visibility level to report missing javadoc comments: public + report missing javadoc comments in overriding methods: disabled - finally block not completing normally: warning - report unused declared thrown exception: ignore - report unused declared thrown exception when overriding: disabled - report unused declared thrown exception include doc comment reference: enabled - report unused declared thrown exception exempt exception and throwable: enabled - unnecessary else: ignore - JDK compliance level: 1.7 - JDK source level: 1.7 - JDK target level: 1.7 - verbose : OFF - produce reference info : OFF - parse literal expressions as constants : ON - encoding : US-ASCII - task tags: TODO,FIXME,XXX - task priorities : NORMAL,HIGH,NORMAL - report deprecation inside deprecated code : disabled - report deprecation when overriding deprecated method : disabled - report unused parameter when implementing abstract method : disabled - report unused parameter when overriding concrete method : disabled - report unused parameter include doc comment reference : enabled - report constructor/setter parameter hiding existing field : disabled - inline JSR bytecode : enabled - share common finally blocks : disabled - report unavoidable generic type problems : enabled - unsafe type operation: warning - unsafe raw type: warning - final bound for type parameter: warning - missing serialVersionUID: warning - varargs argument need cast: warning - forbidden reference to type with access restriction: error - discouraged reference to type with access restriction: warning - null reference: warning - potential null reference: ignore - redundant null check: ignore - autoboxing: ignore - annotation super interface: warning - missing @Override annotation: ignore - missing @Override annotation for interface method implementation: enabled - missing @Deprecated annotation: ignore - incomplete enum switch: warning - raise null related warnings for variables tainted in assert statements: disabled - suppress warnings: enabled - suppress optional errors: disabled - unhandled warning token: warning - unused warning token: warning - unused label: warning - treat optional error as fatal: disabled - parameter assignment: ignore - generate class files: enabled - process annotations: disabled - unused type arguments for method/constructor invocation: warning - redundant superinterface: ignore - comparing identical expr: warning - missing synchronized on inherited method: ignore - should implement hashCode() method: ignore - dead code: warning - dead code in trivial if statement: disabled - tasks severity: warning - unused object allocation: ignore - method can be static: ignore - method can be potentially static: ignore - redundant specification of type arguments: ignore - resource is not closed: warning - resource may not be closed: ignore - resource should be handled by try-with-resources: ignore - Unused Type Parameter: ignore --------- Difference is ---------- expected:&lt;...compliance level: 1.[4 - JDK source level: 1.3 - JDK target level: 1.2 - verbose : OFF - produce reference info : OFF - parse literal expressions as constants : ON - encoding : US-ASCII - task tags: TODO,FIXME,XXX - task priorities : NORMAL,HIGH,NORMAL - report deprecation inside deprecated code : disabled - report deprecation when overriding deprecated method : disabled - report unused parameter when implementing abstract method : disabled - report unused parameter when overriding concrete method : disabled - report unused parameter include doc comment reference : enabled - report constructor/setter parameter hiding existing field : disabled - inline JSR bytecode : dis]abled - share com...&gt; but was:&lt;...compliance level: 1.[7 - JDK source level: 1.7 - JDK target level: 1.7 - verbose : OFF - produce reference info : OFF - parse literal expressions as constants : ON - encoding : US-ASCII - task tags: TODO,FIXME,XXX - task priorities : NORMAL,HIGH,NORMAL - report deprecation inside deprecated code : disabled - report deprecation when overriding deprecated method : disabled - report unused parameter when implementing abstract method : disabled - report unused parameter when overriding concrete method : disabled - report unused parameter include doc comment reference : enabled - report constructor/setter parameter hiding existing field : disabled - inline JSR bytecode : en]abled - share com...&gt;

junit.framework.ComparisonFailure: Workspace options should be back to their default.
----------- Expected ------------
CompilerOptions:
- local variables debug attributes: ON
- line number debug attributes: ON
- source debug attributes: ON
- MethodParameters attributes: do not generate
- Generic signature for lambda expressions: do not generate
- preserve all local variables: ON
- method with constructor name: warning
- overridden package default method: warning
- deprecation: warning
- masked catch block: warning
- unused local variable: warning
- unused parameter: ignore
- unused exception parameter: ignore
- unused import: warning
- synthetic access emulation: ignore
- assignment with no effect: warning
- non externalized string: ignore
- static access receiver: warning
- indirect static access: ignore
- incompatible non inherited interface method: warning
- unused private member: warning
- local variable hiding another variable: ignore
- field hiding another variable: ignore
- type hiding another type: warning
- possible accidental boolean assignment: ignore
- superfluous semicolon: ignore
- uncommented empty block: ignore
- unnecessary type check: ignore
- javadoc comment support: ON
+ invalid javadoc: ignore
+ report invalid javadoc tags: disabled
* deprecated references: disabled
* not visible references: disabled
+ visibility level to report invalid javadoc tags: public
+ missing javadoc tags: ignore
+ visibility level to report missing javadoc tags: public
+ report missing javadoc tags for method type parameters: disabled
+ report missing javadoc tags in overriding methods: disabled
+ missing javadoc comments: ignore
+ report missing tag description option: return_tag
+ visibility level to report missing javadoc comments: public
+ report missing javadoc comments in overriding methods: disabled
- finally block not completing normally: warning
- report unused declared thrown exception: ignore
- report unused declared thrown exception when overriding: disabled
- report unused declared thrown exception include doc comment reference: enabled
- report unused declared thrown exception exempt exception and throwable: enabled
- unnecessary else: ignore
- JDK compliance level: 1.4
- JDK source level: 1.3
- JDK target level: 1.2
- verbose : OFF
- produce reference info : OFF
- parse literal expressions as constants : ON
- encoding : US-ASCII
- task tags: TODO,FIXME,XXX
- task priorities : NORMAL,HIGH,NORMAL
- report deprecation inside deprecated code : disabled
- report deprecation when overriding deprecated method : disabled
- report unused parameter when implementing abstract method : disabled
- report unused parameter when overriding concrete method : disabled
- report unused parameter include doc comment reference : enabled
- report constructor/setter parameter hiding existing field : disabled
- inline JSR bytecode : disabled
- share common finally blocks : disabled
- report unavoidable generic type problems : enabled
- unsafe type operation: warning
- unsafe raw type: warning
- final bound for type parameter: warning
- missing serialVersionUID: warning
- varargs argument need cast: warning
- forbidden reference to type with access restriction: error
- discouraged reference to type with access restriction: warning
- null reference: warning
- potential null reference: ignore
- redundant null check: ignore
- autoboxing: ignore
- annotation super interface: warning
- missing @Override annotation: ignore
- missing @Override annotation for interface method implementation: enabled
- missing @Deprecated annotation: ignore
- incomplete enum switch: warning
- raise null related warnings for variables tainted in assert statements: disabled
- suppress warnings: enabled
- suppress optional errors: disabled
- unhandled warning token: warning
- unused warning token: warning
- unused label: warning
- treat optional error as fatal: disabled
- parameter assignment: ignore
- generate class files: enabled
- process annotations: disabled
- unused type arguments for method/constructor invocation: warning
- redundant superinterface: ignore
- comparing identical expr: warning
- missing synchronized on inherited method: ignore
- should implement hashCode() method: ignore
- dead code: warning
- dead code in trivial if statement: disabled
- tasks severity: warning
- unused object allocation: ignore
- method can be static: ignore
- method can be potentially static: ignore
- redundant specification of type arguments: ignore
- resource is not closed: warning
- resource may not be closed: ignore
- resource should be handled by try-with-resources: ignore
- Unused Type Parameter: ignore
------------ but was ------------
CompilerOptions:
- local variables debug attributes: ON
- line number debug attributes: ON
- source debug attributes: ON
- MethodParameters attributes: do not generate
- Generic signature for lambda expressions: do not generate
- preserve all local variables: ON
- method with constructor name: warning
- overridden package default method: warning
- deprecation: warning
- masked catch block: warning
- unused local variable: warning
- unused parameter: ignore
- unused exception parameter: ignore
- unused import: warning
- synthetic access emulation: ignore
- assignment with no effect: warning
- non externalized string: ignore
- static access receiver: warning
- indirect static access: ignore
- incompatible non inherited interface method: warning
- unused private member: warning
- local variable hiding another variable: ignore
- field hiding another variable: ignore
- type hiding another type: warning
- possible accidental boolean assignment: ignore
- superfluous semicolon: ignore
- uncommented empty block: ignore
- unnecessary type check: ignore
- javadoc comment support: ON
+ invalid javadoc: ignore
+ report invalid javadoc tags: disabled
* deprecated references: disabled
* not visible references: disabled
+ visibility level to report invalid javadoc tags: public
+ missing javadoc tags: ignore
+ visibility level to report missing javadoc tags: public
+ report missing javadoc tags for method type parameters: disabled
+ report missing javadoc tags in overriding methods: disabled
+ missing javadoc comments: ignore
+ report missing tag description option: return_tag
+ visibility level to report missing javadoc comments: public
+ report missing javadoc comments in overriding methods: disabled
- finally block not completing normally: warning
- report unused declared thrown exception: ignore
- report unused declared thrown exception when overriding: disabled
- report unused declared thrown exception include doc comment reference: enabled
- report unused declared thrown exception exempt exception and throwable: enabled
- unnecessary else: ignore
- JDK compliance level: 1.7
- JDK source level: 1.7
- JDK target level: 1.7
- verbose : OFF
- produce reference info : OFF
- parse literal expressions as constants : ON
- encoding : US-ASCII
- task tags: TODO,FIXME,XXX
- task priorities : NORMAL,HIGH,NORMAL
- report deprecation inside deprecated code : disabled
- report deprecation when overriding deprecated method : disabled
- report unused parameter when implementing abstract method : disabled
- report unused parameter when overriding concrete method : disabled
- report unused parameter include doc comment reference : enabled
- report constructor/setter parameter hiding existing field : disabled
- inline JSR bytecode : enabled
- share common finally blocks : disabled
- report unavoidable generic type problems : enabled
- unsafe type operation: warning
- unsafe raw type: warning
- final bound for type parameter: warning
- missing serialVersionUID: warning
- varargs argument need cast: warning
- forbidden reference to type with access restriction: error
- discouraged reference to type with access restriction: warning
- null reference: warning
- potential null reference: ignore
- redundant null check: ignore
- autoboxing: ignore
- annotation super interface: warning
- missing @Override annotation: ignore
- missing @Override annotation for interface method implementation: enabled
- missing @Deprecated annotation: ignore
- incomplete enum switch: warning
- raise null related warnings for variables tainted in assert statements: disabled
- suppress warnings: enabled
- suppress optional errors: disabled
- unhandled warning token: warning
- unused warning token: warning
- unused label: warning
- treat optional error as fatal: disabled
- parameter assignment: ignore
- generate class files: enabled
- process annotations: disabled
- unused type arguments for method/constructor invocation: warning
- redundant superinterface: ignore
- comparing identical expr: warning
- missing synchronized on inherited method: ignore
- should implement hashCode() method: ignore
- dead code: warning
- dead code in trivial if statement: disabled
- tasks severity: warning
- unused object allocation: ignore
- method can be static: ignore
- method can be potentially static: ignore
- redundant specification of type arguments: ignore
- resource is not closed: warning
- resource may not be closed: ignore
- resource should be handled by try-with-resources: ignore
- Unused Type Parameter: ignore
--------- Difference is ----------
expected:&lt;...compliance level: 1.[4
- JDK source level: 1.3
- JDK target level: 1.2
- verbose : OFF
- produce reference info : OFF
- parse literal expressions as constants : ON
- encoding : US-ASCII
- task tags: TODO,FIXME,XXX
- task priorities : NORMAL,HIGH,NORMAL
- report deprecation inside deprecated code : disabled
- report deprecation when overriding deprecated method : disabled
- report unused parameter when implementing abstract method : disabled
- report unused parameter when overriding concrete method : disabled
- report unused parameter include doc comment reference : enabled
- report constructor/setter parameter hiding existing field : disabled
- inline JSR bytecode : dis]abled
- share com...&gt; but was:&lt;...compliance level: 1.[7
- JDK source level: 1.7
- JDK target level: 1.7
- verbose : OFF
- produce reference info : OFF
- parse literal expressions as constants : ON
- encoding : US-ASCII
- task tags: TODO,FIXME,XXX
- task priorities : NORMAL,HIGH,NORMAL
- report deprecation inside deprecated code : disabled
- report deprecation when overriding deprecated method : disabled
- report unused parameter when implementing abstract method : disabled
- report unused parameter when overriding concrete method : disabled
- report unused parameter include doc comment reference : enabled
- report constructor/setter parameter hiding existing field : disabled
- inline JSR bytecode : en]abled
- share com...&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:259)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertEquals(TestCase.java:235)
at org.eclipse.jdt.core.tests.model.AbstractJavaModelTests.tearDown(AbstractJavaModelTests.java:3092)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)
	0.440</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500529</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-24 11:55:16 -0500</bug_when>
    <thetext>Failure in org.eclipse.jdt.core.tests.model

test001
test002
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500530</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-24 11:56:08 -0500</bug_when>
    <thetext>Test Failures described in Comment 0 were reported on Mac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500609</commentid>
    <comment_count>3</comment_count>
      <attachid>249625</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-25 14:04:50 -0500</bug_when>
    <thetext>Created attachment 249625
console logs of AllJavaModelTests - linux (good)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500610</commentid>
    <comment_count>4</comment_count>
      <attachid>249626</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-25 14:13:31 -0500</bug_when>
    <thetext>Created attachment 249626
console logs of AllJavaModelTests - macos (bad)

IIRC this kind of problem manifests by putting the workbench into a bad state, at what point all java model tests exhibit the same failure. The root cause must have happened before the first failure.

Perhaps the console logs of these tests give a clue.

If you compare the two logs (linux vs. macos) there unfortunately is some noise (random test order?), but this one _could_ give a hint:

junit.framework.AssertionFailedError: Should not initialize container on shutdown

Given that previous efforts related to the simulated shutdown, there _might_ be a connection here. Not sure, seeing the message in both logs could also say that this is unrelated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2618949</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-09-24 02:23:32 -0400</bug_when>
    <thetext>*** Bug 478155 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2647266</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-12-02 17:40:17 -0500</bug_when>
    <thetext>Previous trouble in this area was bug 302850. In that bug we mainly talked about wrong settings for task tags, etc., but in bug 302850 comment 25 I described a situation that looked exactly like the recent failures affecting compliance level and jsr inlining. That track was not followed back then.

According to that comment we would be searching for reasons why JavaRuntime.initializeVMs() could fail to find a VM description ...</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249620</attachid>
            <date>2014-12-24 11:51:00 -0500</date>
            <delta_ts>2014-12-24 11:51:22 -0500</delta_ts>
            <desc>Test Results</desc>
            <filename>Unit Test Results.zip</filename>
            <type>application/x-zip-compressed</type>
            <size>3111125</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249625</attachid>
            <date>2014-12-25 14:04:00 -0500</date>
            <delta_ts>2014-12-25 14:04:50 -0500</delta_ts>
            <desc>console logs of AllJavaModelTests - linux (good)</desc>
            <filename>org.eclipse.jdt.core.tests.model.AllJavaModelTests-linux.txt</filename>
            <type>text/plain</type>
            <size>82957</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249626</attachid>
            <date>2014-12-25 14:13:00 -0500</date>
            <delta_ts>2014-12-25 14:13:31 -0500</delta_ts>
            <desc>console logs of AllJavaModelTests - macos (bad)</desc>
            <filename>org.eclipse.jdt.core.tests.model.AllJavaModelTests-macos.txt</filename>
            <type>text/plain</type>
            <size>82920</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>462918</bug_id>
          
          <creation_ts>2015-03-24 04:49:00 -0400</creation_ts>
          <short_desc>[test][model]NamingConventionTests.testSuggestFieldName002 (and 27 others) failed</short_desc>
          <delta_ts>2015-03-24 06:45:31 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">sasikanth.bharadwaj</reporter>
          <assigned_to name="Manoj Palat">manpalat</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2536400</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">sasikanth.bharadwaj</who>
    <bug_when>2015-03-24 04:49:47 -0400</bug_when>
    <thetext>Build Id N20150323-2000
http://download.eclipse.org/eclipse/downloads/drops4/N20150323-2000/testresults/html/org.eclipse.jdt.core.tests.model_win32.win32.x86_7.0.html

Total 28 tests failing with similar result

----------- Expected ------------ oneClass class1 ------------ but was ------------ _oneClass _class oneClass class1 --------- Difference is ---------- expected:&lt;[]oneClass class1&gt; but was:&lt;[_oneClass _class ]oneClass class1&gt;

junit.framework.ComparisonFailure:
----------- Expected ------------
oneClass
class1
------------ but was ------------
_oneClass
_class
oneClass
class1
--------- Difference is ----------
expected:&lt;[]oneClass
class1&gt; but was:&lt;[_oneClass
_class
]oneClass
class1&gt;
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assertStringEquals(TestCase.java:268)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assumeEquals(TestCase.java:288)
at org.eclipse.jdt.core.tests.junit.extension.TestCase.assumeEquals(TestCase.java:278)
at org.eclipse.jdt.core.tests.model.NamingConventionTests.testSuggestFieldName002(NamingConventionTests.java:144)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:105)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:89)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite$1.protect(SuiteOfTestCases.java:77)
at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:86)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:657)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:310)
at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:36)
at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:32)
at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
at org.eclipse.equinox.launcher.Main.main(Main.java:1438)
at org.eclipse.core.launcher.Main.main(Main.java:34)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2536408</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-03-24 04:57:26 -0400</bug_when>
    <thetext>I will take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2536515</commentid>
    <comment_count>2</comment_count>
    <who name="Manoj Palat">manpalat</who>
    <bug_when>2015-03-24 06:45:31 -0400</bug_when>
    <thetext>
Tried the following:

- ran locally with win32 and win32/64
- Checked the previous commits (no breakpoint hit for these tests)
- executed the tests as per the order (testSuggestFieldName009 testSuggestFieldName008 testSuggestFieldName007 testSuggestFieldName006 testSuggestFieldName005 testSuggestFieldName004 testSuggestFieldName003   testSuggestFieldName002   testSuggestFieldName001)

tests passed in all the cases. Would wait for today&apos;s results</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>392225</bug_id>
          
          <creation_ts>2012-10-17 16:34:00 -0400</creation_ts>
          <short_desc>NPE in TypeBinding.getDeclaredFields</short_desc>
          <delta_ts>2014-11-27 10:32:10 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Zarnekow">sebastian.zarnekow</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2173216</commentid>
    <comment_count>0</comment_count>
    <who name="Sebastian Zarnekow">sebastian.zarnekow</who>
    <bug_when>2012-10-17 16:34:04 -0400</bug_when>
    <thetext>java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypeFor(SourceTypeBinding.java:1395)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields(SourceTypeBinding.java:711)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.availableFields(ReferenceBinding.java:176)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredFields(TypeBinding.java:224)
[snip 8&lt; my code below]


In a CompilationParticipant, I obtain the CU for the compiled file by means of 

ICompilationUnit cu = (ICompilationUnit) JavaCore.create(javaFile /* IFile */);
ASTParser parser = ASTParser.newParser(AST.JLS4);
parser.setProject(cu.getJavaProject());
parser.setIgnoreMethodBodies(false);
IType[] allTypes = getAllTypes(cu);
IBinding[] bindings = parser.createBindings(allTypes, null);

with

private IType[] getAllTypes(ICompilationUnit compilationUnit) throws JavaModelException {
	List&lt;IType&gt; result = new ArrayList&lt;IType&gt;(4);
	for (IType type : compilationUnit.getTypes()) {
		result.add(type);
		addAllMemberTypes(type, result);
	}
	return result.toArray(new IType[result.size()]);
}

private void addAllMemberTypes(IMember container, List&lt;IType&gt; result) throws JavaModelException {
	for (IJavaElement child : container.getChildren()) {
		if (child instanceof IMember) {
			if (child instanceof IType) {
				result.add((IType) child);
			}
			addAllMemberTypes((IMember) child, result);
		}
	}
}

For the following two files in the default package of an IJavaProject ..

==
public class Outer {
	public class Inner extends SuperClass {
		public Inner(String s) {
		}
	}
}
==
public class SuperClass {
	String f;
}
==

.. I can correctly find two ITypeBindings if Outer.java is compiled by my participant. I get a binding for Outer and another one for Outer$Inner. 
As soon as I try to navigate to the supertype of Inner and query &apos;SuperClass&apos; for its fields, I get the exception above. Is there something that I have to keep in mind when dealing with the parser and stuff in a CompilationParticipant?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173294</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-17 19:18:01 -0400</bug_when>
    <thetext>Preliminary answer from locking at your snippets and the implementation in SourceTypeBinding:

- while compiling Outer we&apos;ve touched SuperClass to the degree that we created the type binding and connected it (supers, members), we haven&apos;t yet fully resolved &apos;f&apos; (it was not requested).
- at the end of this compilation SourceTypeBinding.scope is discarded
- when later outside the compilation proper you navigate to SuperClass and ask for its &apos;fields()&apos;, each of these has to resolve its type which it does using the scope -&gt; NPE

Do we really really need the scope? Without it we
1. cannot find the compiler options to determine the sourceLevel
2. cannot find the corresponding TypeDeclaration
3. report any errors using the typical scope.problemReporter() idiom.

1&amp;3 could be circumvented somehow, but for 2 I see no alternative.

I don&apos;t think the API makes any promises about referenced bindings which are not *contained* in allTypes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173474</commentid>
    <comment_count>2</comment_count>
    <who name="Sebastian Zarnekow">sebastian.zarnekow</who>
    <bug_when>2012-10-18 06:12:51 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; I don&apos;t think the API makes any promises about referenced bindings which are
&gt; not *contained* in allTypes.


That&apos;s suprising. IMHO it would not make much sense to restrict the resolution of bindings to the initially requested data. This would raise the question: How would I know which bindings are valid and for which of those transitive bindings do I have to re-request the resolution. Is there even a method that tells me about the internal state of a binding, e.g. if it&apos;s valid / resolved or not? Can I somehow trigger further resolution?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173571</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 09:37:42 -0400</bug_when>
    <thetext>Disclaimer: I did not invent any of these API, I&apos;m only interpreting what I see.

(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; &gt; I don&apos;t think the API makes any promises about referenced bindings which are
&gt; &gt; not *contained* in allTypes.
&gt; 
&gt; 
&gt; That&apos;s suprising. IMHO it would not make much sense to restrict the
&gt; resolution of bindings to the initially requested data.

I can understand your surprise from a client&apos;s p.o.v., but from an implementation p.o.v. guaranteeing fully resolved everything would mean the ASTParser can only convert entire universes, never just one class at a time.

Mind you: the primary responsibility of the ASTParser is to create DOM AST, which it does completely. Providing bindings as a side-effect is - a welcome *side-effect*.

&gt; This would raise the
&gt; question: How would I know which bindings are valid and for which of those
&gt; transitive bindings do I have to re-request the resolution.

Very good question.

I believe the following can be taken as a rule of thumb:
- you get bindings for all directly referenced types plus their supers
- members of your supers will have bindings, specifically:
  - signatures of methods are resolved
  - field types are not guaranteed (as you are experiencing)
  - types used in method bodies are not guaranteed
- members of referenced types not in your set of compilation units
  can be unresolved.

&gt; Is there even a
&gt; method that tells me about the internal state of a binding, e.g. if it&apos;s
&gt; valid / resolved or not? Can I somehow trigger further resolution?

Hm, for the compiler bindings we have the Unresolved* variants. Right now I don&apos;t know any public API that would expose this info, although I agree there should be some.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173591</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 09:50:27 -0400</bug_when>
    <thetext>FYI: bug 392333 :)

With that, do you agree to close this as WORKSFORME, since your trying things that are not guaranteed by the API?

Would a more specific exception help (making this limitation explicit)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173599</commentid>
    <comment_count>5</comment_count>
    <who name="Sebastian Zarnekow">sebastian.zarnekow</who>
    <bug_when>2012-10-18 09:59:44 -0400</bug_when>
    <thetext>I&apos;d prefer a more meaningful exception instead of the NPE, e.g. a JavaModelException or IllegalStateException with a reasonable message. Is that possible?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173607</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-10-18 10:08:06 -0400</bug_when>
    <thetext>The exception is simply logged, but it doesn&apos;t stop the application.
What would be needed to &quot;fix&quot; this issue is the ability to create scopes on the fly to be able to resolve more bindings. In the past, we use to keep scopes as long as the whole tree was not discarded, but this was holding to too much memory. This is why we now remove all scopes before returning the tree after all bindings have been resolved.
Creating scopes on the fly as its own set of issues that we never had time to work on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173612</commentid>
    <comment_count>7</comment_count>
    <who name="Sebastian Zarnekow">sebastian.zarnekow</who>
    <bug_when>2012-10-18 10:15:02 -0400</bug_when>
    <thetext>You&apos;re right, the exception did not surface to the user. My compile participant simply stopped working - silently. It took some time to figure out what was wrong :-( Therefore a more helpful entry in the log is greatly appreciated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173748</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 13:24:08 -0400</bug_when>
    <thetext>I know the pains of uninformative error messages so let&apos;s see what we can do:

- TypeBinding.getDeclaredFields() is API so we cannot add exceptions
  -&gt; we can only log a better message

- SourceTypeBinding, the source of the problem is part of ecj and must not
  depend on any classes from model or other packages
  -&gt; we need to invent a new Exception

- SourceTypeBinding.scope is accessed all over the place, but we might cut
  this down to to a meaningful list like this:
  - getMethods(char[])
  - methods()
  - resolveTypeFor(FieldBinding)
  - resolveTypesFor(MethodBinding)
  - sourceEnd()
  - sourceStart()
  - storedAnnotations(boolean) (?)
This should be the intersection of
- dereferences scope
- could potentially be called from DOM

Srikanth: I&apos;m marking this for review even before I have a patch to ask your opinion on adding specific error handling along the lines in this comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173913</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 20:01:55 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; ... In the past, we use to keep
&gt; scopes as long as the whole tree was not discarded, but this was holding to
&gt; too much memory. This is why we now remove all scopes before returning the
&gt; tree after all bindings have been resolved.

Does this mean by proposing bug 392333 I&apos;m going in circles, or could this make sense as an off-by-default option?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300687</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 11:01:23 -0400</bug_when>
    <thetext>I found this while skimming through my review requests:

(In reply to comment #8)
&gt; Srikanth: I&apos;m marking this for review even before I have a patch to ask your
&gt; opinion on adding specific error handling along the lines in this comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468427</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 03:03:42 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
&gt; I found this while skimming through my review requests:
&gt; 
&gt; (In reply to comment #8)
&gt; &gt; Srikanth: I&apos;m marking this for review even before I have a patch to ask your
&gt; &gt; opinion on adding specific error handling along the lines in this comment.

I am sorry, this somehow slipped my radar and the reminder too. Apologies.

How about not clearing the scopes if there is a compilation participant ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468677</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 09:02:16 -0400</bug_when>
    <thetext>I just noticed that during our test runs, org.eclipse.jdt.core.tests.dom.BatchASTCreationTests.test070 throws this
exception to apparently no deleterious end.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypeFor(SourceTypeBinding.java:1684)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields(SourceTypeBinding.java:883)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.availableFields(ReferenceBinding.java:223)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredFields(TypeBinding.java:244)
	at org.eclipse.jdt.core.tests.dom.BatchASTCreationTests.test070(BatchASTCreationTests.java:1661)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.runTest(SuiteOfTestCases.java:104)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.superRun(SuiteOfTestCases.java:88)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$1.protect(SuiteOfTestCases.java:76)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at org.eclipse.jdt.core.tests.model.SuiteOfTestCases$Suite.run(SuiteOfTestCases.java:85)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:131)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:382)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:236)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1438)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>430959</bug_id>
          
          <creation_ts>2014-03-23 14:16:00 -0400</creation_ts>
          <short_desc>[compiler][1.8][null] potential null pointer access when a proven @Nonnull variable is in &quot;if&quot;</short_desc>
          <delta_ts>2014-03-29 14:49:03 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Frits Jalvingh">jal</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2378874</commentid>
    <comment_count>0</comment_count>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-03-23 14:16:20 -0400</bug_when>
    <thetext>Eclipse Kepler with Java 8 compiler (released version   Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956

Code compiled with -source 1.8 gives an error on the following:
public class TestCase {
	@Nonnull
	private String getIt() {
		return &quot;World, Hello&quot;;
	}

	public void testCase(@Nullable String s) {
		if(s == null) {
			s = getIt();
		}
		if(s == null)    // &lt;&lt;-- caused by this
			System.out.println(&quot;Nopperdy&quot;);

		s.length();  //&lt;&lt; Potential null pointer access: the variable s may be null
	}
}

The error occurs ONLY if the &quot;if&quot; statement that does an extra check for null occurs. The first &quot;if&quot; should guarantee that &quot;s&quot; is nonnull; the compiler should conclude that the 2nd if is bogus.

Switching back the JDK used (and the compiler used) to 1.7 makes the error disappear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2378887</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-23 15:18:33 -0400</bug_when>
    <thetext>I haven&apos;t analyzed why switching between Java 7 vs 8 makes a difference, but flow analysis assumes, that a null check on a local variable indicates that the developer is unsure about its nullness, hence null should be assumed to be possible here. For double checking s.t. that the compiler already checked you may want to use an assert statement, the effect of which can be excluded from flow analysis.

BTW, I can only reproduce your results with
 - compliance 1.8
 - pre-1.8 null annotations 
   (not JSR 308 type annotations, o.e.j.annotation_2.0.0)

For compliance 1.8 my focus is on improving JSR 308 style annotations. Bugs in mixed configurations (1.8 compliance and pre-1.8 annotations) will be investigated at a lower priority.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2380606</commentid>
    <comment_count>2</comment_count>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-03-26 13:45:22 -0400</bug_when>
    <thetext>I agree the case is dodgy. I do not like assert because it&apos;s useless in production, which is where the unexpected ones occur.

I see now I also copied the wrong annotation - it was meant to be the one from 2.0.0 8-/. Indeed, if I fix the &quot;jsr305&quot; style annotations to use the same annotations as in the eclipse 2.0.0 jar (@Target({ElementType.TYPE_USE}) and so) this seems to work well (no error), so it&apos;s easy enough to skip without having to update all source to use the Eclipse annotations.
The only problem is that the compiler keeps dying with a stack overflow if I change the JSR305 ones. I reported that one as bug 431269.

As I plan to move to the &quot;proper&quot; annotation style (but by properly defining the JSR305 ones) this problem is not important for me at least.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2380694</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-26 15:57:41 -0400</bug_when>
    <thetext>(In reply to Frits Jalvingh from comment #2)
&gt; I agree the case is dodgy. I do not like assert because it&apos;s useless in
&gt; production, which is where the unexpected ones occur.

what&apos;s wrong with -ea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2380753</commentid>
    <comment_count>4</comment_count>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-03-26 18:55:58 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #3)
&gt; what&apos;s wrong with -ea?
I don&apos;t want to rely on that being present to catch errors early. It&apos;s more than likely it&apos;ll be not there when there is an unexpected problem. I would like to keep -ea for those cases when really expensive checks are being done (not that I ever had to, so far). I also think it&apos;s bad enough that we have to resort to more and more &quot;tricks&quot; like annotations for what should be core language in Java to get things that should be really solved in the language, but that&apos;s my opinion..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2382161</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-29 14:49:03 -0400</bug_when>
    <thetext>(In reply to Frits Jalvingh from comment #4)
&gt; I also think it&apos;s bad enough that we have
&gt; to resort to more and more &quot;tricks&quot; like annotations for what should be core
&gt; language in Java to get things that should be really solved in the language,
&gt; but that&apos;s my opinion..

We can easily agree on that, see slide #10 of https://www.eclipsecon.org/na2014/sites/default/files/slides/JDTEmbracesTypeAnnotations.pdf :) but then please keep reading ...

As for assertions: from what I learned at school, the assert keyword with its option -ea seems to be exactly what you need. If you want to disable disabling (sic) of runtime checks you can also use org.junit.Assert.* et al which, too, are recognized by our analysis. See bug 401159.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>151389</bug_id>
          
          <creation_ts>2006-07-21 06:34:00 -0400</creation_ts>
          <short_desc>[search] does not find reference to private binary member from anonymous</short_desc>
          <delta_ts>2014-10-21 02:56:20 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Tomasz Zarna">tomasz.zarna</assigned_to>
          <cc>Brian.Miller</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>frederic_fusier</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>pwebster</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="52913"
          type_id="1"
          status="?"
          setter="srikanth_sankaran"
          requestee="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>754379</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2006-07-21 06:34:04 -0400</bug_when>
    <thetext>I20060718-0800

Search does not find reference to private binary method from doubly-nested anonymous.

- import org.eclipse.jdt.debug.ui as binary plug-in
- open StepIntoSelectionActionDelegate
- search for references to method doStepIn(..)

=&gt; was: 1 match in
StepIntoSelectionActionDelegate.run(IAction)

=&gt; expected: second match in
StepIntoSelectionActionDelegate.runToLineBeforeStepIn(..)
    .new IDebugEventSetListener() {...}.new Runnable() {...}

BTW: Search &gt; Occurrenced in File &gt; Identifier finds the second reference
(i.e. DOM AST bindings are OK).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>846596</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2006-12-08 13:35:26 -0500</bug_when>
    <thetext>Problem also occurs for fields: class Browser from SWT has 9 references to field &quot;html&quot;, but search engine does not find the ones in org.eclipse.swt.browser.Browser.Browser(Composite, int).new OleListener() {...}.new Runnable() {...}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>901873</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2007-03-14 12:36:03 -0400</bug_when>
    <thetext>Could be related to bug 87165.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1113040</commentid>
    <comment_count>3</comment_count>
    <who name="Frederic Fusier">frederic_fusier</who>
    <bug_when>2007-12-05 16:53:19 -0500</bug_when>
    <thetext>*** Bug 212065 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1806584</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2010-08-30 10:39:40 -0400</bug_when>
    <thetext>*** Bug 323635 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1854049</commentid>
    <comment_count>5</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2010-12-08 04:15:53 -0500</bug_when>
    <thetext>*** Bug 332071 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2117044</commentid>
    <comment_count>6</comment_count>
      <attachid>216586</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-05-31 11:49:42 -0400</bug_when>
    <thetext>Created attachment 216586
Screenshot - 0 hits for binaries from b89848

I&apos;ve put up a simple test that I thought it&apos;s going to fail with no results found. It&apos;s based on another test for bug 89848 [1]:

public void testBug151389() throws CoreException {
	IType classFile = getClassFile(&quot;JavaSearchBugs&quot;, &quot;lib&quot;, &quot;b89848&quot;, &quot;X.class&quot;).getType();
	IMethod method = classFile.getMethod(&quot;bar&quot;, new String[0]);
	search(method, REFERENCES);
	assertSearchResults(
		&quot;lib/b89848/X$1.class java.lang.String b89848.&lt;anonymous&gt;.toString() EXACT_MATCH&quot;
	);
}

As I said, I was expecting it to fail, since after I have imported the class folder for the original test [2] and searched for bar refs in X.class I got 0 hits, see screenshot.

What am I missing?

[1] org.eclipse.jdt.core.tests.model.JavaSearchBugsTests.testBug89848()
[2] eclipse.jdt.core\org.eclipse.jdt.core.tests.model\workspace\JavaSearchBugs\lib\b89848</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2117045</commentid>
    <comment_count>7</comment_count>
      <attachid>216587</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-05-31 11:49:47 -0400</bug_when>
    <thetext>Created attachment 216587
mylyn/context/zip</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2117054</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-05-31 12:06:07 -0400</bug_when>
    <thetext>(In reply to comment #6)
I didn&apos;t look at the setup used in the test case, but a contributing factor could be that the super type of the anonymous class is coming from a different JAR.

Anyway, I guess it&apos;s easier to attack this bug by reproducing one of the examples in a runtime Eclipse and then checking where the reference gets dropped. Knowing the cause for the bug will make it easier to construct a test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2117791</commentid>
    <comment_count>9</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-01 12:24:37 -0400</bug_when>
    <thetext>Not sure if this is related, but what I noticed while debugging is that when asked JavaSearchScope[1] if it encloses a BinaryMethod[2] the answer is no/false.

Checking if one path encloses another is done in JavaSearchScope.encloses(String, String, int). In this particular case enclosingPath is &quot;/.org.eclipse.jdt.core.external.folders/.link4&quot; and path	&quot;D:/workspace/eclipse/jdt/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/workspace/JavaSearchBugs/lib/b89848/X.class&quot;. The check return false.

[1] JavaSearchScope on [
	/b89848/src
	D:\workspace\eclipse\jdt\eclipse.jdt.core\org.eclipse.jdt.core.tests.model\workspace\JavaSearchBugs\lib\b89848
]
[2] void foo() [in X [in X.class [in &lt;default&gt; [in D:\workspace\eclipse\jdt\eclipse.jdt.core\org.eclipse.jdt.core.tests.model\workspace\JavaSearchBugs\lib\b89848]]]]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2117830</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-06-01 13:24:10 -0400</bug_when>
    <thetext>I can&apos;t reproduce comment 0 in a fresh workspace. After importing only plug-in org.eclipse.jdt.debug.ui, StepIntoSelectionActionDelegate has too many compile errors (which can be seen in the ASTView), so search doesn&apos;t find anything at all.

Comment 1 seems to work fine now (the field is now org.eclipse.swt.browser.IE.html).


Bug 323635 (comment 4) is still easy to reproduce.

If you set a breakpoint in BasicSearchEngine.findMatches(..) line: 223, then you see that a search for references to
    org.junit.runners.ParentRunner.describeChild(T)
finds something in
    org.junit_v4.10.0\junit.jar|org/junit/runners/ParentRunner$4.class

But a search for references to
    org.junit.runners.ParentRunner.fSorter
doesn&apos;t find that anonymous class.

A problem could be that fSorter is a *private* field, so the access to fSorter in the anonymous compare method is not a direct field access, but a call to the synthetic ParentRunner.access$100(ParentRunner). In this situation, the search engine also has search for references to the accessor method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2118370</commentid>
    <comment_count>11</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-06-04 00:59:47 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; Not sure if this is related, but what I noticed while debugging is that when
&gt; asked JavaSearchScope[1] if it encloses a BinaryMethod[2] the answer is
&gt; no/false.
I think you are running into a separate issue. Probably the test case is different. 
- Problem should be in createHandle
- While, the problem should be in createHandle, it would be interesting to understand why encloses returns false in your testcase.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2126803</commentid>
    <comment_count>12</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-20 12:58:16 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; A problem could be that fSorter is a *private* field, so the access to fSorter
&gt; in the anonymous compare method is not a direct field access, but a call to the
&gt; synthetic ParentRunner.access$100(ParentRunner). In this situation, the search
&gt; engine also has search for references to the accessor method.

Does creating an OrPattern for the currently used FieldPattern and a MethodPattern for the synthetic accessor make any sense? This could be an output of SearchPattern.createPattern(IJavaElement, int, int) when looking for a private binary field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2127253</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-06-21 05:38:12 -0400</bug_when>
    <thetext>I don&apos;t think you can know upfront that a synthetic accessor may be part of the game and how it will be called. Compilers are quite free in how they generate synthetic methods.

AFAIK, search for references to binary members doesn&apos;t work at all without source. So I don&apos;t think this problem should be solved through the index, but through special processing of private binary members if the declaring class contains anonymous or other nested classes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2127953</commentid>
    <comment_count>14</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-22 08:38:33 -0400</bug_when>
    <thetext>The first difference I noticed while running a debug sessions for binaries vs sources search was in MatchLocator.reportMatching(...)[1]. For the search in sources created enclosing type represent an anonymous class[2], but for the binaries it&apos;s a top-level type[3].

However, when I tried to replace the enclosing type with an anonymous BinaryType, a moment later when visiting its methods[4] I couldn&apos;t create a ClassFileReader for it (the anonymous type is not in JavaModelManager&apos;s cache).

On the other hand, if I continue with the original enclosing type[2] creating a binary method[4] fails, returns null thus the match is not reported.

So the fix should be either in [1] and the ClassFileReader or in [4].

[1] MatchLocator.reportMatching(TypeDeclaration, IJavaElement, int, MatchingNodeSet, int):
...
if (member.isBinary())  {
	enclosingElement = ((IClassFile)this.currentPossibleMatch.openable).getType();
} else {
	enclosingElement = member.getType(new String(type.name), occurrenceCount);
}
...

[2] class &lt;anonymous #1&gt; [in comparator() [in ParentRunner [in [Working copy] ParentRunner.java [in org.junit.runners [in junitsrc [in org.junit]]]]]]
  int compare(T, T)
  
[3] class ParentRunner [in ParentRunner.class [in org.junit.runners [in D:\apps\e\bp\plugins\org.junit_4.10.0.v4_10_0_v20120426-0900\junit.jar]]]

[4]
JavaModelManager.getInfo(IJavaElement) line: 1941	
MatchLocator.classFileReader(IType) line: 241	
MatchLocator.createHandle(AbstractMethodDeclaration, IJavaElement) line: 465	
MatchLocator.reportMatching(AbstractMethodDeclaration, TypeDeclaration, IJavaElement, int, boolean, MatchingNodeSet) line: 2282	
MatchLocator.reportMatching(TypeDeclaration, IJavaElement, int, MatchingNodeSet, int) line: 2768	
MemberDeclarationVisitor.visit(TypeDeclaration, BlockScope) line: 274	
TypeDeclaration.traverse(ASTVisitor, BlockScope) line: 1341	
QualifiedAllocationExpression.traverse(ASTVisitor, BlockScope) line: 552	
ReturnStatement.traverse(ASTVisitor, BlockScope) line: 314	
MethodDeclaration.traverse(ASTVisitor, ClassScope) line: 307	
MatchLocator.reportMatching(AbstractMethodDeclaration, TypeDeclaration, IJavaElement, int, boolean, MatchingNodeSet) line: 2239	
MatchLocator.reportMatching(TypeDeclaration, IJavaElement, int, MatchingNodeSet, int) line: 2768	
MatchLocator.reportMatching(CompilationUnitDeclaration, boolean) line: 2495	
MatchLocator.process(PossibleMatch, boolean) line: 1738	
MatchLocator.locateMatches(JavaProject, PossibleMatch[], int, int) line: 1148	
MatchLocator.locateMatches(JavaProject, PossibleMatchSet, int) line: 1189	
MatchLocator.locateMatches(SearchDocument[]) line: 1321	
JavaSearchParticipant.locateMatches(SearchDocument[], SearchPattern, IJavaSearchScope, SearchRequestor, IProgressMonitor) line: 95	
BasicSearchEngine.findMatches(SearchPattern, SearchParticipant[], IJavaSearchScope, SearchRequestor, IProgressMonitor) line: 231	
BasicSearchEngine.search(SearchPattern, SearchParticipant[], IJavaSearchScope, SearchRequestor, IProgressMonitor) line: 515	
SearchEngine.search(SearchPattern, SearchParticipant[], IJavaSearchScope, SearchRequestor, IProgressMonitor) line: 584	
JavaSearchQuery.run(IProgressMonitor) line: 144	
InternalSearchUI$InternalSearchJob.run(IProgressMonitor) line: 91	
Worker.run() line: 54

[4] org.eclipse.jdt.internal.core.search.matching.MatchLocator.createBinaryMethodHandle(IType, char[], char[][])</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2127978</commentid>
    <comment_count>15</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-22 09:25:58 -0400</bug_when>
    <thetext>The ClassFileReader seems to have all the data required. In innerInfos array, it holds 4 items and one of them (ParentRunner$4) is for the anonymous class in question. 

So we could either include methods for member types in the result for #getMethods() or if the sought method cannot be found among those we could iterate over IBinaryNestedTypes returned from #getMemberTypes(). Ideally, a ClassFileReader would be created for each member type. Does it make any sense?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129524</commentid>
    <comment_count>16</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-06-27 02:02:33 -0400</bug_when>
    <thetext>(In reply to comment #14)
Essentially MatchLocator.reportMatching(...) takes the compiler element, creates the model element and reports. 

Now, as you have found, the hierarchy of the model elements are different in binary and source w.r.t to anonymous classes. Just look in the package explorer for a jar with the source code and you would see that the anonymous functions are not in the hierarchy. 

One way to make the fix could be is to make the model elements take care of the anonymous methods too. However, I am afraid that it could impact many other parts of model, search and may be JDT/UI too. One motivation to go for this route could be that, there could be more usage of closures from now onwards and having this feature can be nice. I think you are trying to recommend this kind of approach when you mentioned the fix in ClassFileReader. Just to note that fixes in methods like ClassFileReader could impact other components, which you need to take care of. 

Next you would have noticed that createHandle() is essentially returning the method element in the type with the same given name. This type (field name parent) is being wrong in the case of binary anonymous methods. I think if we could help if you could try to fix this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129688</commentid>
    <comment_count>17</comment_count>
      <attachid>217930</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-27 09:19:35 -0400</bug_when>
    <thetext>Created attachment 217930
Quick fix

(In reply to comment #16)

&gt; Next you would have noticed that 

You mean after fixing the model for binaries / fixing the ClassFileReader?

&gt; createHandle() is essentially returning the
&gt; method element in the type with the same given name. This type (field name
&gt; parent) is being wrong in the case of binary anonymous methods.

I&apos;m not sure if I&apos;m following, could you please rephrase the last two sentences.

In the meantime, I was able to create a quick fix which prints 3 refs in the Search view (see the upcoming screenshot). It does break JavaSearchBugsTests2.testBug342393() though [1], so I&apos;m not sure if it&apos;s going in the right direction.

[1] 
expected:
b342393/Generic.java A b342393.Generic$A.ONE:&lt;anonymous&gt;#1.getSquare() [getSquare] EXACT_MATCH\n
b342393/Generic.java A b342393.Generic$A.TWO:&lt;anonymous&gt;#1.getSquare() [getSquare] EXACT_MATCH\n
b342393/Generic.java A b342393.Generic$A.getSquare() [getSquare] EXACT_MATCH
actual:
b342393/Generic.java b342393.Generic$A.ONE [getSquare] EXACT_MATCH\n
b342393/Generic.java b342393.Generic$A.TWO [getSquare] EXACT_MATCH\n
b342393/Generic.java A b342393.Generic$A.getSquare() [getSquare] EXACT_MATCH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129704</commentid>
    <comment_count>18</comment_count>
      <attachid>217932</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-27 09:39:46 -0400</bug_when>
    <thetext>Created attachment 217932
Search for fSorter in org.junit sources</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129705</commentid>
    <comment_count>19</comment_count>
      <attachid>217933</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-27 09:40:03 -0400</bug_when>
    <thetext>Created attachment 217933
Search for fSorter in org.junit binaries</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129706</commentid>
    <comment_count>20</comment_count>
      <attachid>217934</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-06-27 09:40:29 -0400</bug_when>
    <thetext>Created attachment 217934
Search for fSorter in org.junit binaries with the quick fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138661</commentid>
    <comment_count>21</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-07-18 14:04:46 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; Created attachment 217930
&gt; Quick fix

Pushed to Gerrit as https://git.eclipse.org/r/#/c/6849/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138662</commentid>
    <comment_count>22</comment_count>
      <attachid>218889</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-07-18 14:06:02 -0400</bug_when>
    <thetext>Created attachment 218889
Typos

Typos extracted from from the Quick fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138886</commentid>
    <comment_count>23</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-07-19 05:33:15 -0400</bug_when>
    <thetext>(In reply to comment #22)
&gt; Created attachment 218889 [details] [diff]
&gt; Typos

 /**
- * Common functionality for Binary member handles.
+ * Common functionality for Binary member handlers.
  */
 public abstract class BinaryMember extends NamedMember {

=&gt; This change is wrong. IJavaElements are really handles (value objects that refer to the actual data structure).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2139032</commentid>
    <comment_count>24</comment_count>
      <attachid>218928</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-07-19 10:15:10 -0400</bug_when>
    <thetext>Created attachment 218928
Typos

(In reply to comment #23)
&gt; =&gt; This change is wrong. IJavaElements are really handles (value objects that
&gt; refer to the actual data structure).

Oops, sorry about that. Removed the change from the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2140712</commentid>
    <comment_count>25</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-07-24 08:35:01 -0400</bug_when>
    <thetext>(In reply to comment #22)
&gt; Created attachment 218889
&gt; Typos

Pushed to Gerrit as https://git.eclipse.org/r/#/c/6934/1/.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2148557</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-15 07:03:44 -0400</bug_when>
    <thetext>I&apos;ll take this up for review now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468426</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 02:56:20 -0400</bug_when>
    <thetext>Manoj, please see how to take this forward. TIA.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>216586</attachid>
            <date>2012-05-31 11:49:00 -0400</date>
            <delta_ts>2012-05-31 11:49:42 -0400</delta_ts>
            <desc>Screenshot - 0 hits for binaries from b89848</desc>
            <filename>bug151389.png</filename>
            <type>image/png</type>
            <size>27242</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>216587</attachid>
            <date>2012-05-31 11:49:00 -0400</date>
            <delta_ts>2012-05-31 11:49:47 -0400</delta_ts>
            <desc>mylyn/context/zip</desc>
            <filename>mylyn-context.zip</filename>
            <type>application/octet-stream</type>
            <size>49719</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>217930</attachid>
            <date>2012-06-27 09:19:00 -0400</date>
            <delta_ts>2012-06-27 09:19:35 -0400</delta_ts>
            <desc>Quick fix</desc>
            <filename>bug151389_quickFix.patch</filename>
            <type>text/plain</type>
            <size>1064</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>217932</attachid>
            <date>2012-06-27 09:39:00 -0400</date>
            <delta_ts>2012-06-27 09:39:46 -0400</delta_ts>
            <desc>Search for fSorter in org.junit sources</desc>
            <filename>bug151389_src.png</filename>
            <type>image/png</type>
            <size>6488</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>217933</attachid>
            <date>2012-06-27 09:40:00 -0400</date>
            <delta_ts>2012-06-27 09:40:03 -0400</delta_ts>
            <desc>Search for fSorter in org.junit binaries</desc>
            <filename>bug151389_bin.png</filename>
            <type>image/png</type>
            <size>4696</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>217934</attachid>
            <date>2012-06-27 09:40:00 -0400</date>
            <delta_ts>2012-06-27 09:40:29 -0400</delta_ts>
            <desc>Search for fSorter in org.junit binaries with the quick fix</desc>
            <filename>bug151389_bin-fix1.png</filename>
            <type>image/png</type>
            <size>5352</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218889</attachid>
            <date>2012-07-18 14:06:00 -0400</date>
            <delta_ts>2012-07-19 10:15:10 -0400</delta_ts>
            <desc>Typos</desc>
            <filename>bug151389_typos.patch</filename>
            <type>text/plain</type>
            <size>5372</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218928</attachid>
            <date>2012-07-19 10:15:00 -0400</date>
            <delta_ts>2012-07-24 08:35:26 -0400</delta_ts>
            <desc>Typos</desc>
            <filename>bug151389_typos.patch</filename>
            <type>text/plain</type>
            <size>4706</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>426443</bug_id>
          
          <creation_ts>2014-01-23 05:48:00 -0500</creation_ts>
          <short_desc>[compiler][flow] Var initialization within an argument to JUnit assertTrue call not honored for definite assignment</short_desc>
          <delta_ts>2016-03-25 10:30:31 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marko Topolnik">mt4web</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>sasikanth.bharadwaj</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353416</commentid>
    <comment_count>0</comment_count>
    <who name="Marko Topolnik">mt4web</who>
    <bug_when>2014-01-23 05:48:31 -0500</bug_when>
    <thetext>The following snippet:

package org.junit;
public class Assert {
  public static void assertTrue(boolean b) {}
}

package test;
import static org.junit.Assert.assertTrue;
public class Test {
  void test() {
    int i;
    assertTrue((i = 2) == 2);
    assertTrue(i == 2); // ERROR!
  }
}

results in the error &quot;The local variable i may not have been initialized&quot; on the line marked with the inline comment &quot;ERROR!&quot;. The same happens for assertFalse and potentially other Assert methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358853</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-04 19:31:48 -0500</bug_when>
    <thetext>We have special treatment for assertTrue, because most users don&apos;t consider the assert as part of the program (more documenting a contract). Side-effects inside an assert call are uncommon. I&apos;d say, they&apos;re against the idea of assert.

Still the analysis could be smarter. Low priority for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453455</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-18 00:33:59 -0400</bug_when>
    <thetext>Sasi, see org.eclipse.jdt.internal.compiler.ast.MessageSend.detectAssertionUtility(int)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454511</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-20 20:56:21 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; We have special treatment for assertTrue, because most users don&apos;t consider
&gt; the assert as part of the program (more documenting a contract).
&gt; Side-effects inside an assert call are uncommon. I&apos;d say, they&apos;re against
&gt; the idea of assert.

In fact, the JLS section 14.10 says:

Because assertions may be disabled, programs must not assume that the expressions
contained in assertions will be evaluated. Thus, these boolean expressions should
generally be free of side effects. Evaluating such a boolean expression should not
affect any state that is visible after the evaluation is complete. It is not 
illegal for a boolean expression contained in an assertion to have a side effect, 
but it is generally inappropriate, as it could cause program behavior to vary 
depending on whether assertions were enabled or disabled.

// --

I recommend closing this WONTFIX.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454541</commentid>
    <comment_count>4</comment_count>
    <who name="Marko Topolnik">mt4web</who>
    <bug_when>2014-09-21 03:29:09 -0400</bug_when>
    <thetext>&gt; In fact, the JLS section 14.10 says:
&gt; 
&gt; Because assertions may be disabled, programs must not assume that the expressions
&gt; contained in assertions will be evaluated. Thus, these boolean expressions should
&gt; generally be free of side effects. Evaluating such a boolean expression should not
&gt; affect any state that is visible after the evaluation is complete. It is not 
&gt; illegal for a boolean expression contained in an assertion to have a side effect, 
&gt; but it is generally inappropriate, as it could cause program behavior to vary 
&gt; depending on whether assertions were enabled or disabled.
&gt; 
&gt; I recommend closing this WONTFIX.

I don&apos;t see how this could possibly apply to what is under discussion here, even by analogy. JUnit assertion may not be disabled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454542</commentid>
    <comment_count>5</comment_count>
    <who name="Marko Topolnik">mt4web</who>
    <bug_when>2014-09-21 03:41:21 -0400</bug_when>
    <thetext>(In reply to Marko Topolnik from comment #4)
&gt; &gt; In fact, the JLS section 14.10 says:
&gt; &gt; 
&gt; &gt; Because assertions may be disabled, programs must not assume that the expressions
&gt; &gt; contained in assertions will be evaluated. Thus, these boolean expressions should
&gt; &gt; generally be free of side effects. Evaluating such a boolean expression should not
&gt; &gt; affect any state that is visible after the evaluation is complete. It is not 
&gt; &gt; illegal for a boolean expression contained in an assertion to have a side effect, 
&gt; &gt; but it is generally inappropriate, as it could cause program behavior to vary 
&gt; &gt; depending on whether assertions were enabled or disabled.
&gt; &gt; 
&gt; &gt; I recommend closing this WONTFIX.
&gt; 
&gt; I don&apos;t see how this could possibly apply to what is under discussion here,
&gt; even by analogy. JUnit assertion may not be disabled.

Plus, I would consider it a quite dangerous precedent for the Eclipse compiler to openly decide to disregard specified language semantics and embrace peculiar, non-compliant behavior. As far as language specification is concerned, JUnit has no special treatment and assertTrue() is just another Java method.

Also note that the current behavior would be non-compliant even if it was happening within the Java assert statement. That is what your JLS quote specifically notes, in fact.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454546</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 04:51:03 -0400</bug_when>
    <thetext>(In reply to Marko Topolnik from comment #4)

&gt; I don&apos;t see how this could possibly apply to what is under discussion here,
&gt; even by analogy. JUnit assertion may not be disabled.

Of course,

(In reply to Marko Topolnik from comment #5)

&gt; JUnit has no special treatment and assertTrue() is just
&gt; another Java method.

Again. Overworked, sleep deprived :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550957</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-23 15:53:54 -0400</bug_when>
    <thetext>The connection between &quot;assert&quot; and Assert.assertTrue() is: upon user request we have encoded knowledge that the JUnit method is to some degree similar to the keyword:
- people are not interested in redundant-check-warnings against the argument
- we want to take forward the knowledge about exceptions raised when false

Somewhere in this game we a losing initialization information, which is for sure a bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2687139</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2016-03-25 10:30:31 -0400</bug_when>
    <thetext>Too much on my plate for 4.6. Bulk deferral to 4.7</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>137953</bug_id>
          
          <creation_ts>2006-04-21 10:54:00 -0400</creation_ts>
          <short_desc>Order deprecated types below non-deprecated ones</short_desc>
          <delta_ts>2013-09-23 03:32:37 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marshall Schor">schor</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>mistria</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>676547</commentid>
    <comment_count>0</comment_count>
    <who name="Marshall Schor">schor</who>
    <bug_when>2006-04-21 10:54:59 -0400</bug_when>
    <thetext>If you use the completion gestures (ctl-space after typing the start of a class name, for instance), it shows types that match, including deprecated ones.  It would be good for naive or impatient users to automatically order things so that in the case where two (or more) class names match, to order the deprecated ones below the non-deprecated ones.  We had one user complain about this - he accidently picked the deprecated one.  (There is a not-very-prominent decoration on the icon indicating it is deprecated - obviously in this case not enough for our user to notice).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>678349</commentid>
    <comment_count>1</comment_count>
    <who name="David Audel">david_audel</who>
    <bug_when>2006-04-24 11:48:45 -0400</bug_when>
    <thetext>Currently, there is an option to filter deprecated elements (Preferences&gt;Java&gt;Editor&gt;Content Assist&gt;Sorting and Filtering&gt;Hide deprecated references) and when this option is disabled, deprecated proposals have a decoration on the icon.

But this is true that the deprecation isn&apos;t currently a criteria of sorting.

It&apos;s too late to add this kind of enhancement in 3.2 but this something we should investigate after 3.2.

Deferred post 3.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1583812</commentid>
    <comment_count>2</comment_count>
    <who name="Denis Roy">denis.roy</who>
    <bug_when>2009-08-30 02:17:27 -0400</bug_when>
    <thetext>As of now &apos;LATER&apos; and &apos;REMIND&apos; resolutions are no longer supported.
Please reopen this bug if it is still valid for you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1746633</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-05-26 06:45:09 -0400</bug_when>
    <thetext>Makes sense: we do the same in Open Type. But of course this must only be done if the names exactly match i.e. lower the relevance for the deprecated thing in that case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1746965</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2010-05-26 11:14:56 -0400</bug_when>
    <thetext>Ayush, please take a look. Right now deprecated status or otherwise is
not used in computing the relevance of a proposal ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309668</commentid>
    <comment_count>5</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2013-09-23 03:32:16 -0400</bug_when>
    <thetext>Using JDT 3.9.0, I noticed the following use-case which makes completion favour deprecated types over non-deprecated ones.

With JUnit 4.11 in classpath (contains both org.junit and junit.framework packages), type &quot;Assert.assertNonN&quot; without the Assert type being imported, then run Ctrl-Space for completion. The first method suggested is the one from the deprecated type junit.framework,Assert.
In such case, I would have prefered JDT to put org.junit.Assert.assertNonNull as first proposal.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>58802</bug_id>
          
          <creation_ts>2004-04-16 05:30:00 -0400</creation_ts>
          <short_desc>Disable javadoc checks for certain files (tests)</short_desc>
          <delta_ts>2006-10-16 19:15:25 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.0</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Robert Wenner">robert.wenner</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>259912</commentid>
    <comment_count>0</comment_count>
    <who name="Robert Wenner">robert.wenner</who>
    <bug_when>2004-04-16 05:30:17 -0400</bug_when>
    <thetext>I would like to disable Javadoc for some files, e.g. my JUnit  tests have public
methods, but I don&apos;t want to comment them. Same for my mock objects.

A way to exclude some files (e.g. with a regular expression) from the javadoc
checks would be great.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>260024</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2004-04-16 09:24:22 -0400</bug_when>
    <thetext>This is an enhancement, not a bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>274833</commentid>
    <comment_count>2</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2004-05-10 05:12:54 -0400</bug_when>
    <thetext>Post 3.0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>810642</commentid>
    <comment_count>3</comment_count>
    <who name="Robert Wenner">robert.wenner</who>
    <bug_when>2006-10-16 19:15:25 -0400</bug_when>
    <thetext>This is now 2 and a half years old; is this going to be addressed at all?
As is right now it makes Javadoc checking useless because I get way too many messages. They may even hide the real warnings I&apos;d know about.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>116143</bug_id>
          
          <creation_ts>2005-11-13 13:49:00 -0500</creation_ts>
          <short_desc>Need the ability to provide preprocessed source code to compiler</short_desc>
          <delta_ts>2011-03-29 09:51:45 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Craig Setera">craigsfnet</reporter>
          <assigned_to name="JDT-Core-Inbox">jdt-core-inbox</assigned_to>
          <cc>alexrushton</cc>
    
    <cc>amaguran</cc>
    
    <cc>bartek.nospam</cc>
    
    <cc>benno.baumgartner</cc>
    
    <cc>csnellman</cc>
    
    <cc>d.nachev</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>danrubel</cc>
    
    <cc>darin.eclipse</cc>
    
    <cc>digulla</cc>
    
    <cc>eclipse</cc>
    
    <cc>feng.wang</cc>
    
    <cc>francois</cc>
    
    <cc>frouse</cc>
    
    <cc>gang_ma</cc>
    
    <cc>gunnar</cc>
    
    <cc>hjohn</cc>
    
    <cc>hugo.raniere</cc>
    
    <cc>jacek.pospychala</cc>
    
    <cc>jbacon</cc>
    
    <cc>jerome_lanneluc</cc>
    
    <cc>khorowit</cc>
    
    <cc>michael.iles</cc>
    
    <cc>Mike_Wilson</cc>
    
    <cc>mlists</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>philippe_mulet</cc>
    
    <cc>pombredanne</cc>
    
    <cc>public</cc>
    
    <cc>pwebster</cc>
    
    <cc>ricardo.ekm</cc>
    
    <cc>scheng</cc>
    
    <cc>wds057</cc>
    
    <cc>wgp010</cc>
    
    <cc>xfq473</cc>
          
          <votes>60</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>563012</commentid>
    <comment_count>0</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-13 13:49:23 -0500</bug_when>
    <thetext>For the EclipseME project (http://eclipseme.org) we are looking to provide
preprocessing support similar to the support provided by the Antenna Ant tasks
(http://antenna.sourceforge.net/#preprocess).  These preprocessor directives
help J2ME developers to deal with the many differences between various
constrained devices without having significant extra code where the memory is
not available.  The proposed Mobile Tools for Java Eclipse project can take
advantage of this functionality as well.

In order to maintain a development process that looks and feels equivalent to
the current Eclipse workflow, it is necessary to be able to provide the compiler
with source code that differs from the source code that actually exists in the
file system.  The only other option is to alter the actual source file with a
builder that runs before the JDT compiler builder.  This is a poor solution, as
it will cause the source to be rewritten whenever changes to the preprocessor
definitions are made, which will cause those files to be flagged as changes to
source control.

This bug attaches a patch to the current CVS HEAD JDT core support that provides
a new &quot;sourceCodeProviders&quot; extension point.  A source code provider can be
registered to provide preprocessed or otherwise altered source code to the
org.eclipse.jdt.internal.core.builder.SourceFile class when it is queried via
the #getContents method.  The source code providers are related to a project
nature, limiting their effect to projects that can actually take advantage of
the function.

It would be excellent if this functionality could be considered for inclusion
into the 3.2 release stream as is or with appropriate changes.  I believe this
is generally useful functionality built in a way that various project types can
easily take advantage of it.

Thanks for consideration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>563014</commentid>
    <comment_count>1</comment_count>
      <attachid>29838</attachid>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-13 13:49:59 -0500</bug_when>
    <thetext>Created attachment 29838
Patch to provide source code providers extension to JDT Core</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564153</commentid>
    <comment_count>2</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2005-11-15 03:11:41 -0500</bug_when>
    <thetext>Kent - could compilation participants solve this one too ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564373</commentid>
    <comment_count>3</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-15 10:45:51 -0500</bug_when>
    <thetext>My initial look at this support in CVS makes me think the compilation
participants might work.  I can play with it a bit on HEAD.  When is this
targetted to be available in a milestone build?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564378</commentid>
    <comment_count>4</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2005-11-15 10:51:22 -0500</bug_when>
    <thetext>I cannot see the participants helping you since its really intended for 
applications that generated additional source files, based on the files about 
to be compiled.

In your case, you just want to change the source that the compiler sees. An in-
place preprocessor makes more sense.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564379</commentid>
    <comment_count>5</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-15 10:54:38 -0500</bug_when>
    <thetext>I guess I&apos;m confused.  I must have read the code wrong.  It looked like I could
make arbitrary changes to the AST of the compilation unit?  If so, I can
&quot;comment out&quot; the code that is not enabled via the AST before the compiler get
ahold of it.  Am I mis-reading this?  If not, maybe the concept should be
extended to allow for this to cover my case as well?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564387</commentid>
    <comment_count>6</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2005-11-15 11:05:44 -0500</bug_when>
    <thetext>The API is not complete. The call you saw only handled the case of the 
reconcile operation, which is not called during the build loop.

The work in progress API for the build path (not released yet) does not 
provide a way for you to change the source of a file.

The problem with allowing you to do that is memory usage. We would need to 
read the source for every source file about to compiled &amp; cache your changes 
in memory. For large enough projects, this would cause the VM to run out of 
memory.

We currently only read the source for a file at a time while its parsed, not 
all source files involved in the build cycle.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>564449</commentid>
    <comment_count>7</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-15 12:01:21 -0500</bug_when>
    <thetext>I&apos;m perfectly fine with not using this support for my required functionality. 
I&apos;m back to believing that we need something like the source code providers I
proposed in this bug.  In that type of a design, my preprocessing builder can
run before the compiler and output the preprocessed content to a temporary
directory.  Then the source code provider in this case would pull the
preprocessed output for every source code request.  This avoids the need to
calculate the deltas more than once and keeps the source content out of memory.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>566140</commentid>
    <comment_count>8</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-17 08:28:39 -0500</bug_when>
    <thetext>Any further thoughts here?  What are the next steps required to move this
functionality along?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>566257</commentid>
    <comment_count>9</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2005-11-17 10:36:24 -0500</bug_when>
    <thetext>You entered the bug on Sunday.

It will take more than a few days before we can find time to evaluate the 
patch. ;)

We have quite a few things on the go already.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>566260</commentid>
    <comment_count>10</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-17 10:39:48 -0500</bug_when>
    <thetext>What?  I&apos;m not the top priority? :-)

Sorry.  Wasn&apos;t so much looking for a yes/no on the patch as a general &quot;good
idea&quot; or &quot;bad idea&quot;.  Basically, in the event that something like this is not
going to be accepted (my patch or or something similar), I need to figure out
what that means to this functionality in EclipseME.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>566296</commentid>
    <comment_count>11</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2005-11-17 11:23:45 -0500</bug_when>
    <thetext>How does your patch affect a Java editor? Does quick fix still work?

Is the Debugger happy or is it confused by line numbers being off?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>566306</commentid>
    <comment_count>12</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-17 11:33:02 -0500</bug_when>
    <thetext>That is a good question.  The patch itself doesn&apos;t really dictate what the
source provider does or does not do to the source code.  So, it would be fairly
easy to generate processed source code that has line numbers that no longer
match the originals.  In the case of most of the EclipseME directives, I think
this can be somewhat handled by commenting out code, which should leave the line
numbers alone.  There is the ability to do an &quot;include&quot; which would most likely
break line number debugging.

Again, this all comes back to the source code provider.  I&apos;m not sure there is
any way to avoid breakage in certain cases, but I&apos;m open to other ideas to solve
the problem.  I don&apos;t think the patch as it stands makes the prospect any better
or worse.  I&apos;m guessing that users of this functionality would be willing to
accept certain debugging problems for the added functionality.

The other side of things that I&apos;m not really up to speed on is the source
providers for the debugger.  If you assume that the preprocesser runs as a
builder prior to the JDT compiler and stores the processed output, it may be
possible to also configure where the source is loaded by the debugger to point
to the preprocessed output.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>574814</commentid>
    <comment_count>13</comment_count>
    <who name="Fred Grott">fred.grott</who>
    <bug_when>2005-11-30 07:29:15 -0500</bug_when>
    <thetext>Craig,

Sounds like this:

The other side of things that I&apos;m not really up to speed on is the source
providers for the debugger.  If you assume that the preprocesser runs as a
builder prior to the JDT compiler and stores the processed output, it may be
possible to also configure where the source is loaded by the debugger to point
to the preprocessed output.

..Might be the way to go..the other thought is it could at a later date provide porting hooks via some AOP/aspectj process...Tira Wireless rewrote javassit to use aop to preprcoessosurce for porting beteween j2me midp implementations..Your gem of an idea is solid I think and has promise..

Fred Groitt(aka shareme)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>574837</commentid>
    <comment_count>14</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-30 08:16:38 -0500</bug_when>
    <thetext>I looked at this quite extensively over the holiday.  In terms of the question about whether or not this effects the editor, the answer in my case is no.  The builder run after the save is completed and the source uses Java comments to &quot;hide&quot; the preprocessor defines from the standard compiler.  I do think there is room for additional functionality (folding, highlighting) for these syntax elements, but it is not *necessary* nor does it affect this particular enhancement request.

Fred is right in terms of the debugger source providers.  The way that this is currently working in my workspace is that the preprocessor builder runs before the Java compiler and writes a new copy of the file into a derived file in a subdirectory.  This extension point would be used to point the Java compiler to this derived file and the debugger source providers support would be used to include this directory in a source resolution search.  In this way, the user will be debugging the exact source of the file *after* processing.

At this point, the only thing I have any concern with in terms of this patch is how to &quot;safely&quot; tie this provider to a project nature.  As it stands now, multiple source code providers could potentially be attached to a single project nature.  The code as it stands will choose one.  In practice I don&apos;t believe this is an issue, but it is a minor hole in the extension point as currently defined.  This is something that could just be documented or perhaps requires a bit more thought.

Any further thoughts?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>574947</commentid>
    <comment_count>15</comment_count>
    <who name="Darin Wright">darin.eclipse</who>
    <bug_when>2005-11-30 10:35:00 -0500</bug_when>
    <thetext>Debug commnet: as already noted, the source lookup path could be modified to retrieve the &quot;pre-processed&quot; source, rather than the original source. (I&apos;m not sure if this is what developers want though).

Alternately, a more complex solution would be required, where the pre-processor client would also have an opportunity to slam the debug line number table before writing the class file, in order to map back to the original source. </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>575200</commentid>
    <comment_count>16</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-11-30 14:19:19 -0500</bug_when>
    <thetext>I think for an initial release, the current debug source support should suffice for my needs.  Longer term, there may be a need/use for something more sophisticated for source lookup (if it doesn&apos;t already exist).  For instance, the preprocessor I&apos;ve built to match Antenna allows for an &quot;include&quot; directive.  My current plan is that the debugger will just debug the included content within the processed file.  Longer term it might be nice to actually be able to direct the debugger to lines within the original included file.  In this case, the line number table won&apos;t help because the lines would actually exist in another file.

Does the debug framework have anything like this?  As I said, I don&apos;t think it is necessary in the short term.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>579209</commentid>
    <comment_count>17</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-12-06 17:15:38 -0500</bug_when>
    <thetext>Any new thoughts on this patch?  Any chance it will be integrated into one of the upcoming milestones?  I hate to be a pain, but I have EclipseME users that would love to have the support that depends on this.  It seems if there is no more discussion, that someone should be able to say yes or no to the patch.  If there is more discussion to be had or changes to be made to the support, I&apos;d love to help make that happen.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>591394</commentid>
    <comment_count>18</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2005-12-21 13:07:44 -0500</bug_when>
    <thetext>I wonder if there could be a hook or callback that compiler will call after parsing an AST, so plugins may apply some transformations right on the AST that will be compiled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>591420</commentid>
    <comment_count>19</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2005-12-21 13:54:49 -0500</bug_when>
    <thetext>Although I think there is room for an AST-based solution, I&apos;m not sure that is the best solution for the current use case EclipseME has a need for.  The problem with an AST-based solution is that the changes need to be recalculated and reapplied every time that the compiler needs the AST for a compilation.  I haven&apos;t spent a lot of time looking at all of the paths through that code, but I would imagine the AST will be built more often than the source actually changes.  In that case, having a version of the source on disk with the appropriate changes already in place should be faster than reapplying the changes to the AST over and over.  Essentially, the disk becomes the cache of the processed document.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628072</commentid>
    <comment_count>20</comment_count>
    <who name="BenH">ben_hutchison</who>
    <bug_when>2006-02-22 01:01:24 -0500</bug_when>
    <thetext>I am a user of EclipseME. I am keenly waiting for progress on this issue. I imagine the other 40 people who voted for it are also waiting for progress. 

I want to know why after more than 3 months, we havent had any evaluation from the Eclipse core team.

The reason it is so important to us is that you cannot do commercial-level J2ME development without pre-compilation. The platforms variations are just too great, and code space is so tight that we cannot afford to ship unneeded code.

With ExclipseME we have a fantastic tool that very cleverly adapts the Eclipse core to J2ME. But EclipseMe has a weight around its neck. It cannot offer Pre-processing, the most wanted &amp; requested feature in the developer community, because of missing support in the core Eclipse platform.

J2ME is an extremely fast moving industry. For those of us who have adopted Eclipse as our development environment of choice, its frustrating to sit helplessly, month after month, waiting for the powers that manage the core to consider our request.

And finally, Netbeans can do it. Why cant Eclipse?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628284</commentid>
    <comment_count>21</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-02-22 10:13:18 -0500</bug_when>
    <thetext>Well Ben its very simple - JDT Core has over 500 open PRs for bugs that are already part of the release.

Clearly the users that want to use the patch can apply it for the short term.

And as for having to wait month after month (a little exaggeration maybe?) - the patch was provided half way thru the 3.2 development cycle, when our development plan was already set.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628473</commentid>
    <comment_count>22</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-02-22 12:43:04 -0500</bug_when>
    <thetext>I should add that we do think the problem is worth addressing, but we want a solution that fits in with all of the tools: the editor, code assist, debugger etc.

Several teams have existing preprocessors, but they have to remember to manually edit the original source after &apos;fixing&apos; it in the debugger. They accept that their solution is poor but can live with it.

When we address this problem, I think we should provide them with a better solution &amp; not just a different implementation of their existing solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628747</commentid>
    <comment_count>23</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-02-22 17:12:34 -0500</bug_when>
    <thetext>I agree. Integration is key here. We do want a solution which can scale, where all existing tools are going to perform in a seamless fashion (think of search, codeassist as well etc...). Editor must reconcile the right source, and still deal with preprocessed code at some point. 

I also think as Darin that the client doesn&apos;t want to see preprocessed code in the end. 

This feels really close to what JSPs are doing today, and they plug into our layer, and provide some builder for it. In my original comment about compiler participant, I was hoping we could add some specific hook for preprocessing, but this did not happen by M5, due to other fights on other front.

Still this is an interesting problem to tackle, but we want a consistent solution, and not an intermediate one which we will have to live with forever.
Looks like we should reconsider this issue early in our 3.3 dev cycle.

Craig - would you be interested in documenting exactly what is the usecase and expectations ? </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628752</commentid>
    <comment_count>24</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-02-22 17:16:09 -0500</bug_when>
    <thetext>To clarify, in the original description, you mostly mentionned hooking into build process, and also told about debugger. What about all the rest of the tooling ?
How do you foresee developping with autobuild turned off ? In this mode, the source model is still evolving as changes are made; which means preprocessing needs to occur not just while compiling for building.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>628826</commentid>
    <comment_count>25</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-02-22 19:16:49 -0500</bug_when>
    <thetext>Philippe and Kent,

Let me start by saying thanks for all that you do.  I recognize that the Eclipse platform is a huge effort and that all requests such as this cause ripple effects.  I understand that this type of functionality needs to be discussed and a plan must be put together to address all of the concerns.  I would guess that some of the frustration that people, including myself, are having is the relatively low amount of discussion of this new feature.  If I felt that we were talking this through and working on a plan to address the issue, I would be somewhat less concerned.  I have considered providing a patched version of this functionality for my users, but I&apos;m concerned with betting on this and having the direction change drastically.

In terms of use cases, I&apos;m not sure how much more I can say in addition to the previous discussion.  I do feel that this functionality is somewhat different than something like JSP processing.  In JSP processing, you start with something that looks very little like Java source files and translate that into Java source code.  It is definitely more of a hybrid situation.  In the preprocessing case, it seems that the user expects it to act very much like a standard Java source file.

As previously discussed, there are a lot of aspects to this functionality.  With that said, I think there is a spectrum ranging from &quot;necessary&quot; to &quot;nice&quot;.  I&apos;m sure there are other things, but here is a list in order or &quot;necessity&quot; in my mind.

- Ability to influence the source input to the Java compiler
- Ability to influence the debugger to track this information.  (I&apos;m not sure how this would work in practice, as line number tables don&apos;t allow cross-file references as far as I know.)
- Ability to influence the editor functionality.  For instance, to recognize that a block of code is currently &quot;disabled&quot; and therefore the error analysis should not notice the variable declarations in that block.

I&apos;m sure there are many other aspects to this that I&apos;m not thinking about at this point.  I would argue that these don&apos;t have to be tackled all at one time.  Adding the ability to feed the java compiler a set of source code adds value immediately, although with some potential rough edges.  Those rough edges do not negate the positives that are provided by this functionality.  I believe that as long as the approach for one of these features does not preclude adding the next level of functionality, it really is not necessary to solve them all at the same time.

As I said previously, I&apos;m not sure what other information I can provide in terms of use cases than can be found throughout this bug report.  I&apos;m very interested in helping to drive this forward and will provide as much information as I can.  I&apos;m just happy to have this conversation moving forward at least a little bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>655629</commentid>
    <comment_count>26</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-04-02 19:06:47 -0400</bug_when>
    <thetext>I spent some time looking at this during my flights to/from EclipseCON.  It really looks to me like the compilation participant functionality may be the &quot;correct&quot; way to handle this.  I understand there are some concerns about how to make that approach scale that are going to need to be addressed.  Since it is obvious that this functionality is not going to make it into Eclipse 3.2, I&apos;m looking for a bit of help to tide my users over until the next release of Eclipse when this is done right.  

In previous discussions, there was some talk of providing a &quot;patched&quot; version of JDT core with my functionality.  I&apos;m not a big fan of doing this due to the maintenance/upkeep of the patch.  Are there any other options here?  Is there some way that I can inject this functionality without having to build a patched version of JDT core?

Assuming the answer to the above is no, how do I build a patched version?  Is my best option to just do a plugin export or is there a better way to do this?  

Is there any way to conditional extend the extension point?  It would be nice if EclipseME could gracefully handle the case where the user does not have the patched functionality available.  I&apos;m looking for any tips to help make this functionality work as smoothly as possible given the circumstances.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>655823</commentid>
    <comment_count>27</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-04-03 04:19:11 -0400</bug_when>
    <thetext>As said earlier, will queue this for 3.3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>655958</commentid>
    <comment_count>28</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-04-03 08:15:24 -0400</bug_when>
    <thetext>I understand that there won&apos;t be anything official until later.  I&apos;m just hoping that someone can help me do a short-term workaround.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>687233</commentid>
    <comment_count>29</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-02 22:28:40 -0400</bug_when>
    <thetext>Why did this get resolved?  Why isn&apos;t it just open with a 3.3 target milestone?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>695516</commentid>
    <comment_count>30</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2006-05-10 15:59:45 -0400</bug_when>
    <thetext>Maybe allowing the patch tool as part of the build process would help.

Here is the idea: Original sources are in base/. base/ offers the full Java options (classpath, navigation, etc) but the code in base/ is *not* compiled. This is under version control.

patches/ contains the modification rules (standard patches). Also under version control.

Lastely, there is build-src/ which contains the processed sources. This is not under version control but compiled by javac.

In a second step, there could be a path which contains scripts which are applied during the build step.

The important part here would be to create a list which maps the source lines of the resulting code to the source files (patches, real source, script) where they came from.

In the debbugger, we&apos;ll need a view which shows the generated source and navigation help to go to the places which contributed to every line.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>696304</commentid>
    <comment_count>31</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-11 07:20:58 -0400</bug_when>
    <thetext>I guess I&apos;m confused by Aaron&apos;s last suggestion.  There have been a number of suggestions along the way (in and out of this bug).  In the end, if it isn&apos;t tied directly into the JDT compiler, it isn&apos;t going to give the appropriate user experience.  I&apos;ve been hoping to find some time to look closer at what it would take to make the compilation participants do what needs to be done, but I&apos;ve just been unable to find that time.  Having looked at this, I do still believe the compilation participants support is still a better place for this functionality (changing the AST during compilation) than my original source code providers patch,  but I&apos;m willing to take advantage of either one to get to the results I&apos;m hoping for.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>697093</commentid>
    <comment_count>32</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2006-05-11 15:15:55 -0400</bug_when>
    <thetext>Being able to hook into the AST would be even better. One of my most common problems right now is to insert code in the EMF generated Java source like here:

    public void setTitle(String newTitle)
    {
        String oldTitle = title;
        title = newTitle;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET,
                    WriterToolPackage.BOOK__TITLE, oldTitle, title));
    }

In this code, I&apos;d like to replace eNotificationRequired() with &quot;oldTitle == null ? title != null : !oldTitle.equals(title)&quot;.

Of course, I don&apos;t want to edit the generated code because then, the code generation would cause problems (either changes in the model wouldn&apos;t be reflected or my changes would be overwritten).

So the perfect solution would allow me to select the condition in the if(), raising an error if the if() isn&apos;t there anymore (so I will know when the model has changed).

The problem is, as you said, the debugger.

In bug 45423, we&apos;re talking about a way to map java code to a view (presentation independent of code formatting).

Basically, the proposed solution is to reformat the inserted code in such a way that every part that comes from a different file ends up on a single line during compilation:

        if (
oldTitle == null ? title != null : !oldTitle.equals(title)
)

The debugger could then use a kind of reverse map.

The second solution, even more radical (and probably way beyond the scope of this bug) is to all hooks in the AST itself.

The idea is to have grammar partikels in your project which explain new language constructs. So in my case instead of using EMF, I could create a new Java syntax (or extend the existing one but way beyond the possibilities of annotations):

    private String title {
        writable, notifyOnChange, notNull, maxLength=64 }

This is but a simple example which could be implemented with Java 5 annotations.

But how about this:

    HTML a = &lt;html&gt;&lt;head&gt;&lt;title&gt;Title string&lt;/title&gt;&lt;/head&gt;&lt;/html&gt;;
    a.html.head.addSibling(
        &lt;body /&gt;
    );
    String id = &quot;xxx&quot;;
    a.html.body = &lt;div id=&quot;${id}&quot; /&gt;;

    for (HTML.Div div : a.html.body.child(HTML.Div)) {
        System.out.println (div.id);
    }

that is, the ability to process native HTML in Java by using the class information to determine the parser for the right hand side of an expression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>698360</commentid>
    <comment_count>33</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-05-12 14:01:20 -0400</bug_when>
    <thetext>So the question for today is: can compilation participants help some preprocessors solve their problem today on the 3.2 release without any more support from JDT/Core?

I think its definitely possible if the solution looks something like this:

1. Create as many &apos;processed&apos; projects from a single &apos;original&apos; project as you want, based on multiple tags. For example, if tags A &amp; B are enabled then the original project X could produce processed projects X-A, X-B, X-AB. The classpath in each processed project remains the same, but each processed project is not attached to a CVS repository (unless you want to save the processed source for some reason).

2. When your compilation participant is told that the builder is about to compile a set of source files in the original project, copy the processed output of each file to its processed project (see CompilationParticipant.buildStarting(BuildContext[] files, boolean isBatch)). You can run your processor on each original source file with different tags enabled, and produce multiple results into the corresponding processed projects. Overhead of the participant should be low assuming your preprocessor is reasonably quick.

3. Then you can run/debug different targets by switching to the corresponding processed project. The source in the debugger will be the processed source and the line numbers will be correct. If you choose to make changes to the processed source, you can test fixes immediately but must remember to backport your changes to the original project.


With no additional support, search will find references in code that is commented out in the original project, but visible in processed projects.

Each processed project represents what you want to package for that set of tags. Source files could be as small as possible if your processor strips disabled source from other tags.

Multiple independent source processors could be attached to the same original project and produce their own processed projects, without any conflicts/collisions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>698377</commentid>
    <comment_count>34</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-12 14:06:09 -0400</bug_when>
    <thetext>I&apos;m going to have to spend some time digesting this idea.  I had begun to contemplate whether separate projects could help (thought of it in the shower this morning), so with two of us thinking in that direction, perhaps there is something there.  

It may be something to consider for a 3.2 base, but it is a pretty ugly hack that should likely be resolved in 3.3.  I was digging around in the code that handles that to determine how hard it would be for the builders to honer the changes in an AST from the compilation participant.  I also read tbe bug report in which concerns with this were expressed.  What is the current thinking on that part of things for a 3.3 release?  The advantage of course is that it doesn&apos;t involve new API, just new support within that API.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>698463</commentid>
    <comment_count>35</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-05-12 14:44:50 -0400</bug_when>
    <thetext>I don&apos;t see it as a hack at all.

One alternative is to make Java projects support &apos;original&apos; source folder(s) that map to several &apos;processed&apos; source folder(s), each with their own class folder.

But then how does the builder not blow up with 10 source files all defining the type p1.p2.X ?

How does a user keep the processed results for several tags around so he can switch between targets without rebuilding ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>703927</commentid>
    <comment_count>36</comment_count>
    <who name="Nicholas Platts">splendidness</who>
    <bug_when>2006-05-18 12:38:07 -0400</bug_when>
    <thetext>(In reply to comment #31)
&gt; I guess I&apos;m confused by Aaron&apos;s last suggestion....

When we target multiple devices and also when we reuse code without unacceptably bloated OO stuctures (for limited J2ME devices) we make extensive use of the Antenna preprocessor. However we also have found the need to write our own preprocessor tasks to overcome various limitations in both Antenna and Ant itself.
Although there is truly great benefit in integrating a preprocessor into the JDT the only bulletproof way of supporting all developers diverse build requirements will be to also provide hooks on which arbitrary scripts can be run at various stages of an automated build:
 - before the &apos;built-in&apos; preprocessor
 - before compilation
 - after preprocessing
 - after packaging
 - ...

Integrating Ant scripts into the automated build system of Eclipse is surely something which could be useful in many spheres of development.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>712571</commentid>
    <comment_count>37</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-28 08:24:39 -0400</bug_when>
    <thetext>After spending some time thinking about the multiple projects approach, I believe it could work but that it is not the best long term solution.  In reality, if using this approach, there would be no reason for using the ICompilationParticipant support at all.  I&apos;m already able to open and parse files using the AST parser, so it would just be another builder in the chain.

In the longer term, are you still considering adding the ability to alter the AST using ICompilationParticipants or something like my original request?  I just don&apos;t believe the multiple project approach is appropriate as the ultimate implementation for a variety of reasons.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713088</commentid>
    <comment_count>38</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-05-29 11:20:34 -0400</bug_when>
    <thetext>We have seen the multiple project solution (using separate builder) work quite well. So without specific reasons why multiple projects does not solve your problem, I don&apos;t think we will adding more support for this.

Please feel free to describe why this doesn&apos;t work and include answers to the questions in comment #35.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713397</commentid>
    <comment_count>39</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-29 16:15:28 -0400</bug_when>
    <thetext>Can you give some examples of where multiple projects are being used in this way?  Are they doing things that way because they felt it was the &quot;right&quot; way or because that was the only way that was available to them?  The multiple project approach is cumbersome and strikes me as a hack.  It is significantly more difficult for plugin developers to manage multiple projects and their associated classpaths than to code to a single project.  It is confusing to users, as there will be multiple projects, some of which are not being created by the users directly (this is true whether or not they can be filtered out of the user views).  In short, while it seems like it could be made to work, it does not strike me as the high quality support that I&apos;ve come to expect from the Eclipse platform.

I don&apos;t quite understand the resistance to adding a feature like this.  It is obvious from the associated vote count on this bug that I&apos;m not the only one that cares about a feature like this.  Is this a matter of resources, time or just that you don&apos;t believe it is the correct thing to do?  There are a number of entries on this report that mention that they could definitely use this functionality for their plugin project as well.

If you read back through this bug report, you will see that my original request was pretty simple.  If the concern here is that it is too difficult or expensive to support allowing me to change things from inside an ICompilationParticipant, I&apos;m more than willing to help look at other options including my original proposal.  I just don&apos;t want to waste another year of Eclipse development without a real solution coming from JDT.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713409</commentid>
    <comment_count>40</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-05-29 16:21:27 -0400</bug_when>
    <thetext>I agree with Craig that it does not make any sense from user point of view to have two projects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713547</commentid>
    <comment_count>41</comment_count>
    <who name="BenH">ben_hutchison</who>
    <bug_when>2006-05-29 20:13:16 -0400</bug_when>
    <thetext>I agree with Craig that it does not make any sense from user point of view to
have two projects. It seems like a workaround, not a solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713830</commentid>
    <comment_count>42</comment_count>
    <who name="Philipe Mulet">philippe_mulet</who>
    <bug_when>2006-05-30 04:42:32 -0400</bug_when>
    <thetext>Interestingly, extra source folders for processed sources are not striking you, but extra project folders do... I agree these are more visible, but in essence they are more powerful as well.

Anyhow, I think we can investigate this in 3.3 time frame.
Java class library developers have similar issues when dealing with platform specific code, SWT has the same issue as well (cc&apos;ing Steve).
All took different approaches though.

Things I&apos;d like to preserve is the ability to find references. The multi project solution would show references in proper context; i.e. refs to a method in win32 as opposed to for a different platform.

JDT is dealing with plain Java; we can provide hook or ease integration of preprocessors, but this isn&apos;t truly part of what Java is; and actually goes beyond just Java.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>713990</commentid>
    <comment_count>43</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-05-30 09:18:12 -0400</bug_when>
    <thetext>Phillipe,

Thanks for your comments.  I agree that this whole thing goes beyond Java.  A lot of people dealing with J2ME (aka Java ME) will tell you that it is not exactly like coding in normal Java, but uses Java syntax.  The set of differences and constraints in the ME world make it virtually impossible to code as &quot;normal&quot;.  On the other hand, things can and do move from the ME world over to the SE/EE world.  Take, for example, the split verification support coming in Mustang.  That originated in the ME world and has thus moved over the SE.

I will say that I would not be quite as opposed to multiple source folders, as they are all within the context of the user&apos;s project.  That said, I can think of no way to actually make that work given the curent Eclipse functionality.  I may not like the multiple project approach, but I can at least envision how it might be workable.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>714094</commentid>
    <comment_count>44</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-05-30 10:24:55 -0400</bug_when>
    <thetext>Here the questions from comment #35 that we expected answers to:

How does the builder not blow up with 10 source files all defining the
type p1.p2.X ?

How does a user keep the processed results for several tags around so he can
switch between targets without rebuilding ?


The multiple project solution is very workable and has been used by a team for several years. It allows each team member the choice of which tags should be processed... search and debugging work as expected.

Given the number of votes this bug has got, I assume that someone has the time to take their processor and have it generate files in several &apos;generated&apos; projects to see how it works for them, then provide feedback for everyone else.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>755642</commentid>
    <comment_count>45</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-07-24 21:49:35 -0400</bug_when>
    <thetext>What is the current thinking on this bug?  Are there any thoughts/plans from the JDT team at this point?  I don&apos;t want to see another Eclipse release slip by without progress on solving this problem.  My understanding at this point of the potential solutions:

1) My original &quot;source code providers&quot; concept.  This is straightforward and would solve the initial requirement.  There may or may not be lurking &quot;API problems&quot; with the concept.  There may or may not be a better way.

2) Expand the compilation participants functionality provided in the 3.2 timeframe to actually allow changes to pass through to the compiler.  This seems like a very clean API, but I believe there are concerns with implementation and scalability of the solution.  Can anyone offer more insight into concerns with the approach?

3) Multiple project approach.  Although I will admit that this is likely to work, I still feel that it is not a reasonable long-term solution.  Based on comments on this bug and in discussions I&apos;ve had outside this bug report, I&apos;m not alone in this thinking.  I would prefer not to invest any time in this &quot;solution&quot; as I don&apos;t believe it is something I want to see in EclipseME or MTJ.

Are there other options that should be considered, either already available or better long-term additions?  I&apos;m certainly willing to pitch in and try to help with this, but it makes no sense for me to go off and try to build something if the JDT team is going to be unwilling to accept the work when completed.  I would like to see some significant design discussions before proceeding with any significant work.  </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>755920</commentid>
    <comment_count>46</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-25 09:48:03 -0400</bug_when>
    <thetext>Craig, you still have not answered questions that we have asked.

As for the multiple project solution working vs. not working.

IT DEFINITELY WORKS!

We know of a team that has used this approach for several years.

No one has explained why this solution is not acceptable to them or even had a co-op student try to implement it for a week.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>755945</commentid>
    <comment_count>47</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-07-25 10:33:22 -0400</bug_when>
    <thetext>(In reply to comment #46)
&gt; No one has explained why this solution is not acceptable to them or even had a
&gt; co-op student try to implement it for a week.

One of the reasons why it i not desirable is that it effectively changes a build path for compile time and for launching. So, dependent projects has to be aware of those anomalies and launch configurations has to be ajusted accordingly. Also note that it also affet derived launch configurations, e.g. when applying AspectJ in the runtime and some other similar cases. In my opinion that is more then enough for the reason.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>755982</commentid>
    <comment_count>48</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-25 11:08:15 -0400</bug_when>
    <thetext>Ok - so how do any of the other proprosed solutions not have the same problem?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>755984</commentid>
    <comment_count>49</comment_count>
    <who name="Eugene Kuleshov">ekuleshov</who>
    <bug_when>2006-07-25 11:14:57 -0400</bug_when>
    <thetext>(In reply to comment #48)
&gt; Ok - so how do any of the other proprosed solutions not have the same problem?

The approach I suggested supposed to preprocess source code right before compiler (e.g. after parsing to AST model). So, neither source folders or target folders would change.

It may introduce some challenge for source-level debugging. Though I am not sure if those woven changes shouldbe seen during debugging.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756018</commentid>
    <comment_count>50</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-25 12:00:25 -0400</bug_when>
    <thetext>But then you can only keep the output for 1 target for 1 group of tags.

We have teams doing preprocessing that have 10-20 tags. They would like to have the output for numerous combinations of their tags kept around and built in the workspace.

It is completely unacceptable to them that they have to wait for a build everytime they turn off 1 tag and turn on 2 others.

So the simple approach of keeping the classpath the same and having the output folder contain the result of the preprocessed source is a waste of time for them. Their situation is no where near that simple.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756021</commentid>
    <comment_count>51</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-25 12:00:52 -0400</bug_when>
    <thetext>Sorry - accidently tagged as closed</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756022</commentid>
    <comment_count>52</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-25 12:01:24 -0400</bug_when>
    <thetext>Tagging as later </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756327</commentid>
    <comment_count>53</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2006-07-25 22:09:56 -0400</bug_when>
    <thetext>Backing up a bit...

I apologize that I had forgotten there were outstanding open questions.  I should have spent the time to go back through this novel of a bug report as I just did to refresh my memory on the territory covered thus far.

&quot;But then how does the builder not blow up with 10 source files all defining the
type p1.p2.X ?&quot;

I&apos;ve not been considering a need for multiple tags to be &quot;active&quot; at one time.  From a compiler perspective, there is only a single instance of the Java source at any one time.  I&apos;m not arguing that having many tags active at one time would be a bad thing, but being able to have a single tag active is better than what developers have right now.  I think doing &quot;batch builds&quot; of multiple &quot;configuration&quot; is better kept to Ant and automated builds.  In the end, the ability to provide a &quot;virtual file system&quot; view of the sources does not imply to me a particular use for that functionality.  

&quot;How does a user keep the processed results for several tags around so he can
switch between targets without rebuilding ?&quot;

Again, this strikes me as something that should be up to the user of the API to determine.  If the plugin chooses to manage the results as separate project, separate derived folder or somewhere completely outside the workspace it should be of no concern to the builder/compiler.  

We seem to be hung up on the issue of using multiple projects versus some other solution.  I understand how that can be done and believe that it is technically doable.  I *personally* believe that this is wrong from a user&apos;s perspective.  I *personally* believe that projects are first class user interface objects that are to be managed by the user, not created implicitly.  I&apos;m not a particularly big fan of tools such as TPTP creating projects on the fly to store their data either.  This is a purely *personal* opinion, but one that it sounds like others agree with.  As previously mentioned, I do not have a problem with creating project-level derived resources, as they can be managed and to some extent hidden from the user.

I do not believe that there is a significant difference in the amount of work necessary for any solution to be implemented on my part.  EclipseME will need to manage the processed source in multiple projects or somewhere else.  It is an issue that EclipseME has to deal with.  Given a generic interface into the compiler source, how EclipseME chooses to manage processed source should be of no concern to the compiler.  This strikes me as a good thing.

Please note that I mentioned &quot;virtual file system&quot; earlier.  After some discussions with others, I&apos;m beginning to consider a possibility of using EFS within a single project to manage the source provided to the compiler.  If this works, it would be the generic hook that I need and no changes would be necessary to JDT.  The trick is in signaling to my EFS implementation that this is the builder running and not the editor (to give out the right sources).  One potential here is to set a thread local variable around the build functionality.  For this to work, JDT would have to be single-threaded.  Can anyone verify that the JavaBuilder, image builders and low-level compiler run within a single thread or are they multithreaded?  What other issues might exist with this approach?

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756718</commentid>
    <comment_count>54</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2006-07-26 12:29:24 -0400</bug_when>
    <thetext>There is more than just the compiler to think about.

JDT also needs to consider how search behaves and does the debugger see the correct source for the .class files, etc.

Ignoring the problem of multiple tags generating different source likely means the solution is a waste of time for a large percentage of the listeners to this bug.

Assuming your source looks anything like:

/*&lt;MY-PREPROCESSOR&gt; IF A */
x.doSomething();
/*&lt;MY-PREPROCESSOR&gt; ELSEIF B
x.doSomethingElse();
/*&lt;MY-PREPROCESSOR&gt; ELSE C
x.doNothing();
*/

How do you expect search to find senders of the method doSomethingElse() if the only generated source was with the tag A enabled and never the tag B or C?


As for your question: at this time the builder is single threaded, but there is no quarantee that will continue.

The indexing part of search is run in its own background thread while queries are permitted from any thread.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756797</commentid>
    <comment_count>55</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2006-07-26 14:04:30 -0400</bug_when>
    <thetext>IMHO, the first step here would be a way to get the AST before the compiler/index thread sees it.

This would allow people to write arbitrary preprocessors (= AST-to-AST transformers).

The next step would be to see which ideas would evolve from that. AspectJ didn&apos;t happen in a day. The idea was there, then the compiler but it took several years for people to find out what works and what doesn&apos;t.

Right now, we all agree that Java is somewhat limited but we cannot agree how to solve that. 

So lets add an extension point which allows to add A2A transformers and let&apos;s compete for the best idea how to use this EP to make us all more productive.

I bet that this EP will trigger a plethora of plugins which will do things with Java that we can&apos;t even start to imagine right now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756825</commentid>
    <comment_count>56</comment_count>
    <who name="Philippe Ombredanne">pombredanne</who>
    <bug_when>2006-07-26 14:28:32 -0400</bug_when>
    <thetext>(In reply to comment #42)
&gt; Anyhow, I think we can investigate this in 3.3 time frame.
&gt; Java class library developers have similar issues when dealing with platform
Hi Philippe :-)
Any chances that you could look into that for 3.3 per your prior comment?
This is one of the most popular bugs....53 votes ...
It is definitely is the bugzilla TOP 10!
Any level of support there even if it is not perfect would be really cool.
I am re-opening that bug too.
Cordially</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756826</commentid>
    <comment_count>57</comment_count>
    <who name="Philippe Ombredanne">pombredanne</who>
    <bug_when>2006-07-26 14:29:03 -0400</bug_when>
    <thetext>Well I cannot re-open it... Craig or Kent?
Could you do that please?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756860</commentid>
    <comment_count>58</comment_count>
    <who name="Philippe Ombredanne">pombredanne</who>
    <bug_when>2006-07-26 15:07:00 -0400</bug_when>
    <thetext>Could we at the minimu provide with some decent extensibility via fragments?
like o.e.ui.workbench does?
It would be as simple as adding the following directive to the manifest :
Bundle-ClassPath: .

This would allow frgamnets to provide patched code when needed... and would go a  long way to support many interesting experimentations.

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>756872</commentid>
    <comment_count>59</comment_count>
    <who name="Philippe Ombredanne">pombredanne</who>
    <bug_when>2006-07-26 15:16:19 -0400</bug_when>
    <thetext>Sorry my mistake: the directive should be something like:
It would be as simple as adding the following directive to the manifest :
Bundle-ClassPath: extensions.jar, .

where extensions.jar could be optionally provided by a fragment is would not be in jdt.core .
Any code in extensions.jar would be first in the jdt.core classpath :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>874921</commentid>
    <comment_count>60</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2007-01-31 18:25:34 -0500</bug_when>
    <thetext>There have been a lot of discussions throughout the lifetime of this bug 
concerning possible workarounds to solve this problem.  The primary suggestion 
has been to use two separate projects to solve this problem.  In fact, 
EclipseME is currently shipping a version of its preprocessor functionality 
using this approach.  Unfortunately, this approach has proven to be as much of 
a problem from a user&apos;s perspective as predicted.  This is in addition to the
development effort that was required to get this approach to even work 
at all.  There are currently a number of EclipseME bugs that have been written 
that likely can never be solved using this approach.  Two simple examples:

* Java search returns results from both the primary and secondary projects.
* As a Java project, the secondary project shows up in the clean dialog.

At this time, I&apos;m exploring the possibility of using the OSGi Framework class
loader hooks to rewrite the JDT SourceFile class bytes during load.  It is 
certainly dangerous to rewrite classes in the face of potential change, but 
it appears to be absolutely necessary to maintain a reasonable user workflow
without further help from the JDT team.

Although I would much prefer to use a sanctioned hook into the compiler, I
will go ahead with my plan to hook the framework classloader.  As always, 
I am more than willing to participate in design and implementation of a 
sanctioned extension point.  EclipseME users would likely benefit from this 
in the long term.  As part of the Mobile Tools for the Java Platform team, 
I can also say that MTJ would prefer to build on a sanctioned extension
mechanism.

I am well aware that such a hook does not solve all of the problems raised
by this bug.  Multiple device support, debugger source handling and editor
support are all examples of functionality that will also need to be addressed
at some point in the near future.  Most, if not all, can be solved with 
other extension points available in the platform.  But, without a hook into 
the compiler none of these matter.

Please take one more look at this bug and consider what might be able to be
addressed in the 3.3 timeframe for the benefit of the users of EclipseME,
MTJ and everyone that has voted for this bug.  If there has been progress
or discussion about a solution for this bug, please update the bug to 
reflect that progress.

Thanks.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>874968</commentid>
    <comment_count>61</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2007-01-31 18:40:55 -0500</bug_when>
    <thetext>I&apos;m removing myself from this bug report.  I can&apos;t be of any help and have long since resigned myself to accepting the limitations of Java and its effects on the tooling.  See ya!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>875705</commentid>
    <comment_count>62</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2007-02-01 14:00:58 -0500</bug_when>
    <thetext>I just had a really stupid idea but ... well, see for yourself:

Is it possible to call the Java compiler from a classloader?

Basically, I would feed the classloader a classname. Certain properties (for example, the package) would hint it to generate the code, then run it through javac and finally return the generated class.

I agree, this would be slow but that&apos;s not the point. We could add caching and for the final product, we could resolve all these classes once and pack the generated code in the JAR.

My main point is that this would give us a well defined (as far as classloaders go ;-) point to hook into Java execution. Comments?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>875932</commentid>
    <comment_count>63</comment_count>
    <who name="BenH">ben_hutchison</who>
    <bug_when>2007-02-01 18:13:16 -0500</bug_when>
    <thetext>Aaron, re: class loader: Frankly, the idea sounds unworkable and rather off-target. We&apos;re trying to deliver pre-processed source to a compiler here. The class loading happens on a phone, much later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>876328</commentid>
    <comment_count>64</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2007-02-02 07:00:05 -0500</bug_when>
    <thetext>Aaron,  I think I understand your suggested approach and that you are suggesting to do the classloaders from within the Eclipse side of things.  While it might be possible to do, it is definitely not the path that I want to see things go.  I&apos;m working hard to make sure that the user&apos;s experience is as close to the standard JDT experience as possible.  Calling out to javac will not yield the tight integration that I&apos;m looking for.  In reality, calling out to javac could easily be done without any classloader tricks from within a standard Java builder.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>877073</commentid>
    <comment_count>65</comment_count>
    <who name="Omry Yadan">public</who>
    <bug_when>2007-02-04 07:54:53 -0500</bug_when>
    <thetext>Here is an idea borrowed from NetBeans mobility pack preprocessing support:
instead of hooking into the build process, the code itself is modified, but in a &quot;toggle-able&quot; way.
specifically, in NetBeans they have a Commenting-Preprocessor, that comment and uncomment blocks of code, based on the current profile (set of define variables).
in NetBeans, the user can initiate a re-commenting of the code by pressing a key combination. the code is also re-commented after the user changes the defines.
a concrete example:

//#if FOO
System.out.println(&quot;Foo is defined&quot;);
//#elseif
System.out.println(&quot;Foo is not defined&quot;);
//#endif

when the re-comment command would run, it will prefix the first line with //# comment.
if FOO is then defined, re-comment will run again (automatically) and the first block would be uncommented and the second would be commented.

the main problem with this approach is the interaction with the version control:
since the code is actually changing, it will be marked as changed for the purpose of version control, which is problematic - but personally I would live with that.

On a side note: I have seen the multiple-project approach offered by EclipseME and I agree with Craig that is a bad solution from the user&apos;s perspective.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>877179</commentid>
    <comment_count>66</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2007-02-04 19:02:03 -0500</bug_when>
    <thetext>I&apos;m trying very hard to avoid things that mess with source control.  It is bad enough with something like CVS and SVN that do no locking, but for systems that use locking it would be a nightmare in my mind.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1328423</commentid>
    <comment_count>67</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-09-10 10:45:05 -0400</bug_when>
    <thetext>We should investigate this enhancement for 3.5. 
Kent, for 3.5M3 please define the full requirement across the board:
- how does it interact with the compiler/builder?
- how does the debugger map the source to what&apos;s being executed? (need mapping api?)
- how does it get presented in UI (multi-tab editor for toggling filters?) ?
- what impact does it have on JDT tooling (model APIs, search, etc.) ?
- what extension points are needed?
- more ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330381</commentid>
    <comment_count>68</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-09-12 12:35:02 -0400</bug_when>
    <thetext>So to everyone that voted for this &amp; to those that have already commented - please take the time in the next 2 weeks to let us know what you would like to see in 3.5, since it has been a long time since this bug was originally opened.

If you could send an email directly to me ( kent_johnson@ca.ibm.com ) &amp; I&apos;ll summarize the comments when I&apos;m back in 2 weeks.


If you have written a preprocessor, please let us know :
  - did you attach it to eclipse ? how ?
  - approx. how many source files need to be preprocessed ?
  - is performance an issue for you or is preprocessing &apos;real fast&apos; ?
    - did you &apos;cache&apos; the processed source ?
  - how many tags does your source contain ?
  - do you generate/debug several different targets at the same time ?
  - how do you expect the debugger/search/code assist to deal with the original
    and processed source ?
  - and anything else you can think of... </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330475</commentid>
    <comment_count>69</comment_count>
    <who name="Omry Yadan">public</who>
    <bug_when>2008-09-12 14:08:19 -0400</bug_when>
    <thetext>  - did you attach it to eclipse ? how ?
Yes.
my preprocessor (the one which will be used with MTJ) is reversible, meaning you can execute it again on a previously preprocessed file and get correct results even if you changed the symbols between the two runs.
I used this property, what I did was simply to edit the text in the editor buffer.
since my preprocessor prefix &apos;hidden&apos; code lines by a Java comment the code in the text editor compiles and does not confuse the syntax checker.

  - approx. how many source files need to be preprocessed ?
depends on the project.
when a file is modified (saved) it&apos;s preprocessed.
when the entire project is rebuilt, all the files are preprocessed. (I integrated as a builder).

  - is performance an issue for you or is preprocessing &apos;real fast&apos; ?
I am not sure how much of an issue it is. it wasn&apos;t an issue for me.
    - did you &apos;cache&apos; the processed source ?
Yes, in the editor buffer (meaning on top of the actual files, this is not what you would normally call cache, but it has the same effect: a file is preprocessed only when it needed to be).

  - how many tags does your source contain ?
The terminology is symbols.
it can be anything really, my plugin uses a device database which can populate the symbols, and the user can add his own one per project, or per device through an external xml file that extends the device database.

  - do you generate/debug several different targets at the same time ?
No. I consider that the job of the build system (IE: Ant + Antenna, or something similar).

  - how do you expect the debugger/search/code assist to deal with the original
    and processed source ?
At any given time, there is a set of active symbols per project that have preprocessing enabled.
debugging, search and code assist should work on the code which have been preprocessed with those symbols.

  - and anything else you can think of... 
Syntax highlighting show show what code is active and what code is &apos;hidden&apos;.
since the entire point of this bug report was to eliminate the need for my approach by being able to provide the preprocessed code to the compiler, I think the original source should not be modified (as it was in my plugin), but instead preprocessed to a different dir (much like classes are compile to bin).
assuming this is how things will be, it will be hard for the user to understand what code is active and what code is not.
the syntax highlighter should take the preprocessor output into consideration and paint hidden code in disabled colors to make it clear to the user that it&apos;s not active.

to achieve this, the best way would be to keep an additional data model per file that hold output from the preprocessor about which lines (numbers) are active and which lines (numbers) are disabled after the last preprocessing run.

this may require some changes to the Preprocessor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1330875</commentid>
    <comment_count>70</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-09-14 12:47:12 -0400</bug_when>
    <thetext>I want to make it very clear that while the underlying preprocessing engine that translates the preprocessing directives into he output source control is indeed the engine that Omry has written and is embedded in Antenna, Omry&apos;s plugin, EclipseME and MTJ.  *HOWEVER* the way that it is attached and used within Omry&apos;s plugin and EclipseME/MTJ is very different.  Both are options to be looked at, but it is important to keep both of them separated.  My comments are related to EclipseME/MJT, as MTJ is now a derivative of EclipseME.

  - did you attach it to eclipse ? how ?

Yes.  Via a an OSGi bundle hook on the bundle classloader.  The JDT org.eclipse.jdt.internal.core.builder.SourceFile getContents() method is rewritten to consult a SourceMapper interface.  This interface allows a new resource to be returned to the compiler.  The code for this hook can be found in MTJ source at https://dev.eclipse.org/svnroot/dsdp/org.eclipse.mtj/trunk/plugins/org.eclipse.mtj.core.hooks/src . 

The key here is that the code is processed into a different directory than the source directory to avoid altering the user&apos;s source, as this avoids issues with source control showing changed files that have not really changed.

  - approx. how many source files need to be preprocessed ?

As Omry says, it depends on the application.  Mobile applications tend to be much smaller than SE/EE applications.

  - is performance an issue for you or is preprocessing &apos;real fast&apos; ?
    - did you &apos;cache&apos; the processed source ?

Performance does not strike me as the primary issue.  At least for EclipseME/MTJ the preprocessed results are only generated when a file is altered and saved.

  - how many tags does your source contain ?

As Omry says, this will vary depending on the source used.

  - do you generate/debug several different targets at the same time ?

At this time, no.  Although that would be something that might be interesting in the longer term.

  - how do you expect the debugger/search/code assist to deal with the original
    and processed source ?

I would expect the functionality to primary work based on the processed code.
 
  - and anything else you can think of... 

As I&apos;ve stated multiple times in the past, there are lots of ways this could be approached and multiple levels of integration.  While I&apos;d love to see all parts of the JDT functionality addressed in one fell swoop, I would prefer to see a plan that breaks this functionality and addresses it piece by piece.  The first and foremost need is a hook similar to what is currently being done in EclipseME/MTJ by hooking the JDT compiler and rewriting its code.  It DOES NOT solve all of the problems, but it solves the MOST IMPORTANT highest priority problem.  Waiting until JDT can address every single feature and function makes me nervous whether anything will get done.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1340841</commentid>
    <comment_count>71</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-09-30 10:37:25 -0400</bug_when>
    <thetext>To be honest, I was hoping for more feedback from the 57 voters of this bug.

Other than EclipseME/MJT, are there other existing/planned preprocessors that would like to add their 2 cents to the discussion of what we try to accomplish for 3.5 ?

Please let us know as soon as you can.

thx</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1341548</commentid>
    <comment_count>72</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2008-10-01 03:28:26 -0400</bug_when>
    <thetext>My comments above (#30, #32 and #55) still apply: I&apos;d like a way to invoke the patch tool and to do AST transformations during the build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1347844</commentid>
    <comment_count>73</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-10 12:54:32 -0400</bug_when>
    <thetext>I just wanted to clarify answers to this question if I can.

  - how do you expect the debugger/search/code assist to deal with the original
    and processed source ?

Omry you said :
&gt; At any given time, there is a set of active symbols per project that have
&gt; preprocessing enabled.
&gt; debugging, search and code assist should work on the code which have been
&gt; preprocessed with those symbols.

Craig :
&gt; I would expect the functionality to primary work based on the processed code.


The debugger obviously needs to show the processed source so the line numbers match up.

But since the user likely does NOT want to edit the processed source, are you sure that you want search to find references relative to the processed source and not the original source ?

Assuming the processed source is never committed to CVS/SVN, shouldn&apos;t the user edit/search the original source ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1347847</commentid>
    <comment_count>74</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-10-10 13:03:19 -0400</bug_when>
    <thetext>Interesting and somewhat difficult question to answer... In terms of editing, I think you are always correct... you always want to edit the original source code.  The preprocessed source should not be editable.

I think search is more difficult to answer.  Take a &quot;find references&quot; search.  If you search across the original source file without taking into account the current &quot;processing symbols&quot; the user may find references that are not *currently* active.  It also leads to an interesting question about refactorings and such.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1347875</commentid>
    <comment_count>75</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-10 13:42:47 -0400</bug_when>
    <thetext>I agree it is interesting... it makes me think there are 2 very different solutions for this problem in the short term.

**** Let&apos;s first assume that we&apos;re NOT trying to provide a HUGE solution, but a fairly simple one that people can digest easily ****

I see 2 choices:

1. So IF we decide that the original source is the source we want displayed in the editor &amp; used by search/code assist. AND the processed source is fed to the compiler/debugger.

THEN a preprocessor extension point similar to a CompilerParticipant is the logical solution. Only the compiler/builder/debugger would be made aware of this &apos;hook&apos;.


2. But IF we decide that the original source is the source we want displayed in the editor. AND the processed source is fed to the compiler/debugger and also the search indexer, and code assist [Not sure that refactoring will work in this mode].

THEN a new kind of project is the best solution. It would add onto a JavaProject with the notion of an &apos;original&apos; source folder, to go along with a &apos;normal&apos; source folder. Each file (do not care whether its .java or .jpg) would be passed to a user supplied Processor and saved in the equivalent place in the JavaProject&apos;s &apos;normal&apos; source folder. This transformation/processing step would happen whenever an individual file was changed, but NOT during a build loop. Instead a normal resource listener would be responsible for noticing when the file changed.

There would be no reason to change the compiler/builder/debugger/search/etc since it would appear that the processed source in the &apos;normal&apos; source folder is the active source.

We would need to make sure that the original source is committed to the repository and the files in the JDT source folder is not.


Make sense ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1349447</commentid>
    <comment_count>76</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-14 12:51:12 -0400</bug_when>
    <thetext>hi kent,

looking at the options, it seems to me that option 1 is the easiest way to go and also matches the original requirements of this bug.

but option 2 seems to be the right way of doing that and also avoid the issue raised by craig of feeding the the code assist with possibly &quot;invalid code&quot;.

so... if there is is time to do it and you think it is a good solution, i would prefer option 2.

:)
gustavo

(In reply to comment #75)
&gt; I agree it is interesting... it makes me think there are 2 very different
&gt; solutions for this problem in the short term.
&gt; 
&gt; **** Let&apos;s first assume that we&apos;re NOT trying to provide a HUGE solution, but a
&gt; fairly simple one that people can digest easily ****
&gt; 
&gt; I see 2 choices:
&gt; 
&gt; 1. So IF we decide that the original source is the source we want displayed in
&gt; the editor &amp; used by search/code assist. AND the processed source is fed to the
&gt; compiler/debugger.
&gt; 
&gt; THEN a preprocessor extension point similar to a CompilerParticipant is the
&gt; logical solution. Only the compiler/builder/debugger would be made aware of
&gt; this &apos;hook&apos;.
&gt; 
&gt; 
&gt; 2. But IF we decide that the original source is the source we want displayed in
&gt; the editor. AND the processed source is fed to the compiler/debugger and also
&gt; the search indexer, and code assist [Not sure that refactoring will work in
&gt; this mode].
&gt; 
&gt; THEN a new kind of project is the best solution. It would add onto a
&gt; JavaProject with the notion of an &apos;original&apos; source folder, to go along with a
&gt; &apos;normal&apos; source folder. Each file (do not care whether its .java or .jpg) would
&gt; be passed to a user supplied Processor and saved in the equivalent place in the
&gt; JavaProject&apos;s &apos;normal&apos; source folder. This transformation/processing step would
&gt; happen whenever an individual file was changed, but NOT during a build loop.
&gt; Instead a normal resource listener would be responsible for noticing when the
&gt; file changed.
&gt; 
&gt; There would be no reason to change the compiler/builder/debugger/search/etc
&gt; since it would appear that the processed source in the &apos;normal&apos; source folder
&gt; is the active source.
&gt; 
&gt; We would need to make sure that the original source is committed to the
&gt; repository and the files in the JDT source folder is not.
&gt; 
&gt; 
&gt; Make sense ?
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1349943</commentid>
    <comment_count>77</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2008-10-15 03:33:54 -0400</bug_when>
    <thetext>I don&apos;t have much time but I had an idea how to solve the &quot;real/processed source debugging&quot; problem. We need these features:

1. A &quot;#line&quot; statement which the compiler translates into a &quot;debug source location&quot; bytecode.

2. A source preprocessor must be able to ask the compiler to put each node of the AST in a different line and generate a mapping tables which translates a line/column information in the real source into a byte code position in the compiled code.

3. A stacktrace translator which maps byte code positions using the translation tables into source positions where each position may be in one of three places: The real source (which the user wrote), generated code (which can be around stuff in the real source or injected between stuff the user wrote) and support byte code (generated byte code, for example with the asm framework; calling library code is not an issue because that code has correct line number information). 

4. A flag in the compiled bytecode which the Eclipse debugger looks for which enables the translation.

5. Maybe a source viewer which can switch between the original source, the intermediate source (as generated by the preprocessor) and a bytecode decompiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1352746</commentid>
    <comment_count>78</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-10-19 21:22:26 -0400</bug_when>
    <thetext>Kent,

Can you explain how your #2 solution would work?  Two source folders or are you talking about a single source folder?  If it is a single source folder that is being managed by the user *and* the builder, I think this would be hard to manage since the user may want to make changes that would need to be allowed back to source control, while other changes would not go to source control.  If you are talking about two source folders, how would you picture those being managed?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1356171</commentid>
    <comment_count>79</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-23 14:20:29 -0400</bug_when>
    <thetext>It would be 2 separate folders &amp; the second one with the processed files would be tagged as &apos;derived&apos; &amp; read-only (as would all of its files). This would make these &apos;generated&apos; folders/files not visible to source code control, just as .class files do not appear in outgoing changes.


So we&apos;re essentially tricking a JavaProject to think that this generated source folder is the real one &amp; treat it as a normal source folder (ie. compile its processed source files to .class files in the bin folder, index &amp; search its processed source files &amp; display their contents in the debugger).

The &apos;original&apos; folder would be treated as a normal source folder is now. All of its resource changes would appear to be outgoing changes to CVS, etc.

So a simple &apos;PreProcessor enabled JavaProject&apos; would look like:
Project1
  bin [derived folder not visible to source control]
  processedSrc [derived &amp; read-only folder not visible to source control]
  originalSrc [all files would be &apos;processed&apos; &amp; result saved to processedSrc]

The tricky parts to be worked out would be:
- how to hide the processedSrc folder from the UI in the packageExplorer
- opening the &apos;correct&apos; source file for certain situations such as from a search result (want the read-only processed file), or the open type dialog (likely want the original file).
- attaching the correct icon to the &apos;original&apos; source folder in the package explorer instead of a random folder (if we care about UI issues like this)


So one question I have is : how useful is this solution to multiple users/applications ? Or should MTJ provide their own customized JavaProject that provides a hook for their preprocessor &amp; manage their symbols ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1356581</commentid>
    <comment_count>80</comment_count>
    <who name="Aaron Digulla">digulla</who>
    <bug_when>2008-10-24 04:19:53 -0400</bug_when>
    <thetext>&gt; - how to hide the processedSrc folder from the UI in the
&gt; packageExplorer

I&apos;m not sure this is a good idea. There should be a simple way to see the processed sources.

I was wondering if it was possible to add a &quot;source/processed&quot; tab (like in an XML or HTML editor) to the Java editor. In the processed tab, you could see immediately what happens to the code you just typed.

It would be great if that wasn&apos;t limited to Java editors but a standard feature of code editors for processors which aren&apos;t limited to Java.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1357497</commentid>
    <comment_count>81</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-10-26 14:26:51 -0400</bug_when>
    <thetext>Kent,

I do believe there is relevance to a solution outside of MTJ.  Perhaps there is a way to find out from other users?

In terms of a technical approach, the approach you describe seems like it might work.  I do believe it needs to be possible to choose to view the processed sources in some cases.  It should also be possible to filter the folder(s).  However, I don&apos;t believe it is necessary to have multiple tabs in the UI to support this... 

Finally, There is now a discussion going on within the MTJ project to add Multi-configuration support to the tooling.  The discussion can be found at http://wiki.eclipse.org/DSDP/MTJ/Requirements/Multi-Configuration_Support .  Given that this support only provides for a single &quot;active&quot; configuration, I don&apos;t know that it affects this discussion too much.  It does imply that changing the active configuration would need to rebuild the processed source and associated binaries.  Does that also imply rebuilding the search indices or anything else?  (NOTE: It was already possible to switch the active configuration, but it will now be more obvious)
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1357995</commentid>
    <comment_count>82</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-27 10:03:44 -0400</bug_when>
    <thetext>one thing that is not clear to me is if this is useful outside the scope of java code. if it is then the solution to extend a javaproject might not be the correct one. (but this bug is open on JDT, so maybe we can just focus on java). but maybe, as craig said, we should see if others on the list have comments.

in terms of mtj, this solution is ok for us. other question that i have is about the synmbols management. currently we do the symbols management inside mtj. on this solution you expect that this management will be moved to JDT? so jdt would provide an api to create symbol sets and add symbols to it?

thanks
gustavo

(In reply to comment #81)
&gt; Kent,
&gt; 
&gt; I do believe there is relevance to a solution outside of MTJ.  Perhaps there is
&gt; a way to find out from other users?
&gt; 
&gt; In terms of a technical approach, the approach you describe seems like it might
&gt; work.  I do believe it needs to be possible to choose to view the processed
&gt; sources in some cases.  It should also be possible to filter the folder(s). 
&gt; However, I don&apos;t believe it is necessary to have multiple tabs in the UI to
&gt; support this... 
&gt; 
&gt; Finally, There is now a discussion going on within the MTJ project to add
&gt; Multi-configuration support to the tooling.  The discussion can be found at
&gt; http://wiki.eclipse.org/DSDP/MTJ/Requirements/Multi-Configuration_Support . 
&gt; Given that this support only provides for a single &quot;active&quot; configuration, I
&gt; don&apos;t know that it affects this discussion too much.  It does imply that
&gt; changing the active configuration would need to rebuild the processed source
&gt; and associated binaries.  Does that also imply rebuilding the search indices or
&gt; anything else?  (NOTE: It was already possible to switch the active
&gt; configuration, but it will now be more obvious)
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1358009</commentid>
    <comment_count>83</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-27 10:20:55 -0400</bug_when>
    <thetext>Making the processed source available (preferably as read-only) is definitely reasonable - but likely users would have to be instructed how to find it.

As for the symbol management - no I wasn&apos;t think it would become part of our support. Right now I think the Preprocessor &amp; its inner workings should be left up to each individual project.

Possibly down the road we can generalize a solution, but I&apos;m not sure we could get agreement right now.


So I was thinking more about search. Assume an original file looked this:

class X {
	void foo() {
		// #ifdef My_PROJECT
		call_function(1);
		// else
		// call_quick_function(2);
	}
}

And the processed source looked like this :

class X {
	void foo() {
		// #ifdef My_PROJECT
		//call_function(1);
		// else
		call_quick_function(2);
	}
}

Search would record a reference to call_quick_function from X and would select the call in the read-only processed file correctly... BUT what if we want the search result to highlight the call in the original file?

Will the line/character positions be correct ? My guess is no, they would be off a few lines/characters especially if the preprocessor removes commented lines.

So if opening the processed file is fine, then we&apos;re OK. If not, we would have some work to do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1358210</commentid>
    <comment_count>84</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-27 13:21:15 -0400</bug_when>
    <thetext>for me, what you suggested is o. 

one question. how i would set the list of &quot;active&quot; symbols in one specific preprocessed project?

(In reply to comment #83)
&gt; Making the processed source available (preferably as read-only) is definitely
&gt; reasonable - but likely users would have to be instructed how to find it.
&gt; 
&gt; As for the symbol management - no I wasn&apos;t think it would become part of our
&gt; support. Right now I think the Preprocessor &amp; its inner workings should be left
&gt; up to each individual project.
&gt; 
&gt; Possibly down the road we can generalize a solution, but I&apos;m not sure we could
&gt; get agreement right now.
&gt; 
&gt; 
&gt; So I was thinking more about search. Assume an original file looked this:
&gt; 
&gt; class X {
&gt;         void foo() {
&gt;                 // #ifdef My_PROJECT
&gt;                 call_function(1);
&gt;                 // else
&gt;                 // call_quick_function(2);
&gt;         }
&gt; }
&gt; 
&gt; And the processed source looked like this :
&gt; 
&gt; class X {
&gt;         void foo() {
&gt;                 // #ifdef My_PROJECT
&gt;                 //call_function(1);
&gt;                 // else
&gt;                 call_quick_function(2);
&gt;         }
&gt; }
&gt; 
&gt; Search would record a reference to call_quick_function from X and would select
&gt; the call in the read-only processed file correctly... BUT what if we want the
&gt; search result to highlight the call in the original file?
&gt; 
&gt; Will the line/character positions be correct ? My guess is no, they would be
&gt; off a few lines/characters especially if the preprocessor removes commented
&gt; lines.
&gt; 
&gt; So if opening the processed file is fine, then we&apos;re OK. If not, we would have
&gt; some work to do.
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1359344</commentid>
    <comment_count>85</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-28 13:43:39 -0400</bug_when>
    <thetext>&gt; how i would set the list of &quot;active&quot; symbols in one specific preprocessed
&gt; project?

Whoever supplies the preprocessor needs to provide a way for users to add symbols &amp; choose the active one(s).

We do not have enough feedback from several implementors to know what a good general solution would be.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1359384</commentid>
    <comment_count>86</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-10-28 14:09:27 -0400</bug_when>
    <thetext>I agree that it makes the most sense for MTJ to manage the symbols and activation of those symbols.  I also believe that it makes the most sense for MTJ to provide the implementation of the &quot;preprocessing language&quot;.  I think where it might be useful to provide platform support is in making this all possible in a generic way... be it through an extension point or a specialization of the Java project structure.  That way anyone that wanted to could provide preprocessing types of activities without having to build out the low-level platform hooks.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1360473</commentid>
    <comment_count>87</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-29 13:06:40 -0400</bug_when>
    <thetext>hi craig,

i thought that the preprocessing language itself (syntax of the preprocessing) would already be implemented inside JDT. we just need to provide the set of active symbols. am i missing something?

my understanding was that we would only need an api to set the symbols and maybe also the types of each symbols (necessary to validate the expressions).

for example, we could have a set of four active symbols:
&lt;symbol, type, value&gt;
screenwidth, int, 270
screenheight, int, 256
devicemovel, string, nokiaserie40
JSR179, boolean, true

//if (screenwidth &gt; 200)
Image.createImage(big_image)
//else 
Image.createImage(small_image)
//endif

based on that, the preprocessor would generate the final preprocessed code and also implement some editor features such as code competition, validate expressions, etc. 

(In reply to comment #86)
&gt; I agree that it makes the most sense for MTJ to manage the symbols and
&gt; activation of those symbols.  I also believe that it makes the most sense for
&gt; MTJ to provide the implementation of the &quot;preprocessing language&quot;.  I think
&gt; where it might be useful to provide platform support is in making this all
&gt; possible in a generic way... be it through an extension point or a
&gt; specialization of the Java project structure.  That way anyone that wanted to
&gt; could provide preprocessing types of activities without having to build out the
&gt; low-level platform hooks.
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1360556</commentid>
    <comment_count>88</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-29 14:28:09 -0400</bug_when>
    <thetext>Gustavo, JDT will only provide you with the extension point to attach your preprocessor.

We do not know anything about your symbols or the syntax that you chose to write your preprocessed code.

That is all left up to individual Preprocessors to handle themselves.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1360566</commentid>
    <comment_count>89</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2008-10-29 14:32:42 -0400</bug_when>
    <thetext>I agree with this approach.  There are potentially multiple types of preprocessor languages that could be applied... JDT should not be required to know all of those.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1360772</commentid>
    <comment_count>90</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-29 16:36:22 -0400</bug_when>
    <thetext>so let me see if i understand:
- currently we have a classpath hook that requires the config.ini to be changed
- this is not going to be necessary since we will use another extension point provided by JDT. so we will keep our current solution on mtj, but use an extension point instead of the classpath hook
- JDT will not define a new project type. just this extension point that can be used by anyone that wants to use preprocessing
- the client of the extension point must define all preprocessing related tasks (language)

is that right? other question. is the editor going to be changed to do that fold in/out, code assist, evaluate expressions, etc? i just want to understand clearly what will be provided and what we have to provide on mtj

:)
gustavo

(In reply to comment #89)
&gt; I agree with this approach.  There are potentially multiple types of
&gt; preprocessor languages that could be applied... JDT should not be required to
&gt; know all of those.
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1361254</commentid>
    <comment_count>91</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-10-30 11:16:24 -0400</bug_when>
    <thetext>Gustavo, what we&apos;re suggesting is :

- an extension point for any Preprocessor
- an expanded JavaProject (adds an &apos;OriginalSrc&apos; folder)
- a resourceListener that notices whenever a file changes in the OriginalSrc folder &amp; calls the attached Preprocessor, then saves the processed file to the normal source folder &amp; marks it as derived/read-only so CVS will ignore it
- debug &amp; search will use the processed files in the normal source folder


What is NOT provided is :

- what the original source looks like; individual preprocessors can use whatever syntax they want
- support for symbols and how the current symbol set is identified


As for changes to the editor - not sure exactly what you had in mind. A user can always open the processed source file to see what source was compiled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1361763</commentid>
    <comment_count>92</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2008-10-30 19:25:43 -0400</bug_when>
    <thetext>hi kent,

thanks for the answers. it is clear to me now. 

about the editor, i was wondering about a code assist on the possible symbols that are available, but since the preprocessor will be defined outside jdt, then it doesn&apos;t make sense to have that inside it.

base on what you answered, probably it will not be necessary to set the current active symbols in JDT isn&apos;t it? since the component that implement the extension will provided the final preprocessed code, JDT don&apos;t need to be aware of the symbols that are active. is that right?

thanks
gustavo

(In reply to comment #91)
&gt; Gustavo, what we&apos;re suggesting is :
&gt; 
&gt; - an extension point for any Preprocessor
&gt; - an expanded JavaProject (adds an &apos;OriginalSrc&apos; folder)
&gt; - a resourceListener that notices whenever a file changes in the OriginalSrc
&gt; folder &amp; calls the attached Preprocessor, then saves the processed file to the
&gt; normal source folder &amp; marks it as derived/read-only so CVS will ignore it
&gt; - debug &amp; search will use the processed files in the normal source folder
&gt; 
&gt; 
&gt; What is NOT provided is :
&gt; 
&gt; - what the original source looks like; individual preprocessors can use
&gt; whatever syntax they want
&gt; - support for symbols and how the current symbol set is identified
&gt; 
&gt; 
&gt; As for changes to the editor - not sure exactly what you had in mind. A user
&gt; can always open the processed source file to see what source was compiled.
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1387571</commentid>
    <comment_count>93</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2008-12-09 12:40:10 -0500</bug_when>
    <thetext>Kent, what&apos;s the status on this bug? Any hope to have something for M5?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1387588</commentid>
    <comment_count>94</comment_count>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2008-12-09 12:57:51 -0500</bug_when>
    <thetext>Yes...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1403353</commentid>
    <comment_count>95</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2009-01-08 06:49:01 -0500</bug_when>
    <thetext>We&apos;ve just had a user report that the bundle hook that we have been using for doing this work in past releases no longer works for the 3.5 stream.  If there is any chance that the JDT work is not going to be there in the 3.5 timeframe, the MTJ project needs to know immediately so that we can look at what other options may be available.
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1403469</commentid>
    <comment_count>96</comment_count>
    <who name="Danail Nachev">d.nachev</who>
    <bug_when>2009-01-08 09:42:49 -0500</bug_when>
    <thetext>Can I add my 2 cents to the already long discussion:

* The preprocessed source code is fed to the </thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1403470</commentid>
    <comment_count>97</comment_count>
    <who name="Danail Nachev">d.nachev</who>
    <bug_when>2009-01-08 09:43:35 -0500</bug_when>
    <thetext>Sorry for the half-baked comment... Continue with your discussion:)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1451848</commentid>
    <comment_count>98</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2009-03-13 09:59:47 -0400</bug_when>
    <thetext>Moving to M7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1452093</commentid>
    <comment_count>99</comment_count>
    <who name="Gustavo de Paula">wgp010</who>
    <bug_when>2009-03-13 14:05:17 -0400</bug_when>
    <thetext>hi oliver,

my name is gustavo and i&apos;m one of DSDP MTJ commiters. we plan to use thie preprocessor feature on MTJ 1.0 that will also be released with galileo train. do you have some nightly build that we can start working on top of it? or at least some design that we can take a look to have an idea of what we need to do on our side to useit. 

i&apos;m concerned that we don&apos;t have enought time to do our part if we are only able to start to work after M7.

if there is anything that we can do to help you guys, please let us know

thanks
gustavo



(In reply to comment #98)
&gt; Moving to M7.
&gt; 

</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1452145</commentid>
    <comment_count>100</comment_count>
      <attachid>128768</attachid>
    <who name="Kent Johnson">kent_johnson</who>
    <bug_when>2009-03-13 14:57:53 -0400</bug_when>
    <thetext>Created attachment 128768
Proposed preprocessor example

Gustavo, Craig and anyone else still listening:

This patch contains an example project with a builder that calls a registered preprocessor (attached thru an extension point). The preprocessor controls when full vs. incremental builds occur &amp; is asked to process each resource in an &apos;original&apos; folder. The processed contents are written to a &apos;processed&apos; folder, which in the case of JavaProjects would be on its classpath.

The patch is not specific to JDT, but a JDT extension is provided to help in testing.

If you&apos;re not interested in the simple tests, then you can remove the project dependencies to the 4 test projects: org.junit and org.eclipse.jdt.core.tests.*


Now for the &apos;not-so-good-news&apos; : the powers that be have decided that this patch will not released as part of 3.5.

It is being provided here so users can have a good starting point on their own preprocessor infrastructure. It should be sufficient so teams will only need to define their own preprocessor &amp; not all the &apos;extras&apos; to plug it into eclipse.

Please let me know if there is anything in the example project which is unclear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1459025</commentid>
    <comment_count>101</comment_count>
    <who name="Ricardo Mayerhofer">ricardo.ekm</who>
    <bug_when>2009-03-24 18:39:48 -0400</bug_when>
    <thetext>We have waiting for this so long. Even if this patch does not come as part of 3.5, will it come as part of an upcoming release?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1459030</commentid>
    <comment_count>102</comment_count>
    <who name="Craig Setera">craigsfnet</who>
    <bug_when>2009-03-24 18:44:12 -0400</bug_when>
    <thetext>At least in terms of MTJ, we are still trying to determine if this patch really solves the problem that we set out to solve.  What is your use case?
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1484466</commentid>
    <comment_count>103</comment_count>
    <who name="Jerome Lanneluc">jerome_lanneluc</who>
    <bug_when>2009-04-28 11:30:55 -0400</bug_when>
    <thetext>We won&apos;t do more for 3.5</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>29838</attachid>
            <date>2005-11-13 13:49:00 -0500</date>
            <delta_ts>2005-11-13 13:49:59 -0500</delta_ts>
            <desc>Patch to provide source code providers extension to JDT Core</desc>
            <filename>sourceCodeProviders_patch.txt</filename>
            <type>text/plain</type>
            <size>15873</size>
            <attacher name="Craig Setera">craigsfnet</attacher>
            

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>128768</attachid>
            <date>2009-03-13 14:57:00 -0400</date>
            <delta_ts>2009-03-13 14:57:53 -0400</delta_ts>
            <desc>Proposed preprocessor example</desc>
            <filename>preprocessor.example.zip</filename>
            <type>text/plain</type>
            <size>13115</size>
            <attacher name="Kent Johnson">kent_johnson</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>336648</bug_id>
          
          <creation_ts>2011-02-08 15:00:00 -0500</creation_ts>
          <short_desc>wrong compiler problem &quot;The value of the local variable xxx is not used&quot;</short_desc>
          <delta_ts>2012-01-29 19:56:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>3.9 candidate</status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>deepakazad</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="39262"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1880107</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-02-08 15:00:45 -0500</bug_when>
    <thetext>I20110124-1800

Wrong compiler problem &quot;The value of the local variable xxx is not used&quot; if there&apos;s a real compile error later:

public class Test {
	void foo(String m) {
		
		// wrong &quot;The value of the local variable message is not used&quot;:
		final String message= m;
		
		new Runnable() {
			public void run() {
				if (&quot;x&quot;.equals(message)) {
					bug(); // undefined method
				}
			}
		}.run();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880245</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-08 22:00:23 -0500</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883420</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 00:55:38 -0500</bug_when>
    <thetext>Released disabled junit test via org.eclipse.jdt.core.tests.compiler.regression.ProgrammingProblemsTest._test0058()

Turns out the local variable&apos;s use is recorded in code generation. Given we
don&apos;t generate code for the class with the error, the only use of the local
is missed resulting in the warning. I&apos;ll see how best to handle this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883445</commentid>
    <comment_count>3</comment_count>
      <attachid>188976</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 03:18:37 -0500</bug_when>
    <thetext>Created attachment 188976
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883446</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 03:19:49 -0500</bug_when>
    <thetext>Passes all tests, Ayush please review, TIA.

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=95909</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884057</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-16 03:22:57 -0500</bug_when>
    <thetext>Released in HEAD for 3.7 M6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1885142</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-17 14:41:47 -0500</bug_when>
    <thetext>Patch looks good. Although initially I thought that its too harsh to stop reporting variable unused problem when there&apos;s any error in the code, I observed that this is being done anyways by the use of ignoreFurtherInvestigation flag which gets set on the method whenever an error is encountered. And because of this flag being set, no analysis takes place for the method in question. So this bug can only occur in the kind of case as reported i.e. an inner method inside an anonymous class has the error, and gets marked with ignoreFurtherInvestigation, but the outer method does not. So in the outer method&apos;s analysis, we dont analyse the inner method, and hence dont encounter the usage of &apos;message&apos; inside the inner method. So its better to not report unused warnings when such a scenario occurs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1894229</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-03-07 10:23:05 -0500</bug_when>
    <thetext>Verified for 3.7M6 using build I20110301-1537</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1925249</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-06 10:45:29 -0400</bug_when>
    <thetext>OK, given that it is not possible to fix all cases (see bug 343621) with this fix, we should revert it for 3.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1925259</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-06 10:56:23 -0400</bug_when>
    <thetext>The right way to fix it would be to check if the current method contains errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the message is only checked really late in the code generation when outer locals are injected into the code generation of the anonymous class.
Since there is a problem with that code, the outer local variable emulation is never done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2057709</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-29 07:00:52 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; The right way to fix it would be to check if the current method contains
&gt; errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the
&gt; message is only checked really late in the code generation when outer locals
&gt; are injected into the code generation of the anonymous class.
&gt; Since there is a problem with that code, the outer local variable emulation is
&gt; never done.

A think the cleanest way of fixing this would be to move usage analysis from generateCode to analyseCode, see bug 328830. The latter bug, however, should
better be addressed in some M1 or M2 at the latest, IMHO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2057807</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-29 19:56:11 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; The right way to fix it would be to check if the current method contains
&gt; &gt; errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the
&gt; &gt; message is only checked really late in the code generation when outer locals
&gt; &gt; are injected into the code generation of the anonymous class.
&gt; &gt; Since there is a problem with that code, the outer local variable emulation is
&gt; &gt; never done.
&gt; 
&gt; A think the cleanest way of fixing this would be to move usage analysis from
&gt; generateCode to analyseCode, see bug 328830. The latter bug, however, should
&gt; better be addressed in some M1 or M2 at the latest, IMHO.

Concur with Stephan. Moving it out of 3.8 and tagging as plan candidate for 3.9.
Thanks Stephan.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188976</attachid>
            <date>2011-02-15 03:18:00 -0500</date>
            <delta_ts>2011-02-15 03:18:37 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>7396</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            

          </attachment>
      

    </bug>

</bugzilla>